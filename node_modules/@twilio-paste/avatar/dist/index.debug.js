var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Avatar: () => Avatar
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_text = __toModule(require("@twilio-paste/text"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_style_props = __toModule(require("@twilio-paste/style-props"));

// src/utils.ts
var getInitialsFromName = (fullname) => {
  return fullname.split(" ").map((name) => name.slice(0, 1)).reduce((previous, currentInitial, index, initials) => {
    if (index === 0 || index === initials.length - 1) {
      return `${previous}${currentInitial}`;
    }
    return previous;
  }, "");
};
var getCorrespondingLineHeightFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    return size.replace("sizeIcon", "lineHeight");
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getCorrespondingFontSizeFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    switch (size) {
      case "sizeIcon10":
      case "sizeIcon20":
      case "sizeIcon30":
      case "sizeIcon40":
      case "sizeIcon50":
      case "sizeIcon60":
      default:
        return "fontSize10";
      case "sizeIcon70":
        return "fontSize20";
      case "sizeIcon80":
        return "fontSize30";
      case "sizeIcon90":
        return "fontSize40";
      case "sizeIcon100":
        return "fontSize60";
      case "sizeIcon110":
        return "fontSize70";
    }
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getCorrespondingIconSizeFromSizeToken = (size) => {
  if (typeof size === "string" && size.includes("sizeIcon")) {
    switch (size) {
      case "sizeIcon10":
      case "sizeIcon20":
      case "sizeIcon30":
      case "sizeIcon40":
      default:
        return "sizeIcon10";
      case "sizeIcon50":
      case "sizeIcon60":
        return "sizeIcon20";
      case "sizeIcon70":
        return "sizeIcon30";
      case "sizeIcon80":
        return "sizeIcon40";
      case "sizeIcon90":
        return "sizeIcon50";
      case "sizeIcon100":
        return "sizeIcon70";
      case "sizeIcon110":
        return "sizeIcon80";
    }
  }
  throw new Error("[Avatar]: size must be of type IconSizeOptions.");
};
var getComputedTokenNames = (size) => {
  if (typeof size === "string") {
    return {
      lineHeight: getCorrespondingLineHeightFromSizeToken(size),
      fontSize: getCorrespondingFontSizeFromSizeToken(size),
      iconSize: getCorrespondingIconSizeFromSizeToken(size)
    };
  }
  if (Array.isArray(size)) {
    return {
      lineHeight: size.map((s) => {
        if (s != null) {
          return getCorrespondingLineHeightFromSizeToken(s);
        }
        return null;
      }),
      fontSize: size.map((s) => {
        if (s != null) {
          return getCorrespondingFontSizeFromSizeToken(s);
        }
        return null;
      }),
      iconSize: size.map((s) => {
        if (s != null) {
          return getCorrespondingIconSizeFromSizeToken(s);
        }
        return null;
      })
    };
  }
  throw new Error("[Avatar]: size must be a string or an array");
};

// src/index.tsx
var DEFAULT_SIZE = "sizeIcon70";
var AvatarContents = ({name, size = DEFAULT_SIZE, src, icon: Icon}) => {
  const computedTokenNames = getComputedTokenNames(size);
  if (Icon != null) {
    if (typeof Icon !== "function" || typeof Icon.displayName !== "string" || !Icon.displayName.includes("Icon")) {
      throw new Error("[Paste Avatar]: icon prop expected to be a Paste icon only.");
    }
    return /* @__PURE__ */ React.createElement(import_box.Box, {
      maxWidth: "100%",
      size,
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }, /* @__PURE__ */ React.createElement(Icon, {
      decorative: false,
      title: name,
      size: computedTokenNames.iconSize
    }));
  }
  if (src != null) {
    return /* @__PURE__ */ React.createElement(import_box.Box, {
      as: "img",
      alt: name,
      maxWidth: "100%",
      src,
      size,
      title: name
    });
  }
  return /* @__PURE__ */ React.createElement(import_text.Text, {
    as: "abbr",
    display: "block",
    fontSize: computedTokenNames.fontSize,
    fontWeight: "fontWeightBold",
    lineHeight: computedTokenNames.lineHeight,
    textAlign: "center",
    textDecoration: "none",
    title: name,
    color: "inherit"
  }, getInitialsFromName(name));
};
var Avatar = React.forwardRef((_a, ref) => {
  var {name, children, size = DEFAULT_SIZE, element = "AVATAR", src, icon} = _a, props = __rest(_a, ["name", "children", "size", "element", "src", "icon"]);
  if (name === void 0) {
    console.error("[Paste Avatar]: name prop is required");
  }
  if (src && icon) {
    console.error("[Paste Avatar]: do not set both src and icon on Avatar");
    return null;
  }
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    as: "div",
    element,
    backgroundColor: "colorBackgroundUser",
    borderRadius: "borderRadiusCircle",
    overflow: "hidden",
    ref,
    size,
    color: "colorText"
  }), src ? /* @__PURE__ */ React.createElement(AvatarContents, {
    name,
    size,
    src
  }) : /* @__PURE__ */ React.createElement(AvatarContents, {
    name,
    size,
    icon
  }));
});
Avatar.displayName = "Avatar";
Avatar.propTypes = {
  size: import_style_props.isIconSizeTokenProp,
  name: PropTypes.string.isRequired,
  element: PropTypes.string,
  src: (props) => {
    if (props.src && props.icon)
      new Error("[Paste Avatar]: do not set both src and icon on Avatar");
    if (typeof props.src !== "string")
      new Error("[Paste Avatar]: src prop must be a string");
    return null;
  },
  icon: (props) => {
    if (props.src && props.icon)
      new Error("[Paste Avatar]: do not set both src and icon on Avatar");
    if (typeof props.icon !== "function")
      new Error("[Paste Avatar]: icon prop must be a Paste Icon");
    return null;
  }
};
