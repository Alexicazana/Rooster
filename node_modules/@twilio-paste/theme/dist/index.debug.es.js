var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/themeProvider.tsx
import {
  createElement,
  useLayoutEffect
} from "react";
import {useReducedMotion, Globals as AnimatedGlobals} from "@twilio-paste/animation-library";
import {styled, StylingGlobals, ThemeProvider as StyledThemeProvider} from "@twilio-paste/styling-library";

// src/themes/default/index.ts
import {
  backgroundColors,
  borderColors,
  borderWidths,
  radii,
  fonts,
  fontSizes,
  fontWeights,
  lineHeights,
  boxShadows,
  sizings,
  spacings,
  textColors,
  zIndices
} from "@twilio-paste/design-tokens";

// src/generateThemeFromTokens.ts
var generateThemeFromTokens = ({
  backgroundColors: backgroundColors5,
  borderColors: borderColors5,
  borderWidths: borderWidths5,
  radii: radii5,
  fonts: fonts5,
  fontSizes: fontSizes5,
  fontWeights: fontWeights5,
  lineHeights: lineHeights5,
  boxShadows: boxShadows5,
  sizings: sizings5,
  spacings: spacings5,
  textColors: textColors5,
  zIndices: zIndices5
}) => {
  const breakpoints = [sizings5.size40, sizings5.size100, sizings5.size120];
  return {
    shadows: boxShadows5,
    borderWidths: borderWidths5,
    radii: radii5,
    breakpoints,
    textColors: textColors5,
    borderColors: borderColors5,
    backgroundColors: backgroundColors5,
    fonts: fonts5,
    fontSizes: fontSizes5,
    fontWeights: fontWeights5,
    lineHeights: lineHeights5,
    widths: sizings5,
    maxWidths: sizings5,
    minWidths: sizings5,
    heights: sizings5,
    maxHeights: sizings5,
    minHeights: sizings5,
    sizes: sizings5,
    iconSizes: {
      sizeIcon10: sizings5.sizeIcon10,
      sizeIcon20: sizings5.sizeIcon20,
      sizeIcon30: sizings5.sizeIcon30,
      sizeIcon40: sizings5.sizeIcon40,
      sizeIcon50: sizings5.sizeIcon50,
      sizeIcon60: sizings5.sizeIcon60,
      sizeIcon70: sizings5.sizeIcon70,
      sizeIcon80: sizings5.sizeIcon80,
      sizeIcon90: sizings5.sizeIcon90,
      sizeIcon100: sizings5.sizeIcon100,
      sizeIcon110: sizings5.sizeIcon110
    },
    space: spacings5,
    zIndices: zIndices5
  };
};

// src/themes/default/index.ts
var DefaultTheme = generateThemeFromTokens({
  backgroundColors,
  borderColors,
  borderWidths,
  radii,
  fonts,
  fontSizes,
  fontWeights,
  lineHeights,
  boxShadows,
  sizings,
  spacings,
  textColors,
  zIndices
});

// src/themes/sendgrid/index.ts
import {
  backgroundColors as backgroundColors2,
  borderColors as borderColors2,
  borderWidths as borderWidths2,
  radii as radii2,
  fonts as fonts2,
  fontSizes as fontSizes2,
  fontWeights as fontWeights2,
  lineHeights as lineHeights2,
  boxShadows as boxShadows2,
  sizings as sizings2,
  spacings as spacings2,
  textColors as textColors2,
  zIndices as zIndices2
} from "@twilio-paste/design-tokens/dist/themes/sendgrid/tokens.es6";
var SendGridTheme = generateThemeFromTokens({
  backgroundColors: backgroundColors2,
  borderColors: borderColors2,
  borderWidths: borderWidths2,
  radii: radii2,
  fonts: fonts2,
  fontSizes: fontSizes2,
  fontWeights: fontWeights2,
  lineHeights: lineHeights2,
  boxShadows: boxShadows2,
  sizings: sizings2,
  spacings: spacings2,
  textColors: textColors2,
  zIndices: zIndices2
});

// src/themes/console/index.ts
import {
  backgroundColors as backgroundColors3,
  borderColors as borderColors3,
  borderWidths as borderWidths3,
  radii as radii3,
  fonts as fonts3,
  fontSizes as fontSizes3,
  fontWeights as fontWeights3,
  lineHeights as lineHeights3,
  boxShadows as boxShadows3,
  sizings as sizings3,
  spacings as spacings3,
  textColors as textColors3,
  zIndices as zIndices3
} from "@twilio-paste/design-tokens/dist/themes/console/tokens.es6";
var ConsoleTheme = generateThemeFromTokens({
  backgroundColors: backgroundColors3,
  borderColors: borderColors3,
  borderWidths: borderWidths3,
  radii: radii3,
  fonts: fonts3,
  fontSizes: fontSizes3,
  fontWeights: fontWeights3,
  lineHeights: lineHeights3,
  boxShadows: boxShadows3,
  sizings: sizings3,
  spacings: spacings3,
  textColors: textColors3,
  zIndices: zIndices3
});

// src/themes/dark/index.ts
import {
  backgroundColors as backgroundColors4,
  borderColors as borderColors4,
  borderWidths as borderWidths4,
  radii as radii4,
  fonts as fonts4,
  fontSizes as fontSizes4,
  fontWeights as fontWeights4,
  lineHeights as lineHeights4,
  boxShadows as boxShadows4,
  sizings as sizings4,
  spacings as spacings4,
  textColors as textColors4,
  zIndices as zIndices4
} from "@twilio-paste/design-tokens/dist/themes/dark/tokens.es6";
var DarkTheme = generateThemeFromTokens({
  backgroundColors: backgroundColors4,
  borderColors: borderColors4,
  borderWidths: borderWidths4,
  radii: radii4,
  fonts: fonts4,
  fontSizes: fontSizes4,
  fontWeights: fontWeights4,
  lineHeights: lineHeights4,
  boxShadows: boxShadows4,
  sizings: sizings4,
  spacings: spacings4,
  textColors: textColors4,
  zIndices: zIndices4
});

// src/styles/global.ts
import {css} from "@twilio-paste/styling-library";
var pasteGlobalStyles = css({
  html: {
    fontSize: "100%"
  },
  body: {
    backgroundColor: "colorBackgroundBody",
    margin: 0,
    fontSize: "fontSize30"
  },
  "*, *::after, *::before": {
    boxSizing: "border-box"
  },
  "@media (prefers-reduced-motion: reduce)": {
    "*": {
      animationDuration: "0 !important",
      animationIterationCount: "1 !important",
      transitionDuration: "0 !important",
      scrollBehavior: "auto !important"
    }
  },
  ":root": {
    ["--reach-dialog"]: "1"
  }
});

// src/styles/base.ts
import {css as css2} from "@twilio-paste/styling-library";
var pasteBaseStyles = css2({
  color: "colorText",
  fontSize: "fontSize30",
  fontFamily: "fontFamilyText",
  lineHeight: "lineHeight30",
  fontWeight: "fontWeightNormal",
  fontVariantNumeric: "tabular-nums"
});

// src/styles/fonts.ts
import {EmotionCSS} from "@twilio-paste/styling-library";
var pasteFonts = EmotionCSS`
/* -------------------------------------------------------
Variable font.
*/
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: 'Regular';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-roman.var.woff2?v=3.15") format("woff2");
}
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: italic;
  font-named-instance: 'Italic';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-italic.var.woff2?v=3.15") format("woff2");
}
/* --------------------------------------------------------------------------
[EXPERIMENTAL] Multi-axis, single variable font.

Slant axis is not yet widely supported (as of February 2019) and thus this
multi-axis single variable font is opt-in rather than the default.

When using this, you will probably need to set font-variation-settings
explicitly, e.g.

  * { font-variation-settings: "slnt" 0deg }
  .italic { font-variation-settings: "slnt" 10deg }

*/
@font-face {
  font-family: 'Inter var experimental';
  font-weight: 100 900;
  font-display: swap;
  font-style: oblique 0deg 8deg;
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter.var.woff2?v=3.15") format("woff2");
}

/*
Fira Mono
*/
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 400;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 700;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 500;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff') format('woff');
}
`;

// src/constants.ts
var ThemeVariants = {
  DEFAULT: "default",
  CONSOLE: "console",
  SENDGRID: "sendgrid",
  FLEX: "flex",
  DARK: "dark"
};

// src/themeProvider.tsx
var StyledBase = styled.div(pasteBaseStyles);
function getProviderThemeProps(theme, customBreakpoints) {
  switch (theme) {
    case ThemeVariants.DARK:
      return __assign(__assign({}, DarkTheme), {
        breakpoints: customBreakpoints || DarkTheme.breakpoints
      });
    case ThemeVariants.SENDGRID:
      return __assign(__assign({}, SendGridTheme), {
        breakpoints: customBreakpoints || SendGridTheme.breakpoints
      });
    case ThemeVariants.CONSOLE:
      return __assign(__assign({}, ConsoleTheme), {
        breakpoints: customBreakpoints || ConsoleTheme.breakpoints
      });
    case ThemeVariants.FLEX:
    case ThemeVariants.DEFAULT:
    default:
      return __assign(__assign({}, DefaultTheme), {
        breakpoints: customBreakpoints || DefaultTheme.breakpoints
      });
  }
}
var ThemeProvider = (_a) => {
  var {
    customBreakpoints,
    theme = ThemeVariants.DEFAULT,
    disableAnimations = false
  } = _a, props = __rest(_a, [
    "customBreakpoints",
    "theme",
    "disableAnimations"
  ]);
  const prefersReducedMotion = useReducedMotion();
  useLayoutEffect(() => {
    AnimatedGlobals.assign({
      skipAnimation: disableAnimations || prefersReducedMotion
    });
  }, [disableAnimations, prefersReducedMotion]);
  const providerThemeProps = getProviderThemeProps(theme, customBreakpoints);
  return /* @__PURE__ */ createElement(StyledThemeProvider, {
    theme: providerThemeProps
  }, /* @__PURE__ */ createElement(StylingGlobals, {
    styles: pasteGlobalStyles({theme: providerThemeProps})
  }), /* @__PURE__ */ createElement(StylingGlobals, {
    styles: pasteFonts
  }), /* @__PURE__ */ createElement(StyledBase, __assign({}, props)));
};

// src/themeConsumer.tsx
import {
  createElement as createElement2
} from "react";
import {ThemeContext} from "@twilio-paste/styling-library";
var ThemeConsumer = (_a) => {
  var {children} = _a, props = __rest(_a, ["children"]);
  if (children == null || typeof children !== "function") {
    throw new Error("[ThemeConsumer]: You must pass a function as children");
  }
  return /* @__PURE__ */ createElement2(ThemeContext.Consumer, null, (theme) => {
    const newTheme = theme;
    return children(__assign(__assign({}, props), {theme: newTheme}));
  });
};

// src/withTheme.ts
import {withTheme} from "@twilio-paste/styling-library";

// src/useTheme.ts
import {
  useContext
} from "react";
import {ThemeContext as ThemeContext2} from "@twilio-paste/styling-library";
var useTheme = () => {
  const context = useContext(ThemeContext2);
  if (!context) {
    throw new Error("[useHook]: must be used within the @twilio-paste/theme provider");
  }
  return context;
};

// src/generateTokensFromTheme.ts
var generateTokensFromTheme = ({
  backgroundColors: backgroundColors5,
  borderColors: borderColors5,
  borderWidths: borderWidths5,
  radii: radii5,
  fonts: fonts5,
  fontSizes: fontSizes5,
  fontWeights: fontWeights5,
  lineHeights: lineHeights5,
  shadows,
  sizes,
  space,
  textColors: textColors5,
  zIndices: zIndices5
}) => {
  return {
    boxShadows: shadows,
    borderWidths: borderWidths5,
    radii: radii5,
    textColors: textColors5,
    borderColors: borderColors5,
    backgroundColors: backgroundColors5,
    fonts: fonts5,
    fontSizes: fontSizes5,
    fontWeights: fontWeights5,
    lineHeights: lineHeights5,
    sizings: sizes,
    spacings: space,
    zIndices: zIndices5
  };
};

// src/utils/remToPx.ts
var PX_PER_REM = 16;
var remToPx = (rem, type = "number") => {
  const remValue = typeof rem === "string" ? Number.parseFloat(rem.replace("rem", "")) : rem;
  const pxValue = Math.round(remValue * PX_PER_REM);
  return type === "number" ? pxValue : `${pxValue}px`;
};

// src/useThemeContrastCheck.ts
import {
  getContrastRatingsOfTokensWithTextContrastRequirements,
  getContrastRatingsOfTokensWithUIControlContrastRequirements,
  getNumberOfTextFailures,
  getNumberOfUIControlFailures
} from "@twilio-paste/color-contrast-utils";
var useThemeContrastCheck = () => {
  const theme = useTheme();
  const designTokens = generateTokensFromTheme(theme);
  const textContrastRating = getContrastRatingsOfTokensWithTextContrastRequirements(designTokens);
  const uiControlContrastRating = getContrastRatingsOfTokensWithUIControlContrastRequirements(designTokens);
  const numberOfTextFailures = getNumberOfTextFailures(textContrastRating);
  const numberOfUIControlFailures = getNumberOfUIControlFailures(uiControlContrastRating);
  const totalFailures = numberOfTextFailures + numberOfUIControlFailures;
  return {
    textContrastRating,
    uiControlContrastRating,
    numberOfTextFailures,
    numberOfUIControlFailures,
    totalFailures
  };
};

// src/index.tsx
var Theme = {
  Provider: ThemeProvider,
  Consumer: ThemeConsumer
};
export {
  ConsoleTheme,
  DarkTheme,
  DefaultTheme,
  SendGridTheme,
  StyledBase,
  Theme,
  ThemeVariants,
  generateThemeFromTokens,
  generateTokensFromTheme,
  pasteBaseStyles,
  pasteFonts,
  pasteGlobalStyles,
  remToPx,
  useTheme,
  useThemeContrastCheck,
  withTheme
};
