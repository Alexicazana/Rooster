var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  ConsoleTheme: () => ConsoleTheme,
  DarkTheme: () => DarkTheme,
  DefaultTheme: () => DefaultTheme,
  SendGridTheme: () => SendGridTheme,
  StyledBase: () => StyledBase,
  Theme: () => Theme,
  ThemeVariants: () => ThemeVariants,
  generateThemeFromTokens: () => generateThemeFromTokens,
  generateTokensFromTheme: () => generateTokensFromTheme,
  pasteBaseStyles: () => pasteBaseStyles,
  pasteFonts: () => pasteFonts,
  pasteGlobalStyles: () => pasteGlobalStyles,
  remToPx: () => remToPx,
  useTheme: () => useTheme,
  useThemeContrastCheck: () => useThemeContrastCheck,
  withTheme: () => import_styling_library6.withTheme
});

// src/themeProvider.tsx
var React = __toModule(require("react"));
var import_animation_library = __toModule(require("@twilio-paste/animation-library"));
var import_styling_library4 = __toModule(require("@twilio-paste/styling-library"));

// src/themes/default/index.ts
var import_design_tokens = __toModule(require("@twilio-paste/design-tokens"));

// src/generateThemeFromTokens.ts
var generateThemeFromTokens = ({
  backgroundColors: backgroundColors5,
  borderColors: borderColors5,
  borderWidths: borderWidths5,
  radii: radii5,
  fonts: fonts5,
  fontSizes: fontSizes5,
  fontWeights: fontWeights5,
  lineHeights: lineHeights5,
  boxShadows: boxShadows5,
  sizings: sizings5,
  spacings: spacings5,
  textColors: textColors5,
  zIndices: zIndices5
}) => {
  const breakpoints = [sizings5.size40, sizings5.size100, sizings5.size120];
  return {
    shadows: boxShadows5,
    borderWidths: borderWidths5,
    radii: radii5,
    breakpoints,
    textColors: textColors5,
    borderColors: borderColors5,
    backgroundColors: backgroundColors5,
    fonts: fonts5,
    fontSizes: fontSizes5,
    fontWeights: fontWeights5,
    lineHeights: lineHeights5,
    widths: sizings5,
    maxWidths: sizings5,
    minWidths: sizings5,
    heights: sizings5,
    maxHeights: sizings5,
    minHeights: sizings5,
    sizes: sizings5,
    iconSizes: {
      sizeIcon10: sizings5.sizeIcon10,
      sizeIcon20: sizings5.sizeIcon20,
      sizeIcon30: sizings5.sizeIcon30,
      sizeIcon40: sizings5.sizeIcon40,
      sizeIcon50: sizings5.sizeIcon50,
      sizeIcon60: sizings5.sizeIcon60,
      sizeIcon70: sizings5.sizeIcon70,
      sizeIcon80: sizings5.sizeIcon80,
      sizeIcon90: sizings5.sizeIcon90,
      sizeIcon100: sizings5.sizeIcon100,
      sizeIcon110: sizings5.sizeIcon110
    },
    space: spacings5,
    zIndices: zIndices5
  };
};

// src/themes/default/index.ts
var DefaultTheme = generateThemeFromTokens({
  backgroundColors: import_design_tokens.backgroundColors,
  borderColors: import_design_tokens.borderColors,
  borderWidths: import_design_tokens.borderWidths,
  radii: import_design_tokens.radii,
  fonts: import_design_tokens.fonts,
  fontSizes: import_design_tokens.fontSizes,
  fontWeights: import_design_tokens.fontWeights,
  lineHeights: import_design_tokens.lineHeights,
  boxShadows: import_design_tokens.boxShadows,
  sizings: import_design_tokens.sizings,
  spacings: import_design_tokens.spacings,
  textColors: import_design_tokens.textColors,
  zIndices: import_design_tokens.zIndices
});

// src/themes/sendgrid/index.ts
var import_tokens = __toModule(require("@twilio-paste/design-tokens/dist/themes/sendgrid/tokens.common"));
var SendGridTheme = generateThemeFromTokens({
  backgroundColors: import_tokens.backgroundColors,
  borderColors: import_tokens.borderColors,
  borderWidths: import_tokens.borderWidths,
  radii: import_tokens.radii,
  fonts: import_tokens.fonts,
  fontSizes: import_tokens.fontSizes,
  fontWeights: import_tokens.fontWeights,
  lineHeights: import_tokens.lineHeights,
  boxShadows: import_tokens.boxShadows,
  sizings: import_tokens.sizings,
  spacings: import_tokens.spacings,
  textColors: import_tokens.textColors,
  zIndices: import_tokens.zIndices
});

// src/themes/console/index.ts
var import_tokens2 = __toModule(require("@twilio-paste/design-tokens/dist/themes/console/tokens.common"));
var ConsoleTheme = generateThemeFromTokens({
  backgroundColors: import_tokens2.backgroundColors,
  borderColors: import_tokens2.borderColors,
  borderWidths: import_tokens2.borderWidths,
  radii: import_tokens2.radii,
  fonts: import_tokens2.fonts,
  fontSizes: import_tokens2.fontSizes,
  fontWeights: import_tokens2.fontWeights,
  lineHeights: import_tokens2.lineHeights,
  boxShadows: import_tokens2.boxShadows,
  sizings: import_tokens2.sizings,
  spacings: import_tokens2.spacings,
  textColors: import_tokens2.textColors,
  zIndices: import_tokens2.zIndices
});

// src/themes/dark/index.ts
var import_tokens3 = __toModule(require("@twilio-paste/design-tokens/dist/themes/dark/tokens.common"));
var DarkTheme = generateThemeFromTokens({
  backgroundColors: import_tokens3.backgroundColors,
  borderColors: import_tokens3.borderColors,
  borderWidths: import_tokens3.borderWidths,
  radii: import_tokens3.radii,
  fonts: import_tokens3.fonts,
  fontSizes: import_tokens3.fontSizes,
  fontWeights: import_tokens3.fontWeights,
  lineHeights: import_tokens3.lineHeights,
  boxShadows: import_tokens3.boxShadows,
  sizings: import_tokens3.sizings,
  spacings: import_tokens3.spacings,
  textColors: import_tokens3.textColors,
  zIndices: import_tokens3.zIndices
});

// src/styles/global.ts
var import_styling_library = __toModule(require("@twilio-paste/styling-library"));
var pasteGlobalStyles = import_styling_library.css({
  html: {
    fontSize: "100%"
  },
  body: {
    backgroundColor: "colorBackgroundBody",
    margin: 0,
    fontSize: "fontSize30"
  },
  "*, *::after, *::before": {
    boxSizing: "border-box"
  },
  "@media (prefers-reduced-motion: reduce)": {
    "*": {
      animationDuration: "0 !important",
      animationIterationCount: "1 !important",
      transitionDuration: "0 !important",
      scrollBehavior: "auto !important"
    }
  },
  ":root": {
    ["--reach-dialog"]: "1"
  }
});

// src/styles/base.ts
var import_styling_library2 = __toModule(require("@twilio-paste/styling-library"));
var pasteBaseStyles = import_styling_library2.css({
  color: "colorText",
  fontSize: "fontSize30",
  fontFamily: "fontFamilyText",
  lineHeight: "lineHeight30",
  fontWeight: "fontWeightNormal",
  fontVariantNumeric: "tabular-nums"
});

// src/styles/fonts.ts
var import_styling_library3 = __toModule(require("@twilio-paste/styling-library"));
var pasteFonts = import_styling_library3.EmotionCSS`
/* -------------------------------------------------------
Variable font.
*/
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: 'Regular';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-roman.var.woff2?v=3.15") format("woff2");
}
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: italic;
  font-named-instance: 'Italic';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-italic.var.woff2?v=3.15") format("woff2");
}
/* --------------------------------------------------------------------------
[EXPERIMENTAL] Multi-axis, single variable font.

Slant axis is not yet widely supported (as of February 2019) and thus this
multi-axis single variable font is opt-in rather than the default.

When using this, you will probably need to set font-variation-settings
explicitly, e.g.

  * { font-variation-settings: "slnt" 0deg }
  .italic { font-variation-settings: "slnt" 10deg }

*/
@font-face {
  font-family: 'Inter var experimental';
  font-weight: 100 900;
  font-display: swap;
  font-style: oblique 0deg 8deg;
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter.var.woff2?v=3.15") format("woff2");
}

/*
Fira Mono
*/
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 400;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 700;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 500;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff') format('woff');
}
`;

// src/constants.ts
var ThemeVariants = {
  DEFAULT: "default",
  CONSOLE: "console",
  SENDGRID: "sendgrid",
  FLEX: "flex",
  DARK: "dark"
};

// src/themeProvider.tsx
var StyledBase = import_styling_library4.styled.div(pasteBaseStyles);
function getProviderThemeProps(theme, customBreakpoints) {
  switch (theme) {
    case ThemeVariants.DARK:
      return __assign(__assign({}, DarkTheme), {
        breakpoints: customBreakpoints || DarkTheme.breakpoints
      });
    case ThemeVariants.SENDGRID:
      return __assign(__assign({}, SendGridTheme), {
        breakpoints: customBreakpoints || SendGridTheme.breakpoints
      });
    case ThemeVariants.CONSOLE:
      return __assign(__assign({}, ConsoleTheme), {
        breakpoints: customBreakpoints || ConsoleTheme.breakpoints
      });
    case ThemeVariants.FLEX:
    case ThemeVariants.DEFAULT:
    default:
      return __assign(__assign({}, DefaultTheme), {
        breakpoints: customBreakpoints || DefaultTheme.breakpoints
      });
  }
}
var ThemeProvider = (_a) => {
  var {
    customBreakpoints,
    theme = ThemeVariants.DEFAULT,
    disableAnimations = false
  } = _a, props = __rest(_a, [
    "customBreakpoints",
    "theme",
    "disableAnimations"
  ]);
  const prefersReducedMotion = import_animation_library.useReducedMotion();
  React.useLayoutEffect(() => {
    import_animation_library.Globals.assign({
      skipAnimation: disableAnimations || prefersReducedMotion
    });
  }, [disableAnimations, prefersReducedMotion]);
  const providerThemeProps = getProviderThemeProps(theme, customBreakpoints);
  return /* @__PURE__ */ React.createElement(import_styling_library4.ThemeProvider, {
    theme: providerThemeProps
  }, /* @__PURE__ */ React.createElement(import_styling_library4.StylingGlobals, {
    styles: pasteGlobalStyles({theme: providerThemeProps})
  }), /* @__PURE__ */ React.createElement(import_styling_library4.StylingGlobals, {
    styles: pasteFonts
  }), /* @__PURE__ */ React.createElement(StyledBase, __assign({}, props)));
};

// src/themeConsumer.tsx
var React2 = __toModule(require("react"));
var import_styling_library5 = __toModule(require("@twilio-paste/styling-library"));
var ThemeConsumer = (_a) => {
  var {children} = _a, props = __rest(_a, ["children"]);
  if (children == null || typeof children !== "function") {
    throw new Error("[ThemeConsumer]: You must pass a function as children");
  }
  return /* @__PURE__ */ React2.createElement(import_styling_library5.ThemeContext.Consumer, null, (theme) => {
    const newTheme = theme;
    return children(__assign(__assign({}, props), {theme: newTheme}));
  });
};

// src/withTheme.ts
var import_styling_library6 = __toModule(require("@twilio-paste/styling-library"));

// src/useTheme.ts
var React3 = __toModule(require("react"));
var import_styling_library7 = __toModule(require("@twilio-paste/styling-library"));
var useTheme = () => {
  const context = React3.useContext(import_styling_library7.ThemeContext);
  if (!context) {
    throw new Error("[useHook]: must be used within the @twilio-paste/theme provider");
  }
  return context;
};

// src/generateTokensFromTheme.ts
var generateTokensFromTheme = ({
  backgroundColors: backgroundColors5,
  borderColors: borderColors5,
  borderWidths: borderWidths5,
  radii: radii5,
  fonts: fonts5,
  fontSizes: fontSizes5,
  fontWeights: fontWeights5,
  lineHeights: lineHeights5,
  shadows,
  sizes,
  space,
  textColors: textColors5,
  zIndices: zIndices5
}) => {
  return {
    boxShadows: shadows,
    borderWidths: borderWidths5,
    radii: radii5,
    textColors: textColors5,
    borderColors: borderColors5,
    backgroundColors: backgroundColors5,
    fonts: fonts5,
    fontSizes: fontSizes5,
    fontWeights: fontWeights5,
    lineHeights: lineHeights5,
    sizings: sizes,
    spacings: space,
    zIndices: zIndices5
  };
};

// src/utils/remToPx.ts
var PX_PER_REM = 16;
var remToPx = (rem, type = "number") => {
  const remValue = typeof rem === "string" ? Number.parseFloat(rem.replace("rem", "")) : rem;
  const pxValue = Math.round(remValue * PX_PER_REM);
  return type === "number" ? pxValue : `${pxValue}px`;
};

// src/useThemeContrastCheck.ts
var import_color_contrast_utils = __toModule(require("@twilio-paste/color-contrast-utils"));
var useThemeContrastCheck = () => {
  const theme = useTheme();
  const designTokens = generateTokensFromTheme(theme);
  const textContrastRating = import_color_contrast_utils.getContrastRatingsOfTokensWithTextContrastRequirements(designTokens);
  const uiControlContrastRating = import_color_contrast_utils.getContrastRatingsOfTokensWithUIControlContrastRequirements(designTokens);
  const numberOfTextFailures = import_color_contrast_utils.getNumberOfTextFailures(textContrastRating);
  const numberOfUIControlFailures = import_color_contrast_utils.getNumberOfUIControlFailures(uiControlContrastRating);
  const totalFailures = numberOfTextFailures + numberOfUIControlFailures;
  return {
    textContrastRating,
    uiControlContrastRating,
    numberOfTextFailures,
    numberOfUIControlFailures,
    totalFailures
  };
};

// src/index.tsx
var Theme = {
  Provider: ThemeProvider,
  Consumer: ThemeConsumer
};
