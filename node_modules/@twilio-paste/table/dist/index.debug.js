var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  TBody: () => TBody,
  TBodyPropTypes: () => TBodyPropTypes,
  TFoot: () => TFoot,
  TFootPropTypes: () => TFootPropTypes,
  THead: () => THead,
  THeadPropTypes: () => THeadPropTypes,
  Table: () => Table,
  TablePropTypes: () => TablePropTypes,
  Td: () => Td,
  TdPropTypes: () => TdPropTypes,
  Th: () => Th,
  ThPropTypes: () => ThPropTypes,
  Tr: () => Tr,
  TrPropTypes: () => TrPropTypes
});

// src/Table.tsx
var React2 = __toModule(require("react"));
var import_box = __toModule(require("@twilio-paste/box"));

// src/TableContext.tsx
var React = __toModule(require("react"));
var TableContext = React.createContext({});

// src/proptypes.ts
var PropTypes = __toModule(require("prop-types"));
var import_style_props = __toModule(require("@twilio-paste/style-props"));

// src/constants.ts
var TableAlignmentObject = {
  LEFT: "left",
  CENTER: "center",
  RIGHT: "right"
};
var TableLayoutObject = {
  AUTO: "auto",
  FIXED: "fixed"
};
var TableVariantObject = {
  DEFAULT: "default",
  BORDERLESS: "borderless"
};
var TableVerticalAlignmentObject = {
  TOP: "top",
  MIDDLE: "middle",
  BOTTOM: "bottom"
};

// src/proptypes.ts
var TablePropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string,
  striped: PropTypes.bool,
  tableLayout: PropTypes.oneOf(Object.values(TableLayoutObject)),
  variant: PropTypes.oneOf(Object.values(TableVariantObject))
};
var THeadPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
var TBodyPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
var TrPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string,
  verticalAlign: PropTypes.oneOf(Object.values(TableVerticalAlignmentObject))
};
var ThPropTypes = {
  children: PropTypes.node,
  element: PropTypes.string,
  textAlign: PropTypes.oneOf(Object.values(TableAlignmentObject)),
  width: import_style_props.isWidthTokenProp
};
var TdPropTypes = {
  children: PropTypes.node,
  element: PropTypes.string,
  textAlign: PropTypes.oneOf(Object.values(TableAlignmentObject))
};
var TFootPropTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};

// src/Table.tsx
var Table = React2.forwardRef((_a, ref) => {
  var {element = "TABLE", striped = false, tableLayout = "auto", variant = "default"} = _a, props = __rest(_a, ["element", "striped", "tableLayout", "variant"]);
  const tableContext = {
    striped
  };
  return /* @__PURE__ */ React2.createElement(TableContext.Provider, {
    value: tableContext
  }, /* @__PURE__ */ React2.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    ref,
    as: "table",
    borderCollapse: "collapse",
    borderColor: "colorBorderWeaker",
    borderSpacing: "0",
    borderStyle: "solid",
    borderWidth: variant === "borderless" ? "borderWidth0" : "borderWidth10",
    element,
    tableLayout: tableLayout === "fixed" ? "fixed" : "auto",
    width: "100%"
  })));
});
Table.displayName = "Table";
if (false) {
  Table.propTypes = TablePropTypes;
}

// src/THead.tsx
var React3 = __toModule(require("react"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var THead = React3.forwardRef((_a, ref) => {
  var {element = "THEAD"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React3.createElement(import_box2.Box, __assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    ref,
    as: "thead",
    backgroundColor: "colorBackground",
    borderBottomColor: "colorBorderWeaker",
    borderBottomStyle: "solid",
    borderBottomWidth: "borderWidth20",
    element
  }));
});
THead.displayName = "THead";
if (false) {
  THead.propTypes = THeadPropTypes;
}

// src/TBody.tsx
var React4 = __toModule(require("react"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var TBody = React4.forwardRef((_a, ref) => {
  var {element = "TBODY"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React4.createElement(import_box3.Box, __assign(__assign({}, import_box3.safelySpreadBoxProps(props)), {
    ref,
    as: "tbody",
    backgroundColor: "colorBackgroundBody",
    element
  }));
});
TBody.displayName = "TBody";
if (false) {
  TBody.propTypes = TBodyPropTypes;
}

// src/TFoot.tsx
var React5 = __toModule(require("react"));
var import_box4 = __toModule(require("@twilio-paste/box"));
var TFoot = React5.forwardRef((_a, ref) => {
  var {element = "TFOOT"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React5.createElement(import_box4.Box, __assign(__assign({}, import_box4.safelySpreadBoxProps(props)), {
    ref,
    as: "tfoot",
    backgroundColor: "colorBackground",
    borderTopStyle: "solid",
    borderTopWidth: "borderWidth20",
    borderTopColor: "colorBorderWeaker",
    element
  }));
});
TFoot.displayName = "TFoot";
if (false) {
  TFoot.propTypes = TFootPropTypes;
}

// src/Tr.tsx
var React6 = __toModule(require("react"));
var import_box5 = __toModule(require("@twilio-paste/box"));
var Tr = React6.forwardRef((_a, ref) => {
  var {element = "TR", verticalAlign = "middle"} = _a, props = __rest(_a, ["element", "verticalAlign"]);
  const {striped} = React6.useContext(TableContext);
  return /* @__PURE__ */ React6.createElement(import_box5.Box, __assign(__assign(__assign({}, striped), import_box5.safelySpreadBoxProps(props)), {
    ref,
    as: "tr",
    borderStyle: "solid",
    borderColor: "colorBorderWeaker",
    borderWidth: "borderWidth0",
    borderBottomWidth: "borderWidth10",
    element,
    verticalAlign,
    _even: {backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent"},
    _last: {borderWidth: "borderWidth0"}
  }));
});
Tr.displayName = "Tr";
if (false) {
  Tr.propTypes = TrPropTypes;
}

// src/Td.tsx
var React7 = __toModule(require("react"));
var import_box6 = __toModule(require("@twilio-paste/box"));
var Td = React7.forwardRef((_a, ref) => {
  var {element = "TD", textAlign = "left"} = _a, props = __rest(_a, ["element", "textAlign"]);
  return /* @__PURE__ */ React7.createElement(import_box6.Box, __assign(__assign({}, import_box6.safelySpreadBoxProps(props)), {
    ref,
    as: "td",
    element,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    paddingBottom: "space40",
    paddingLeft: "space50",
    paddingRight: "space50",
    paddingTop: "space40",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    wordWrap: "break-word"
  }));
});
Td.displayName = "Td";
if (false) {
  Td.propTypes = TdPropTypes;
}

// src/Th.tsx
var React8 = __toModule(require("react"));
var import_box7 = __toModule(require("@twilio-paste/box"));
var Th = React8.forwardRef((_a, ref) => {
  var {element = "TH", textAlign = "left", width} = _a, props = __rest(_a, ["element", "textAlign", "width"]);
  return /* @__PURE__ */ React8.createElement(import_box7.Box, __assign(__assign({}, import_box7.safelySpreadBoxProps(props)), {
    ref,
    as: "th",
    element,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    fontWeight: "fontWeightSemibold",
    paddingBottom: "space40",
    paddingLeft: "space50",
    paddingRight: "space50",
    paddingTop: "space40",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    width,
    wordWrap: "break-word"
  }));
});
Th.displayName = "Th";
if (false) {
  Th.propTypes = ThPropTypes;
}
