var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Table.tsx
import {
  createElement,
  forwardRef
} from "react";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";

// src/TableContext.tsx
import {
  createContext
} from "react";
var TableContext = createContext({});

// src/proptypes.ts
import {
  bool,
  node,
  oneOf,
  string
} from "prop-types";
import {isWidthTokenProp} from "@twilio-paste/style-props";

// src/constants.ts
var TableAlignmentObject = {
  LEFT: "left",
  CENTER: "center",
  RIGHT: "right"
};
var TableLayoutObject = {
  AUTO: "auto",
  FIXED: "fixed"
};
var TableVariantObject = {
  DEFAULT: "default",
  BORDERLESS: "borderless"
};
var TableVerticalAlignmentObject = {
  TOP: "top",
  MIDDLE: "middle",
  BOTTOM: "bottom"
};

// src/proptypes.ts
var TablePropTypes = {
  children: node.isRequired,
  element: string,
  striped: bool,
  tableLayout: oneOf(Object.values(TableLayoutObject)),
  variant: oneOf(Object.values(TableVariantObject))
};
var THeadPropTypes = {
  children: node.isRequired,
  element: string
};
var TBodyPropTypes = {
  children: node.isRequired,
  element: string
};
var TrPropTypes = {
  children: node.isRequired,
  element: string,
  verticalAlign: oneOf(Object.values(TableVerticalAlignmentObject))
};
var ThPropTypes = {
  children: node,
  element: string,
  textAlign: oneOf(Object.values(TableAlignmentObject)),
  width: isWidthTokenProp
};
var TdPropTypes = {
  children: node,
  element: string,
  textAlign: oneOf(Object.values(TableAlignmentObject))
};
var TFootPropTypes = {
  children: node.isRequired,
  element: string
};

// src/Table.tsx
var Table = forwardRef((_a, ref) => {
  var {element = "TABLE", striped = false, tableLayout = "auto", variant = "default"} = _a, props = __rest(_a, ["element", "striped", "tableLayout", "variant"]);
  const tableContext = {
    striped
  };
  return /* @__PURE__ */ createElement(TableContext.Provider, {
    value: tableContext
  }, /* @__PURE__ */ createElement(Box, __assign(__assign({}, safelySpreadBoxProps(props)), {
    ref,
    as: "table",
    borderCollapse: "collapse",
    borderColor: "colorBorderWeaker",
    borderSpacing: "0",
    borderStyle: "solid",
    borderWidth: variant === "borderless" ? "borderWidth0" : "borderWidth10",
    element,
    tableLayout: tableLayout === "fixed" ? "fixed" : "auto",
    width: "100%"
  })));
});
Table.displayName = "Table";
if (false) {
  Table.propTypes = TablePropTypes;
}

// src/THead.tsx
import {
  createElement as createElement2,
  forwardRef as forwardRef2
} from "react";
import {Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
var THead = forwardRef2((_a, ref) => {
  var {element = "THEAD"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign({}, safelySpreadBoxProps2(props)), {
    ref,
    as: "thead",
    backgroundColor: "colorBackground",
    borderBottomColor: "colorBorderWeaker",
    borderBottomStyle: "solid",
    borderBottomWidth: "borderWidth20",
    element
  }));
});
THead.displayName = "THead";
if (false) {
  THead.propTypes = THeadPropTypes;
}

// src/TBody.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3
} from "react";
import {Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3} from "@twilio-paste/box";
var TBody = forwardRef3((_a, ref) => {
  var {element = "TBODY"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ createElement3(Box3, __assign(__assign({}, safelySpreadBoxProps3(props)), {
    ref,
    as: "tbody",
    backgroundColor: "colorBackgroundBody",
    element
  }));
});
TBody.displayName = "TBody";
if (false) {
  TBody.propTypes = TBodyPropTypes;
}

// src/TFoot.tsx
import {
  createElement as createElement4,
  forwardRef as forwardRef4
} from "react";
import {Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4} from "@twilio-paste/box";
var TFoot = forwardRef4((_a, ref) => {
  var {element = "TFOOT"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ createElement4(Box4, __assign(__assign({}, safelySpreadBoxProps4(props)), {
    ref,
    as: "tfoot",
    backgroundColor: "colorBackground",
    borderTopStyle: "solid",
    borderTopWidth: "borderWidth20",
    borderTopColor: "colorBorderWeaker",
    element
  }));
});
TFoot.displayName = "TFoot";
if (false) {
  TFoot.propTypes = TFootPropTypes;
}

// src/Tr.tsx
import {
  createElement as createElement5,
  forwardRef as forwardRef5,
  useContext
} from "react";
import {Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5} from "@twilio-paste/box";
var Tr = forwardRef5((_a, ref) => {
  var {element = "TR", verticalAlign = "middle"} = _a, props = __rest(_a, ["element", "verticalAlign"]);
  const {striped} = useContext(TableContext);
  return /* @__PURE__ */ createElement5(Box5, __assign(__assign(__assign({}, striped), safelySpreadBoxProps5(props)), {
    ref,
    as: "tr",
    borderStyle: "solid",
    borderColor: "colorBorderWeaker",
    borderWidth: "borderWidth0",
    borderBottomWidth: "borderWidth10",
    element,
    verticalAlign,
    _even: {backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent"},
    _last: {borderWidth: "borderWidth0"}
  }));
});
Tr.displayName = "Tr";
if (false) {
  Tr.propTypes = TrPropTypes;
}

// src/Td.tsx
import {
  createElement as createElement6,
  forwardRef as forwardRef6
} from "react";
import {Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6} from "@twilio-paste/box";
var Td = forwardRef6((_a, ref) => {
  var {element = "TD", textAlign = "left"} = _a, props = __rest(_a, ["element", "textAlign"]);
  return /* @__PURE__ */ createElement6(Box6, __assign(__assign({}, safelySpreadBoxProps6(props)), {
    ref,
    as: "td",
    element,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    paddingBottom: "space40",
    paddingLeft: "space50",
    paddingRight: "space50",
    paddingTop: "space40",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    wordWrap: "break-word"
  }));
});
Td.displayName = "Td";
if (false) {
  Td.propTypes = TdPropTypes;
}

// src/Th.tsx
import {
  createElement as createElement7,
  forwardRef as forwardRef7
} from "react";
import {Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7} from "@twilio-paste/box";
var Th = forwardRef7((_a, ref) => {
  var {element = "TH", textAlign = "left", width} = _a, props = __rest(_a, ["element", "textAlign", "width"]);
  return /* @__PURE__ */ createElement7(Box7, __assign(__assign({}, safelySpreadBoxProps7(props)), {
    ref,
    as: "th",
    element,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    fontWeight: "fontWeightSemibold",
    paddingBottom: "space40",
    paddingLeft: "space50",
    paddingRight: "space50",
    paddingTop: "space40",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    width,
    wordWrap: "break-word"
  }));
});
Th.displayName = "Th";
if (false) {
  Th.propTypes = ThPropTypes;
}
export {
  TBody,
  TBodyPropTypes,
  TFoot,
  TFootPropTypes,
  THead,
  THeadPropTypes,
  Table,
  TablePropTypes,
  Td,
  TdPropTypes,
  Th,
  ThPropTypes,
  Tr,
  TrPropTypes
};
