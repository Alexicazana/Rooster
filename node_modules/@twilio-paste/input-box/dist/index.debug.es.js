var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/InputBox.tsx
import {
  createElement as createElement6,
  forwardRef as forwardRef6
} from "react";
import {
  bool as bool2,
  node as node4,
  oneOf as oneOf4,
  string as string4
} from "prop-types";

// src/FauxInput/index.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3
} from "react";

// src/FauxInput/DefaultFauxInput.tsx
import {
  createElement,
  forwardRef
} from "react";
import {Box} from "@twilio-paste/box";

// src/types.ts
import {
  bool,
  node,
  oneOf,
  string
} from "prop-types";
var FauxInputPropTypes = {
  children: node.isRequired,
  disabled: bool,
  element: string.isRequired,
  hasError: bool,
  readOnly: bool,
  type: oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: oneOf(["default", "inverse"])
};

// src/FauxInput/DefaultFauxInput.tsx
var DefaultFauxInput = forwardRef(({disabled, element, hasError, readOnly, children, type, variant}, ref) => {
  let backgroundColor = "colorBackgroundBody";
  let boxShadow = "shadowBorder";
  let boxShadowHover = "shadowBorderPrimaryStrong";
  let boxShadowActive = "shadowBorderPrimaryStronger";
  if (disabled && type !== "hidden") {
    boxShadow = "shadowBorderWeak";
    boxShadowHover = "shadowBorderWeak";
    backgroundColor = "colorBackground";
    boxShadowActive = "shadowBorderWeak";
  } else if (readOnly && type !== "hidden") {
    boxShadowHover = "shadowBorder";
    backgroundColor = "colorBackground";
  } else if (hasError && type !== "hidden") {
    boxShadow = "shadowBorderError";
    boxShadowHover = "shadowBorderErrorStrong";
  } else if (type === "hidden") {
    boxShadow = null;
    boxShadowHover = null;
    backgroundColor = null;
    boxShadowActive = null;
  }
  return /* @__PURE__ */ createElement(Box, {
    element,
    ref,
    display: "flex",
    width: "100%",
    backgroundColor,
    boxShadow,
    borderRadius: "borderRadius20",
    transition: "box-shadow 100ms ease-in",
    cursor: disabled ? "not-allowed" : "text",
    variant,
    _hover: {
      boxShadow: boxShadowHover
    },
    _focusWithin: {
      boxShadow: "shadowFocus"
    },
    _active: {
      boxShadow: boxShadowActive
    }
  }, children);
});
DefaultFauxInput.displayName = "DefaultFauxInput";
DefaultFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/InverseFauxInput.tsx
import {
  createElement as createElement2,
  forwardRef as forwardRef2
} from "react";
import {Box as Box2} from "@twilio-paste/box";
var InverseFauxInput = forwardRef2(({disabled, element, hasError, readOnly, children, type, variant}, ref) => {
  let backgroundColor = "colorBackgroundInverse";
  let boxShadow = "shadowBorderInverse";
  let boxShadowHover = "shadowBorderInverseStrongest";
  if (disabled && type !== "hidden") {
    backgroundColor = "colorBackgroundInverseStrong";
    boxShadow = "shadowBorderInverseWeaker";
    boxShadowHover = "shadowBorderInverseWeaker";
  } else if (readOnly && type !== "hidden") {
    backgroundColor = "colorBackgroundInverseStrong";
    boxShadowHover = "shadowBorderInverse";
  } else if (hasError && type !== "hidden") {
    boxShadow = "shadowBorderErrorWeak";
  } else if (type === "hidden") {
    backgroundColor = null;
    boxShadow = null;
    boxShadowHover = null;
  }
  return /* @__PURE__ */ createElement2(Box2, {
    element,
    ref,
    display: "flex",
    width: "100%",
    backgroundColor,
    boxShadow,
    borderRadius: "borderRadius20",
    color: "colorTextInverse",
    transition: "box-shadow 100ms ease-in",
    cursor: disabled ? "not-allowed" : "text",
    variant,
    _hover: {
      boxShadow: boxShadowHover
    },
    _focusWithin: {
      backgroundColor: "colorBackgroundInverse",
      boxShadow: "shadowFocusInverse"
    },
    _active: {
      boxShadow: boxShadowHover
    }
  }, children);
});
InverseFauxInput.displayName = "InverseFauxInput";
InverseFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/index.tsx
var FauxInputVariants = {
  default: DefaultFauxInput,
  inverse: InverseFauxInput
};
var FieldWrapper = forwardRef3(({children, disabled, element, hasError, readOnly, type, variant = "default"}, ref) => {
  const FieldWrapperComponent = FauxInputVariants[variant];
  return /* @__PURE__ */ createElement3(FieldWrapperComponent, {
    disabled,
    element,
    hasError,
    readOnly,
    type,
    variant,
    ref
  }, children);
});
FieldWrapper.displayName = "FieldWrapper";
FieldWrapper.propTypes = FauxInputPropTypes;

// src/Prefix.tsx
import {
  createElement as createElement4,
  forwardRef as forwardRef4
} from "react";
import {
  node as node2,
  oneOf as oneOf2,
  string as string2
} from "prop-types";
import {Box as Box3} from "@twilio-paste/box";
var Prefix = forwardRef4(({children, disabled, element = "PREFIX", variant}, ref) => {
  let backgroundColor = "colorBackground";
  let borderColor = "colorBorderWeaker";
  if (disabled && variant === "inverse") {
    backgroundColor = "none";
    borderColor = "colorBorderInverseWeaker";
  } else if (variant === "inverse") {
    backgroundColor = "colorBackgroundInverseStrong";
    borderColor = "colorBorderInverse";
  }
  if (children == null)
    return null;
  return /* @__PURE__ */ createElement4(Box3, {
    alignItems: "flex-start",
    backgroundColor,
    borderBottomLeftRadius: "borderRadius20",
    borderRightColor: borderColor,
    borderRightStyle: "solid",
    borderRightWidth: "borderWidth10",
    borderTopLeftRadius: "borderRadius20",
    display: "flex",
    element: `${element}_PREFIX`,
    lineHeight: "lineHeight20",
    padding: "space30",
    variant,
    ref
  }, children);
});
Prefix.displayName = "Prefix";
Prefix.propTypes = {
  children: node2.isRequired,
  element: string2.isRequired,
  variant: oneOf2(["default", "inverse"])
};

// src/Suffix.tsx
import {
  createElement as createElement5,
  forwardRef as forwardRef5
} from "react";
import {
  node as node3,
  oneOf as oneOf3,
  string as string3
} from "prop-types";
import {Box as Box4} from "@twilio-paste/box";
var Suffix = forwardRef5(({children, disabled, element = "SUFFIX", variant}, ref) => {
  let backgroundColor = "colorBackground";
  let borderColor = "colorBorderWeaker";
  if (disabled && variant === "inverse") {
    backgroundColor = "none";
    borderColor = "colorBorderInverseWeaker";
  } else if (variant === "inverse") {
    backgroundColor = "colorBackgroundInverseStrong";
    borderColor = "colorBorderInverse";
  }
  if (children == null)
    return null;
  return /* @__PURE__ */ createElement5(Box4, {
    alignItems: "flex-start",
    backgroundColor,
    borderBottomRightRadius: "borderRadius20",
    borderLeftColor: borderColor,
    borderLeftStyle: "solid",
    borderLeftWidth: "borderWidth10",
    borderTopRightRadius: "borderRadius20",
    display: "flex",
    element: `${element}_SUFFIX`,
    lineHeight: "lineHeight20",
    padding: "space30",
    variant,
    ref
  }, children);
});
Suffix.displayName = "Suffix";
Suffix.propTypes = {
  children: node3.isRequired,
  element: string3.isRequired,
  variant: oneOf3(["default", "inverse"])
};

// src/InputBox.tsx
var InputBox = forwardRef6((_a, ref) => {
  var {children, disabled, element = "INPUT_BOX", hasError, insertAfter, insertBefore, readOnly, type, variant} = _a, props = __rest(_a, ["children", "disabled", "element", "hasError", "insertAfter", "insertBefore", "readOnly", "type", "variant"]);
  return /* @__PURE__ */ createElement6(FieldWrapper, __assign({
    disabled,
    element,
    hasError,
    readOnly,
    type,
    variant,
    ref
  }, props), insertBefore && /* @__PURE__ */ createElement6(Prefix, {
    disabled,
    element,
    variant
  }, insertBefore), children, insertAfter && /* @__PURE__ */ createElement6(Suffix, {
    disabled,
    element,
    variant
  }, insertAfter));
});
InputBox.displayName = "InputBox";
InputBox.propTypes = {
  children: node4.isRequired,
  element: string4.isRequired,
  disabled: bool2,
  hasError: bool2,
  insertAfter: node4,
  insertBefore: node4,
  readOnly: bool2,
  type: oneOf4(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: oneOf4(["default", "inverse"])
};

// src/InputChevronWrapper.tsx
import {
  createElement as createElement7,
  forwardRef as forwardRef7
} from "react";
import {
  node as node5,
  string as string5
} from "prop-types";
import {Box as Box5} from "@twilio-paste/box";
var InputChevronWrapper = forwardRef7(({children, element = "CHEVRON_WRAPPER"}, ref) => /* @__PURE__ */ createElement7(Box5, {
  alignItems: "center",
  display: "inline-flex",
  position: "absolute",
  pointerEvents: "none",
  right: "space30",
  top: "50%",
  transform: "translateY(-50%)",
  zIndex: "zIndex10",
  element,
  ref
}, children));
InputChevronWrapper.displayName = "InputChevronWrapper";
InputChevronWrapper.propTypes = {
  children: node5.isRequired,
  element: string5.isRequired
};
export {
  InputBox,
  InputChevronWrapper,
  Prefix,
  Suffix
};
