var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  AnimatedToast: () => AnimatedToast,
  Toast: () => Toast,
  ToastContainer: () => ToastContainer,
  Toaster: () => Toaster,
  useToaster: () => useToaster
});

// src/Toast.tsx
var React5 = __toModule(require("react"));
var import_button = __toModule(require("@twilio-paste/button"));
var import_CloseIcon = __toModule(require("@twilio-paste/icons/cjs/CloseIcon"));
var import_ErrorIcon = __toModule(require("@twilio-paste/icons/cjs/ErrorIcon"));
var import_NeutralIcon = __toModule(require("@twilio-paste/icons/cjs/NeutralIcon"));
var import_SuccessIcon = __toModule(require("@twilio-paste/icons/cjs/SuccessIcon"));
var import_WarningIcon = __toModule(require("@twilio-paste/icons/cjs/WarningIcon"));
var import_media_object = __toModule(require("@twilio-paste/media-object"));

// src/ErrorToast.tsx
var React = __toModule(require("react"));
var import_box = __toModule(require("@twilio-paste/box"));

// src/propTypes.ts
var PropTypes = __toModule(require("prop-types"));

// src/constants.ts
var ToastVariantObject = {
  ERROR: "error",
  NEUTRAL: "neutral",
  SUCCESS: "success",
  WARNING: "warning"
};

// src/propTypes.ts
var ToastPropTypes = {
  children: PropTypes.node.isRequired,
  onDismiss: PropTypes.func,
  variant: PropTypes.oneOf(["error", "neutral", "success", "warning"])
};
var ToastPortalPropTypes = {
  children: PropTypes.node.isRequired,
  __console_patch: PropTypes.bool
};
var ToastContainerPropTypes = {
  children: PropTypes.node.isRequired,
  __console_patch: PropTypes.bool
};
var ToasterPropTypes = {
  toasts: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    message: PropTypes.node.isRequired,
    setFocus: PropTypes.bool,
    variant: PropTypes.oneOf(Object.values(ToastVariantObject)).isRequired
  })).isRequired,
  pop: PropTypes.func.isRequired,
  __console_patch: PropTypes.bool
};

// src/ErrorToast.tsx
var ErrorToast = React.forwardRef((_a, ref) => {
  var {element = "TOAST", variant} = _a, props = __rest(_a, ["element", "variant"]);
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    ref,
    backgroundColor: "colorBackgroundBody",
    borderColor: "colorBorderWeaker",
    borderRadius: "borderRadius20",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    borderLeftWidth: "borderWidth30",
    borderLeftColor: "colorBorderErrorWeak",
    boxShadow: "shadowHigh",
    element,
    padding: "space60",
    variant,
    width: "size40"
  }), props.children);
});
ErrorToast.displayName = "ErrorToast";
ErrorToast.propTypes = ToastPropTypes;

// src/NeutralToast.tsx
var React2 = __toModule(require("react"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var NeutralToast = React2.forwardRef((_a, ref) => {
  var {element = "TOAST", variant} = _a, props = __rest(_a, ["element", "variant"]);
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    ref,
    backgroundColor: "colorBackgroundBody",
    borderColor: "colorBorderWeaker",
    borderRadius: "borderRadius20",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    borderLeftWidth: "borderWidth30",
    borderLeftColor: "colorBorderNeutral",
    boxShadow: "shadowHigh",
    element,
    padding: "space60",
    variant,
    width: "size40"
  }), props.children);
});
NeutralToast.displayName = "NeutralToast";
NeutralToast.propTypes = ToastPropTypes;

// src/SuccessToast.tsx
var React3 = __toModule(require("react"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var SuccessToast = React3.forwardRef((_a, ref) => {
  var {element = "TOAST", variant} = _a, props = __rest(_a, ["element", "variant"]);
  return /* @__PURE__ */ React3.createElement(import_box3.Box, __assign(__assign({}, import_box3.safelySpreadBoxProps(props)), {
    ref,
    backgroundColor: "colorBackgroundBody",
    borderColor: "colorBorderWeaker",
    borderRadius: "borderRadius20",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    borderLeftWidth: "borderWidth30",
    borderLeftColor: "colorBorderSuccessWeak",
    boxShadow: "shadowHigh",
    element,
    padding: "space60",
    variant,
    width: "size40"
  }), props.children);
});
SuccessToast.displayName = "SuccessToast";
SuccessToast.propTypes = ToastPropTypes;

// src/WarningToast.tsx
var React4 = __toModule(require("react"));
var import_box4 = __toModule(require("@twilio-paste/box"));
var WarningToast = React4.forwardRef((_a, ref) => {
  var {element = "TOAST", variant} = _a, props = __rest(_a, ["element", "variant"]);
  return /* @__PURE__ */ React4.createElement(import_box4.Box, __assign(__assign({}, import_box4.safelySpreadBoxProps(props)), {
    ref,
    backgroundColor: "colorBackgroundBody",
    borderColor: "colorBorderWeaker",
    borderRadius: "borderRadius20",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    borderLeftWidth: "borderWidth30",
    borderLeftColor: "colorBorderWarningWeak",
    boxShadow: "shadowHigh",
    element,
    padding: "space60",
    variant,
    width: "size40"
  }), props.children);
});
WarningToast.displayName = "WarningToast";
WarningToast.propTypes = ToastPropTypes;

// src/Toast.tsx
var ToastComponentVariants = {
  error: ErrorToast,
  neutral: NeutralToast,
  success: SuccessToast,
  warning: WarningToast
};
var renderToastIcon = (variant, element) => {
  switch (variant) {
    case ToastVariantObject.ERROR:
      return /* @__PURE__ */ React5.createElement(import_ErrorIcon.ErrorIcon, {
        color: "colorTextIconError",
        decorative: false,
        element: `${element}_ICON`,
        title: "error: ",
        size: "sizeIcon20"
      });
    case ToastVariantObject.SUCCESS:
      return /* @__PURE__ */ React5.createElement(import_SuccessIcon.SuccessIcon, {
        color: "colorTextIconSuccess",
        decorative: false,
        element: `${element}_ICON`,
        title: "success: ",
        size: "sizeIcon20"
      });
    case ToastVariantObject.WARNING:
      return /* @__PURE__ */ React5.createElement(import_WarningIcon.WarningIcon, {
        color: "colorTextIconWarning",
        decorative: false,
        element: `${element}_ICON`,
        title: "warning: ",
        size: "sizeIcon20"
      });
    case ToastVariantObject.NEUTRAL:
    default:
      return /* @__PURE__ */ React5.createElement(import_NeutralIcon.NeutralIcon, {
        color: "colorTextIconNeutral",
        decorative: false,
        element: `${element}_ICON`,
        title: "information: ",
        size: "sizeIcon20"
      });
  }
};
var Toast = React5.forwardRef((_a, ref) => {
  var {children, onDismiss, variant = "neutral", element = "TOAST", setFocus} = _a, props = __rest(_a, ["children", "onDismiss", "variant", "element", "setFocus"]);
  const ToastComponent = ToastComponentVariants[variant];
  const buttonRef = React5.useRef(null);
  React5.useEffect(() => {
    if (setFocus && buttonRef.current) {
      buttonRef.current.focus({preventScroll: true});
    }
  }, [setFocus]);
  return /* @__PURE__ */ React5.createElement(ToastComponent, __assign({
    role: "status",
    variant,
    element,
    ref
  }, props), /* @__PURE__ */ React5.createElement(import_media_object.MediaObject, {
    as: "div"
  }, /* @__PURE__ */ React5.createElement(import_media_object.MediaFigure, {
    as: "div",
    spacing: "space60"
  }, renderToastIcon(variant, element)), /* @__PURE__ */ React5.createElement(import_media_object.MediaBody, {
    as: "div"
  }, children), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React5.createElement(import_media_object.MediaFigure, {
    align: "end",
    spacing: "space40"
  }, /* @__PURE__ */ React5.createElement(import_button.Button, {
    onClick: onDismiss,
    variant: "secondary_icon",
    ref: buttonRef,
    size: "reset",
    element: `${element}_CLOSE_BUTTON`
  }, /* @__PURE__ */ React5.createElement(import_CloseIcon.CloseIcon, {
    color: "colorTextIcon",
    decorative: false,
    title: "Dismiss toast",
    size: "sizeIcon20",
    element: `${element}_CLOSE_ICON`
  })))));
});
Toast.displayName = "Toast";
Toast.propTypes = ToastPropTypes;

// src/ToastContainer.tsx
var React7 = __toModule(require("react"));
var import_stack = __toModule(require("@twilio-paste/stack"));

// src/ToastPortal.tsx
var React6 = __toModule(require("react"));
var import_theme = __toModule(require("@twilio-paste/theme"));
var import_reakit_library = __toModule(require("@twilio-paste/reakit-library"));
var import_box5 = __toModule(require("@twilio-paste/box"));
var ToastPortal = React6.forwardRef((_a, ref) => {
  var {children, __console_patch} = _a, props = __rest(_a, ["children", "__console_patch"]);
  return /* @__PURE__ */ React6.createElement(import_reakit_library.Portal, null, /* @__PURE__ */ React6.createElement(import_theme.StyledBase, null, /* @__PURE__ */ React6.createElement(import_box5.Box, __assign(__assign({}, import_box5.safelySpreadBoxProps(props)), {
    position: "fixed",
    right: "space40",
    top: "space90",
    zIndex: "zIndex90",
    ref,
    style: __console_patch ? {zIndex: 1999} : void 0
  }), children)));
});
ToastPortal.displayName = "ToastPortal";
if (false) {
  ToastPortal.propTypes = ToastPortalPropTypes;
}

// src/ToastContainer.tsx
var ToastContainer = React7.forwardRef((_a, ref) => {
  var {children} = _a, props = __rest(_a, ["children"]);
  return /* @__PURE__ */ React7.createElement(ToastPortal, __assign({}, props), /* @__PURE__ */ React7.createElement(import_stack.Stack, {
    orientation: "vertical",
    spacing: "space40",
    ref
  }, children));
});
ToastContainer.displayName = "ToastContainer";
ToastContainer.propTypes = ToastContainerPropTypes;

// src/Toaster.tsx
var React8 = __toModule(require("react"));
var import_animation_library = __toModule(require("@twilio-paste/animation-library"));
var import_theme2 = __toModule(require("@twilio-paste/theme"));
var import_box6 = __toModule(require("@twilio-paste/box"));
var AnimatedToast = import_animation_library.animated(import_box6.Box);
var Toaster = (_a) => {
  var {toasts, pop} = _a, props = __rest(_a, ["toasts", "pop"]);
  const prefersReducedMotion = import_animation_library.useReducedMotion();
  const [refMap] = React8.useState(() => new WeakMap());
  const [returnTarget, setReturnTarget] = React8.useState({trigger: null});
  const theme = import_theme2.useTheme();
  const transitions = import_animation_library.useTransition(toasts, {
    from: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(100%) scale(1)",
      height: prefersReducedMotion ? "auto" : 0
    },
    enter: prefersReducedMotion ? {marginBottom: theme.space.space40, opacity: 1, transform: "translateX(0px) scale(1)"} : (item) => async (next) => {
      await next({
        marginBottom: theme.space.space40,
        opacity: 1,
        transform: "translateX(0px) scale(1)",
        height: refMap.get(item).offsetHeight
      });
    },
    leave: {
      marginBottom: "0rem",
      opacity: 0,
      transform: "translateX(0px) scale(0.8)",
      height: prefersReducedMotion ? "auto" : 0
    },
    config: {
      mass: 1,
      tension: 150,
      friction: 20
    }
  });
  const clearReturnTarget = React8.useCallback(() => {
    setReturnTarget({trigger: null});
  }, [returnTarget]);
  React8.useEffect(() => {
    if (returnTarget.trigger != null && toasts.length === 0) {
      returnTarget.trigger.focus();
      clearReturnTarget();
    }
  }, [toasts]);
  return /* @__PURE__ */ React8.createElement(ToastPortal, __assign({}, props), transitions((styles, item, state, index) => {
    return /* @__PURE__ */ React8.createElement(AnimatedToast, {
      as: "div",
      key: state.key,
      style: styles
    }, /* @__PURE__ */ React8.createElement(Toast, __assign(__assign({
      key: item.id
    }, item), {
      onDismiss: () => {
        if (item.onDismiss != null) {
          item.onDismiss();
        }
        pop(item.id);
      },
      ref: (ref) => {
        if (ref != null) {
          refMap.set(item, ref);
        }
      },
      setFocus: index === 0,
      onFocus: (e) => {
        if (e.relatedTarget && !returnTarget.trigger) {
          setReturnTarget({trigger: e.relatedTarget});
        }
      }
    }), item.message));
  }));
};
Toaster.displayName = "Toaster";
if (false) {
  Toaster.propTypes = ToasterPropTypes;
}

// src/useToaster.ts
var React9 = __toModule(require("react"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var useToaster = () => {
  const isMounted = React9.useRef(null);
  const [toasts, setToasts] = React9.useState([]);
  React9.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
      toasts.forEach((toast) => {
        if (toast.timeOutId) {
          window.clearTimeout(toast.timeOutId);
        }
      });
    };
  }, []);
  const pop = (id) => {
    if (!isMounted.current) {
      return;
    }
    setToasts((currentToasts) => currentToasts.filter((toast) => {
      if (toast.id === id) {
        if (toast.timeOutId) {
          window.clearTimeout(toast.timeOutId);
        }
        if (toast.onDismiss) {
          toast.onDismiss();
        }
      }
      return toast.id !== id;
    }));
  };
  const push = (newToast) => {
    if (!isMounted.current) {
      return;
    }
    const generatedID = import_uid_library.uid(newToast);
    let timeOutId;
    if (newToast.dismissAfter != null && Number.isInteger(newToast.dismissAfter)) {
      timeOutId = window.setTimeout(pop, newToast.dismissAfter, newToast.id || generatedID);
    }
    const existingToasts = toasts.map((toast) => {
      const tmpToast = toast;
      tmpToast.setFocus = false;
      return tmpToast;
    });
    setToasts([__assign({id: generatedID, timeOutId, setFocus: true}, newToast), ...existingToasts]);
  };
  return {toasts, push, pop};
};
