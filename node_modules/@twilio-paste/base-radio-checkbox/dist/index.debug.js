var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  BaseRadioCheckboxControl: () => BaseRadioCheckboxControl,
  BaseRadioCheckboxHelpText: () => BaseRadioCheckboxHelpText,
  BaseRadioCheckboxLabel: () => BaseRadioCheckboxLabel,
  BaseRadioCheckboxLabelText: () => BaseRadioCheckboxLabelText
});

// src/BaseRadioCheckbox.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_text = __toModule(require("@twilio-paste/text"));
var import_sibling_box = __toModule(require("@twilio-paste/sibling-box"));
var import_label = __toModule(require("@twilio-paste/label"));
var import_help_text = __toModule(require("@twilio-paste/help-text"));
var BaseRadioCheckboxControl = React.forwardRef((_a, ref) => {
  var {children, disabled, element = "BASE_RADIO_CHECKBOX_CONTROL"} = _a, props = __rest(_a, ["children", "disabled", "element"]);
  return /* @__PURE__ */ React.createElement(import_sibling_box.SiblingBox, __assign({
    as: "span",
    ref,
    display: "flex",
    element,
    backgroundColor: "colorBackgroundBody",
    borderColor: "colorBorder",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    height: "sizeSquare50",
    marginX: "space20",
    marginY: "space10",
    width: "sizeSquare50",
    _hoverSibling: {
      borderColor: "colorBorderPrimaryStrong"
    },
    _focusSibling: {
      borderColor: "colorBorderPrimaryStrong",
      boxShadow: "shadowFocus"
    },
    _activeSibling: !disabled ? {
      borderColor: "colorBorderPrimaryStronger",
      backgroundColor: "colorBackgroundPrimaryStronger"
    } : void 0,
    _checkedSibling: {
      borderColor: "colorBorderPrimary",
      backgroundColor: "colorBackgroundPrimary"
    },
    _disabledSibling: {
      borderColor: "colorBorderWeaker"
    },
    _invalidSibling: {
      borderColor: "colorBorderError"
    },
    _invalidAndHoverSibling: {
      borderColor: "colorBorderErrorStrong"
    },
    _checkedAndHoverSibling: {
      borderColor: "colorBorderPrimaryStronger",
      backgroundColor: "colorBackgroundPrimaryStrong"
    },
    _checkedAndFocusSibling: {
      borderColor: "colorBorderPrimaryStronger",
      backgroundColor: "colorBackgroundPrimaryStrong"
    },
    _checkedAndActiveSibling: !disabled ? {
      borderColor: "colorBorderPrimaryStronger",
      backgroundColor: "colorBackgroundPrimaryStronger"
    } : void 0,
    _checkedAndDisabledSibling: {
      borderColor: "colorBorderWeaker",
      backgroundColor: "colorBackgroundStrong"
    },
    _checkedAndInvalidSibling: {
      borderColor: "colorBorderError",
      backgroundColor: "colorBackgroundError"
    },
    _checkedAndInvalidAndHoverSibling: {
      borderColor: "colorBorderErrorStrong",
      backgroundColor: "colorBackgroundErrorStrong"
    }
  }, props), children);
});
BaseRadioCheckboxControl.displayName = "BaseRadioCheckboxControl";
BaseRadioCheckboxControl.propTypes = {
  children: PropTypes.node.isRequired,
  disabled: PropTypes.bool
};
var BaseRadioCheckboxLabel = React.forwardRef((_a, ref) => {
  var {children} = _a, props = __rest(_a, ["children"]);
  return /* @__PURE__ */ React.createElement(import_label.Label, __assign(__assign({}, props), {
    marginBottom: "space0",
    ref
  }), /* @__PURE__ */ React.createElement(import_box.Box, {
    as: "span",
    display: "flex"
  }, children));
});
BaseRadioCheckboxLabel.displayName = "BaseRadioCheckboxLabel";
BaseRadioCheckboxLabel.propTypes = {
  children: PropTypes.node.isRequired
};
var BaseRadioCheckboxLabelText = React.forwardRef((_a, ref) => {
  var {children, element = "BASE_RADIO_CHECKBOX_LABEL_TEXT"} = _a, props = __rest(_a, ["children", "element"]);
  return /* @__PURE__ */ React.createElement(import_text.Text, __assign({
    as: "span",
    color: "currentColor",
    marginLeft: "space20",
    fontWeight: "fontWeightMedium",
    element,
    ref
  }, props), children);
});
BaseRadioCheckboxLabelText.displayName = "BaseRadioCheckboxLabelText";
BaseRadioCheckboxLabelText.propTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
var BaseRadioCheckboxHelpText = React.forwardRef(({children, helpTextId, element = "BASE_RADIO_CHECKBOX_HELP_TEXT_WRAPPER"}, ref) => {
  return /* @__PURE__ */ React.createElement(import_box.Box, {
    as: "span",
    display: "block",
    element,
    marginLeft: "space80",
    ref
  }, /* @__PURE__ */ React.createElement(import_help_text.HelpText, {
    id: helpTextId,
    marginTop: "space0"
  }, children));
});
BaseRadioCheckboxHelpText.displayName = "BaseRadioCheckboxHelpText";
BaseRadioCheckboxHelpText.propTypes = {
  children: PropTypes.node.isRequired,
  helpTextId: PropTypes.string.isRequired,
  element: PropTypes.string
};
