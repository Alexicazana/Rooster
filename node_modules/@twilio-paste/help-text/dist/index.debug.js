var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  HelpText: () => HelpText,
  HelpTextVariants: () => HelpTextVariants
});

// src/HelpText.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_ErrorIcon = __toModule(require("@twilio-paste/icons/cjs/ErrorIcon"));
var HelpTextVariants = {
  DEFAULT: "default",
  ERROR: "error",
  ERROR_INVERSE: "error_inverse",
  INVERSE: "inverse"
};
var VariantOptions = {
  [HelpTextVariants.DEFAULT]: {
    textColor: "colorTextWeak",
    icon: null
  },
  [HelpTextVariants.INVERSE]: {
    textColor: "colorTextInverseWeak",
    icon: null
  },
  [HelpTextVariants.ERROR]: {
    textColor: "colorTextError",
    icon: /* @__PURE__ */ React.createElement(import_box.Box, {
      flexShrink: 0
    }, /* @__PURE__ */ React.createElement(import_ErrorIcon.ErrorIcon, {
      color: "colorTextError",
      decorative: true,
      size: "sizeIcon20"
    }))
  },
  [HelpTextVariants.ERROR_INVERSE]: {
    textColor: "colorTextErrorWeak",
    icon: /* @__PURE__ */ React.createElement(import_box.Box, {
      flexShrink: 0
    }, /* @__PURE__ */ React.createElement(import_ErrorIcon.ErrorIcon, {
      color: "colorTextErrorWeak",
      decorative: true,
      size: "sizeIcon20"
    }))
  }
};
var HelpText = React.forwardRef((_a, ref) => {
  var {marginTop, children, variant = "default", element = "HELP_TEXT"} = _a, props = __rest(_a, ["marginTop", "children", "variant", "element"]);
  const {textColor, icon} = VariantOptions[variant];
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    display: "flex",
    columnGap: "space20",
    marginTop: marginTop || "space30",
    ref,
    element,
    variant,
    as: "div",
    color: textColor,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30"
  }), icon, /* @__PURE__ */ React.createElement("span", null, children));
});
HelpText.displayName = "HelpText";
if (false) {
  HelpText.propTypes = {
    marginTop: PropTypes.oneOf(["space0"]),
    element: PropTypes.string
  };
}
