var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/HelpText.tsx
import {
  createElement,
  forwardRef
} from "react";
import {
  oneOf,
  string
} from "prop-types";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";
import {ErrorIcon} from "@twilio-paste/icons/esm/ErrorIcon";
var HelpTextVariants = {
  DEFAULT: "default",
  ERROR: "error",
  ERROR_INVERSE: "error_inverse",
  INVERSE: "inverse"
};
var VariantOptions = {
  [HelpTextVariants.DEFAULT]: {
    textColor: "colorTextWeak",
    icon: null
  },
  [HelpTextVariants.INVERSE]: {
    textColor: "colorTextInverseWeak",
    icon: null
  },
  [HelpTextVariants.ERROR]: {
    textColor: "colorTextError",
    icon: /* @__PURE__ */ createElement(Box, {
      flexShrink: 0
    }, /* @__PURE__ */ createElement(ErrorIcon, {
      color: "colorTextError",
      decorative: true,
      size: "sizeIcon20"
    }))
  },
  [HelpTextVariants.ERROR_INVERSE]: {
    textColor: "colorTextErrorWeak",
    icon: /* @__PURE__ */ createElement(Box, {
      flexShrink: 0
    }, /* @__PURE__ */ createElement(ErrorIcon, {
      color: "colorTextErrorWeak",
      decorative: true,
      size: "sizeIcon20"
    }))
  }
};
var HelpText = forwardRef((_a, ref) => {
  var {marginTop, children, variant = "default", element = "HELP_TEXT"} = _a, props = __rest(_a, ["marginTop", "children", "variant", "element"]);
  const {textColor, icon} = VariantOptions[variant];
  return /* @__PURE__ */ createElement(Box, __assign(__assign({}, safelySpreadBoxProps(props)), {
    display: "flex",
    columnGap: "space20",
    marginTop: marginTop || "space30",
    ref,
    element,
    variant,
    as: "div",
    color: textColor,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30"
  }), icon, /* @__PURE__ */ createElement("span", null, children));
});
HelpText.displayName = "HelpText";
if (false) {
  HelpText.propTypes = {
    marginTop: oneOf(["space0"]),
    element: string
  };
}
export {
  HelpText,
  HelpTextVariants
};
