var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Option: () => Option,
  OptionGroup: () => OptionGroup,
  Select: () => Select,
  SelectElement: () => SelectElement
});

// src/Option.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var Option = React.forwardRef((_a, ref) => {
  var {children, element = "OPTION"} = _a, props = __rest(_a, ["children", "element"]);
  if (props.selected) {
    console.warn('"selected" is a blocked prop on this component, please use "value" on the select element.');
  }
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({
    as: "option",
    ref
  }, import_box.safelySpreadBoxProps(props)), {
    element,
    size: void 0,
    height: void 0,
    width: void 0,
    background: "none",
    color: "inherit",
    fontFamily: "fontFamilyText",
    lineHeight: "lineHeight50",
    paddingTop: "space30",
    paddingBottom: "space30",
    paddingLeft: "space20"
  }), children);
});
Option.displayName = "Option";
if (false) {
  Option.propTypes = {
    value: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    element: PropTypes.string
  };
}

// src/OptionGroup.tsx
var React2 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var OptionGroup = React2.forwardRef((_a, ref) => {
  var {label, children, element = "OPTION_GROUP"} = _a, props = __rest(_a, ["label", "children", "element"]);
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __assign(__assign({
    ref,
    label
  }, import_box2.safelySpreadBoxProps(props)), {
    element,
    as: "optgroup",
    background: "none",
    color: "inherit",
    fontFamily: "fontFamilyText",
    fontWeight: "fontWeightMedium",
    fontStyle: "normal",
    margin: "space20"
  }), children);
});
OptionGroup.displayName = "OptionGroup";
if (false) {
  OptionGroup.propTypes = {
    label: PropTypes2.string.isRequired,
    children: PropTypes2.node.isRequired,
    element: PropTypes2.string
  };
}

// src/Select.tsx
var React3 = __toModule(require("react"));
var PropTypes3 = __toModule(require("prop-types"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var import_ChevronDownIcon = __toModule(require("@twilio-paste/icons/cjs/ChevronDownIcon"));
var import_input_box = __toModule(require("@twilio-paste/input-box"));
var SelectElement = React3.forwardRef((_a, ref) => {
  var {element = "SELECT_ELEMENT", variant, size} = _a, props = __rest(_a, ["element", "variant", "size"]);
  return /* @__PURE__ */ React3.createElement(import_box3.Box, __assign(__assign({}, import_box3.safelySpreadBoxProps(props)), {
    element,
    as: "select",
    ref,
    size,
    height: void 0,
    appearance: "none",
    background: "none",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    cursor: "pointer",
    display: "block",
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    margin: "space0",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space100",
    paddingTop: "space30",
    resize: "none",
    width: "100%",
    _disabled: {
      color: variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
      cursor: "not-allowed"
    },
    variant
  }));
});
SelectElement.displayName = "SelectElement";
var Select = React3.forwardRef((_a, ref) => {
  var {disabled, element = "SELECT", hasError, insertBefore, insertAfter, children, size, multiple, variant} = _a, props = __rest(_a, ["disabled", "element", "hasError", "insertBefore", "insertAfter", "children", "size", "multiple", "variant"]);
  let iconColor = "colorTextIcon";
  if (disabled) {
    iconColor = "colorTextWeaker";
  } else if (variant === "inverse") {
    iconColor = "colorTextInverseWeak";
  }
  return /* @__PURE__ */ React3.createElement(import_input_box.InputBox, {
    disabled,
    element,
    hasError,
    insertAfter,
    insertBefore,
    variant
  }, /* @__PURE__ */ React3.createElement(import_box3.Box, {
    display: "flex",
    width: "100%",
    position: "relative"
  }, /* @__PURE__ */ React3.createElement(SelectElement, __assign(__assign({
    "aria-invalid": hasError,
    "data-not-selectize": "true",
    disabled,
    ref,
    element: `${element}_ELEMENT`
  }, props), {
    multiple,
    size: multiple ? size : 0,
    variant
  }), children), !multiple && /* @__PURE__ */ React3.createElement(import_input_box.InputChevronWrapper, {
    element: `${element}_CHEVRON_WRAPPER`
  }, /* @__PURE__ */ React3.createElement(import_ChevronDownIcon.ChevronDownIcon, {
    "aria-hidden": "true",
    decorative: true,
    element: `${element}_ICON`,
    color: iconColor,
    size: "sizeIcon30"
  }))));
});
Select.displayName = "Select";
if (false) {
  Select.propTypes = {
    id: PropTypes3.string,
    hasError: PropTypes3.bool,
    onChange: PropTypes3.func,
    element: PropTypes3.string
  };
}
