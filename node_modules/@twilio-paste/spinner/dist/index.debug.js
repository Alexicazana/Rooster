var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Spinner: () => Spinner
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_IconWrapper = __toModule(require("@twilio-paste/icons/cjs/helpers/IconWrapper"));
var import_theme = __toModule(require("@twilio-paste/theme"));
var import_style_props = __toModule(require("@twilio-paste/style-props"));

// src/styled.tsx
var import_styling_library2 = __toModule(require("@twilio-paste/styling-library"));

// src/keyframes.tsx
var import_styling_library = __toModule(require("@twilio-paste/styling-library"));

// src/constants.ts
var circleRadius = 45;
var circleGeometry = {
  cx: 50,
  cy: 50,
  r: circleRadius
};
var circleCircumference = Math.PI * 2 * circleRadius;

// src/keyframes.tsx
var SvgKeyframes = import_styling_library.keyframes`
  0%,
  15% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(0);
  }

  50%,
  75% {
    stroke-dashoffset: ${circleCircumference * 0.2};
    transform: rotate(45deg);
  }

  100% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(360deg);
  }
`;
var CircleKeyframes = import_styling_library.keyframes`
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
`;

// src/styled.tsx
var StyledCircleTrack = import_styling_library2.styled.circle({
  transformOrigin: "center",
  opacity: 0.25
});
var AnimatedStyledCircle = import_styling_library2.styled.circle(({show}) => ({
  transformOrigin: "center",
  animation: `1.5s ease-in-out infinite both ${CircleKeyframes}`,
  strokeDasharray: circleCircumference,
  opacity: show ? 1 : 0
}));
var StyledSvg = import_styling_library2.styled.svg({
  height: "100%",
  width: "100%",
  display: "block",
  animation: `4.25s linear infinite both ${SvgKeyframes}`
});

// src/index.tsx
var Spinner = React.forwardRef(({size, color = "currentColor", title, as, display, decorative, delay = 250, element = "SPINNER"}, ref) => {
  const titleId = `spinner-${import_uid_library.useUID()}`;
  const {
    borderWidths: {borderWidth40}
  } = import_theme.useTheme();
  const [show, setShow] = React.useState(delay === 0);
  React.useEffect(() => {
    if (delay === 0)
      return;
    const showTimer = setTimeout(() => setShow(true), delay);
    return () => clearTimeout(showTimer);
  }, [delay]);
  return /* @__PURE__ */ React.createElement(import_IconWrapper.IconWrapper, {
    as,
    element,
    display,
    size,
    color,
    "aria-hidden": decorative,
    ref
  }, /* @__PURE__ */ React.createElement(StyledSvg, {
    viewBox: "0 0 100 100",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, title ? /* @__PURE__ */ React.createElement("title", {
    id: titleId
  }, title) : null, /* @__PURE__ */ React.createElement("g", {
    strokeWidth: borderWidth40,
    stroke: "currentColor",
    strokeLinecap: "round",
    fill: "transparent"
  }, /* @__PURE__ */ React.createElement(StyledCircleTrack, __assign({}, circleGeometry)), /* @__PURE__ */ React.createElement(AnimatedStyledCircle, __assign({
    show
  }, circleGeometry)))));
});
Spinner.displayName = "Spinner";
Spinner.propTypes = {
  title: PropTypes.string.isRequired,
  delay: PropTypes.number,
  element: PropTypes.string,
  size: import_style_props.isIconSizeTokenProp
};
