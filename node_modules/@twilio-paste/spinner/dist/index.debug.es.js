var __assign = Object.assign;

// src/index.tsx
import {
  createElement,
  forwardRef,
  useEffect,
  useState
} from "react";
import {
  number,
  string
} from "prop-types";
import {useUID} from "@twilio-paste/uid-library";
import {IconWrapper} from "@twilio-paste/icons/esm/helpers/IconWrapper";
import {useTheme} from "@twilio-paste/theme";
import {isIconSizeTokenProp} from "@twilio-paste/style-props";

// src/styled.tsx
import {styled} from "@twilio-paste/styling-library";

// src/keyframes.tsx
import {keyframes} from "@twilio-paste/styling-library";

// src/constants.ts
var circleRadius = 45;
var circleGeometry = {
  cx: 50,
  cy: 50,
  r: circleRadius
};
var circleCircumference = Math.PI * 2 * circleRadius;

// src/keyframes.tsx
var SvgKeyframes = keyframes`
  0%,
  15% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(0);
  }

  50%,
  75% {
    stroke-dashoffset: ${circleCircumference * 0.2};
    transform: rotate(45deg);
  }

  100% {
    stroke-dashoffset: ${circleCircumference * 0.9999};
    transform: rotate(360deg);
  }
`;
var CircleKeyframes = keyframes`
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
`;

// src/styled.tsx
var StyledCircleTrack = styled.circle({
  transformOrigin: "center",
  opacity: 0.25
});
var AnimatedStyledCircle = styled.circle(({show}) => ({
  transformOrigin: "center",
  animation: `1.5s ease-in-out infinite both ${CircleKeyframes}`,
  strokeDasharray: circleCircumference,
  opacity: show ? 1 : 0
}));
var StyledSvg = styled.svg({
  height: "100%",
  width: "100%",
  display: "block",
  animation: `4.25s linear infinite both ${SvgKeyframes}`
});

// src/index.tsx
var Spinner = forwardRef(({size, color = "currentColor", title, as, display, decorative, delay = 250, element = "SPINNER"}, ref) => {
  const titleId = `spinner-${useUID()}`;
  const {
    borderWidths: {borderWidth40}
  } = useTheme();
  const [show, setShow] = useState(delay === 0);
  useEffect(() => {
    if (delay === 0)
      return;
    const showTimer = setTimeout(() => setShow(true), delay);
    return () => clearTimeout(showTimer);
  }, [delay]);
  return /* @__PURE__ */ createElement(IconWrapper, {
    as,
    element,
    display,
    size,
    color,
    "aria-hidden": decorative,
    ref
  }, /* @__PURE__ */ createElement(StyledSvg, {
    viewBox: "0 0 100 100",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, title ? /* @__PURE__ */ createElement("title", {
    id: titleId
  }, title) : null, /* @__PURE__ */ createElement("g", {
    strokeWidth: borderWidth40,
    stroke: "currentColor",
    strokeLinecap: "round",
    fill: "transparent"
  }, /* @__PURE__ */ createElement(StyledCircleTrack, __assign({}, circleGeometry)), /* @__PURE__ */ createElement(AnimatedStyledCircle, __assign({
    show
  }, circleGeometry)))));
});
Spinner.displayName = "Spinner";
Spinner.propTypes = {
  title: string.isRequired,
  delay: number,
  element: string,
  size: isIconSizeTokenProp
};
export {
  Spinner
};
