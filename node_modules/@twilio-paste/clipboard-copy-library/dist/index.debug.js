var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// ../../../node_modules/clipboard-copy/index.js
var require_clipboard_copy = __commonJS((exports2, module2) => {
  module2.exports = clipboardCopy;
  function clipboardCopy(text) {
    if (navigator.clipboard) {
      return navigator.clipboard.writeText(text).catch(function(err) {
        throw err !== void 0 ? err : new DOMException("The request is not allowed", "NotAllowedError");
      });
    }
    var span = document.createElement("span");
    span.textContent = text;
    span.style.whiteSpace = "pre";
    document.body.appendChild(span);
    var selection = window.getSelection();
    var range = window.document.createRange();
    selection.removeAllRanges();
    range.selectNode(span);
    selection.addRange(range);
    var success = false;
    try {
      success = window.document.execCommand("copy");
    } catch (err) {
      console.log("error", err);
    }
    selection.removeAllRanges();
    window.document.body.removeChild(span);
    return success ? Promise.resolve() : Promise.reject(new DOMException("The request is not allowed", "NotAllowedError"));
  }
});

// ../../../node_modules/use-clipboard-copy/dist/useTimedToggle.js
var require_useTimedToggle = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.useTimedToggle = void 0;
  var react_1 = require("react");
  function useTimedToggle(initialValue) {
    var _a = react_1.useState(false), value = _a[0], setValue = _a[1];
    var timeoutRef = react_1.useRef();
    var initialValueRef = react_1.useRef(initialValue);
    var toggleValue = function(timeout) {
      clearTimeout(timeoutRef.current);
      setValue(!initialValueRef.current);
      timeoutRef.current = window.setTimeout(function() {
        return setValue(initialValueRef.current);
      }, timeout);
    };
    react_1.useEffect(function() {
      return function() {
        return clearTimeout(timeoutRef.current);
      };
    }, []);
    return [value, toggleValue];
  }
  exports2.useTimedToggle = useTimedToggle;
});

// ../../../node_modules/use-clipboard-copy/dist/index.js
var require_dist = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.useClipboard = void 0;
  var clipboard_copy_1 = __importDefault(require_clipboard_copy());
  var react_1 = require("react");
  var useTimedToggle_1 = require_useTimedToggle();
  function isInputLike(node) {
    return node && (node.nodeName === "TEXTAREA" || node.nodeName === "INPUT");
  }
  function useClipboard2(options) {
    if (options === void 0) {
      options = {};
    }
    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];
    var targetRef = react_1.useRef(null);
    var optionsRef = react_1.useRef(options);
    optionsRef.current = options;
    function isSupported() {
      return !!navigator.clipboard || typeof document.execCommand === "function" && typeof document.queryCommandSupported === "function" && document.queryCommandSupported("copy");
    }
    var copyHandler = react_1.useCallback(function(text) {
      var opts = optionsRef.current;
      var target = targetRef.current;
      function handleSuccess() {
        if (opts.onSuccess) {
          opts.onSuccess();
        }
        if (opts.copiedTimeout) {
          toggleCopied(opts.copiedTimeout);
        }
        if (opts.selectOnCopy && isInputLike(target)) {
          target.select();
        }
      }
      function handleError() {
        if (opts.onError) {
          opts.onError();
        }
        if (opts.selectOnError !== false && isInputLike(target)) {
          target.select();
        }
      }
      function copy(value) {
        clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);
      }
      if (typeof text === "string") {
        copy(text);
      } else if (target) {
        copy(target.value);
      }
    }, []);
    return {
      copied,
      copy: copyHandler,
      isSupported,
      target: targetRef
    };
  }
  exports2.useClipboard = useClipboard2;
});

// src/index.tsx
__export(exports, {
  useClipboard: () => import_use_clipboard_copy.useClipboard
});
var import_use_clipboard_copy = __toModule(require_dist());
