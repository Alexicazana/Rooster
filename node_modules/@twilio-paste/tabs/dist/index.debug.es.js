var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Tabs.tsx
import {
  createElement,
  forwardRef,
  useMemo
} from "react";
import {
  oneOf,
  string
} from "prop-types";
import {Flex} from "@twilio-paste/flex";
import {Box} from "@twilio-paste/box";
import {useTabPrimitiveState} from "@twilio-paste/tabs-primitive";

// src/TabsContext.tsx
import {
  createContext
} from "react";
var TabsContext = createContext({});

// src/utils.ts
var getElementName = (orientation, fallback, elementName) => elementName != null ? elementName : `${orientation.toUpperCase()}_${fallback}`;

// src/Tabs.tsx
var Tabs = forwardRef((_a, ref) => {
  var {children, element, orientation = "horizontal", state, variant} = _a, initialState = __rest(_a, ["children", "element", "orientation", "state", "variant"]);
  const _a2 = state || useTabPrimitiveState(__assign({orientation}, initialState)), {orientation: tabOrientation = orientation} = _a2, tab = __rest(_a2, ["orientation"]);
  const elementName = getElementName(tabOrientation, "TABS", element);
  const value = useMemo(() => __assign(__assign({}, tab), {orientation: tabOrientation, variant}), [
    ...Object.values(tab),
    tabOrientation,
    variant
  ]);
  const returnValue = /* @__PURE__ */ createElement(TabsContext.Provider, {
    value
  }, children);
  if (tabOrientation === "vertical") {
    return /* @__PURE__ */ createElement(Flex, {
      element: elementName,
      ref,
      wrap: false,
      vAlignContent: "stretch"
    }, returnValue);
  }
  return /* @__PURE__ */ createElement(Box, {
    element: elementName
  }, returnValue);
});
if (false) {
  Tabs.propTypes = {
    element: string,
    selectedId: string,
    orientation: oneOf(["horizontal", "vertical", void 0]),
    variant: oneOf(["fitted", null])
  };
}
Tabs.displayName = "Tabs";

// src/Tab.tsx
import {
  createElement as createElement2,
  forwardRef as forwardRef2,
  useContext,
  useMemo as useMemo2
} from "react";
import {
  bool,
  string as string2
} from "prop-types";
import {Box as Box2, safelySpreadBoxProps} from "@twilio-paste/box";
import {TabPrimitive} from "@twilio-paste/tabs-primitive";
var getTabBoxStyles = (orientation, variant) => {
  switch (orientation) {
    case "vertical":
      return {
        borderLeftColor: "transparent",
        borderLeftStyle: "solid",
        borderLeftWidth: "borderWidth20",
        color: "colorTextWeak",
        display: "block",
        marginBottom: "space40",
        paddingBottom: "space30",
        paddingLeft: "space50",
        paddingRight: "space50",
        paddingTop: "space30",
        _last: {
          marginBottom: "space0"
        },
        _selected: {
          borderLeftColor: "colorBorderPrimary",
          color: "colorTextLink"
        },
        _hover: {
          borderLeftColor: "colorBorderPrimaryStronger",
          color: "colorTextLinkStronger"
        },
        _disabled: {
          borderLeftColor: "transparent",
          color: "colorTextWeaker"
        },
        _focus: {
          borderLeftColor: "colorBorderPrimaryStronger",
          boxShadow: "shadowFocus",
          color: "colorTextLinkStronger",
          outline: "none"
        }
      };
    case "horizontal":
    default:
      return {
        borderBottomColor: "transparent",
        borderBottomStyle: "solid",
        borderBottomWidth: "borderWidth20",
        color: "colorTextWeak",
        display: "inline-block",
        flexBasis: variant === "fitted" ? "50%" : void 0,
        flexGrow: variant === "fitted" ? 1 : void 0,
        flexShrink: variant === "fitted" ? 1 : void 0,
        marginRight: variant === "fitted" ? "space0" : "space70",
        minWidth: "sizeSquare130",
        paddingBottom: "space40",
        paddingLeft: "space20",
        paddingRight: "space20",
        paddingTop: "space40",
        textAlign: "center",
        _last: {
          marginRight: "space0"
        },
        _selected: {
          borderBottomColor: "colorBorderPrimary",
          color: "colorTextLink"
        },
        _hover: {
          borderBottomColor: "colorBorderPrimaryStronger",
          color: "colorTextLinkStronger"
        },
        _disabled: {
          borderBottomColor: "transparent",
          color: "colorTextWeaker"
        },
        _focus: {
          borderBottomColor: "colorBorderPrimaryStronger",
          boxShadow: "shadowFocus",
          color: "colorTextLinkStronger",
          outline: "none"
        }
      };
  }
};
var Tab = forwardRef2((_a, ref) => {
  var {children, element} = _a, tabProps = __rest(_a, ["children", "element"]);
  const tab = useContext(TabsContext);
  const boxStyles = useMemo2(() => getTabBoxStyles(tab.orientation, tab.variant), [tab.orientation, tab.variant]);
  const {orientation} = tab;
  const elementName = getElementName(orientation, "TAB", element);
  return /* @__PURE__ */ createElement2(TabPrimitive, __assign(__assign(__assign({}, tab), tabProps), {
    ref
  }), (props) => {
    return /* @__PURE__ */ createElement2(Box2, __assign(__assign(__assign({}, safelySpreadBoxProps(props)), boxStyles), {
      as: "span",
      cursor: props["aria-disabled"] ? "not-allowed" : "pointer",
      element: elementName,
      fontSize: "fontSize30",
      fontWeight: "fontWeightSemibold",
      overflow: orientation !== "vertical" ? "hidden" : void 0,
      position: "relative",
      textOverflow: orientation !== "vertical" ? "ellipsis" : void 0,
      transition: "border-color 100ms ease, color 100ms ease",
      whiteSpace: orientation !== "vertical" ? "nowrap" : void 0
    }), children);
  });
});
if (false) {
  Tab.propTypes = {
    id: string2,
    focusable: bool,
    disabled: bool
  };
}
Tab.displayName = "Tab";

// src/TabList.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3,
  useContext as useContext2
} from "react";
import {
  bool as bool2,
  string as string3
} from "prop-types";
import {Box as Box3} from "@twilio-paste/box";
import {TabPrimitiveList} from "@twilio-paste/tabs-primitive";
var HorizontalTabList = ({children, element}) => /* @__PURE__ */ createElement3(Box3, {
  display: "flex",
  borderBottomWidth: "borderWidth10",
  borderBottomColor: "colorBorderWeak",
  borderBottomStyle: "solid",
  element,
  marginBottom: "space60"
}, children);
var VerticalTabList = ({children, element}) => /* @__PURE__ */ createElement3(Box3, {
  borderLeftWidth: "borderWidth10",
  borderLeftColor: "colorBorderWeak",
  borderLeftStyle: "solid",
  element,
  marginRight: "space110",
  minWidth: "size20",
  maxWidth: "size40"
}, children);
var TabList = forwardRef3((_a, ref) => {
  var {children, element, variant} = _a, props = __rest(_a, ["children", "element", "variant"]);
  const tab = useContext2(TabsContext);
  const {orientation} = tab;
  const elementName = getElementName(orientation, "TAB_LIST", element);
  const TabListWrapper = orientation === "vertical" ? VerticalTabList : HorizontalTabList;
  return /* @__PURE__ */ createElement3(TabPrimitiveList, __assign(__assign(__assign(__assign({}, tab), {
    as: Box3
  }), props), {
    element: elementName,
    ref
  }), /* @__PURE__ */ createElement3(TabListWrapper, {
    element: `${elementName}_CHILD`
  }, children));
});
if (false) {
  TabList.propTypes = {
    "aria-label": string3.isRequired,
    focusable: bool2,
    disabled: bool2,
    element: string3
  };
}
TabList.displayName = "TabList";

// src/TabPanel.tsx
import {
  createElement as createElement4,
  forwardRef as forwardRef4,
  useContext as useContext3
} from "react";
import {
  string as string4
} from "prop-types";
import {Box as Box4} from "@twilio-paste/box";
import {TabPrimitivePanel} from "@twilio-paste/tabs-primitive";
var tabPanelStyles = {
  borderRadius: "borderRadius20",
  _focusVisible: {
    boxShadow: "shadowFocus",
    outline: "none"
  }
};
var TabPanel = forwardRef4((_a, ref) => {
  var {children, element} = _a, props = __rest(_a, ["children", "element"]);
  const tab = useContext3(TabsContext);
  const elementName = getElementName(tab.orientation, "TAB_PANEL", element);
  return /* @__PURE__ */ createElement4(TabPrimitivePanel, __assign(__assign(__assign(__assign({}, tab), tabPanelStyles), props), {
    element: elementName,
    as: Box4,
    ref
  }), children);
});
if (false) {
  TabPanel.propTypes = {
    element: string4,
    id: string4,
    tabId: string4
  };
}
TabPanel.displayName = "TabPanel";

// src/TabPanels.tsx
import {
  createElement as createElement5,
  forwardRef as forwardRef5,
  useContext as useContext4
} from "react";
import {
  string as string5
} from "prop-types";
import {Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
var TabPanels = forwardRef5((_a, ref) => {
  var {children, element} = _a, props = __rest(_a, ["children", "element"]);
  const {orientation} = useContext4(TabsContext);
  const elementName = getElementName(orientation, "TAB_PANELS", element);
  return /* @__PURE__ */ createElement5(Box5, __assign(__assign({}, safelySpreadBoxProps2(props)), {
    element: elementName,
    width: "100%",
    ref
  }), children);
});
if (false) {
  TabPanels.propTypes = {
    element: string5
  };
}
TabPanels.displayName = "TabPanels";
export {
  Tab,
  TabList,
  TabPanel,
  TabPanels,
  Tabs,
  tabPanelStyles,
  useTabPrimitiveState as useTabState
};
