/// <reference types="react" />
import type { ButtonProps } from '@twilio-paste/button';
import type { BoxProps } from '@twilio-paste/box';
export declare type NamedChild = React.ReactElement<Record<string, any>, React.NamedExoticComponent>;
export declare type BadgeChildren = NamedChild | React.ReactText | (React.ReactText | NamedChild)[];
export declare type BadgeVariants = 'info' | 'default' | 'warning' | 'error' | 'success' | 'new';
declare type BadgeBaseProps = Pick<BoxProps, 'element'> & {
    children: BadgeChildren;
    variant: BadgeVariants;
};
declare type BadgeAsSpanProps = React.HTMLAttributes<HTMLSpanElement> & {
    as: 'span';
};
declare type BadgeAsButtonProps = Omit<ButtonProps, 'variant' | 'as' | 'fullWidth' | 'size' | 'children'> & {
    as: 'button';
    onClick: ButtonProps['onClick'];
};
declare type BadgeAsAnchorProps = Omit<ButtonProps, 'variant' | 'as' | 'fullWidth' | 'size' | 'children'> & {
    as: 'a';
    href: ButtonProps['href'];
    onClick?: never;
};
export declare type BadgeProps = (BadgeAsSpanProps | BadgeAsButtonProps | BadgeAsAnchorProps) & BadgeBaseProps;
export {};
//# sourceMappingURL=types.d.ts.map