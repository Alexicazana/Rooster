var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef2
} from "react";
import {
  arrayOf,
  element,
  func,
  oneOf,
  oneOfType,
  string
} from "prop-types";
import {Box} from "@twilio-paste/box";

// src/hooks.tsx
import {
  Children,
  Fragment,
  cloneElement,
  createElement
} from "react";
import {useUIDSeed} from "@twilio-paste/uid-library";
var DEFAULT_ICON_SIZE = "sizeIcon10";
var useResizeChildIcons = (children) => {
  const seed = useUIDSeed();
  if (!Array.isArray(children)) {
    return children;
  }
  return Children.map(children, (child) => {
    var _a, _b;
    if (typeof child === "object" && !Array.isArray(child) && typeof ((_a = child == null ? void 0 : child.type) == null ? void 0 : _a.displayName) === "string" && ((_b = child == null ? void 0 : child.type) == null ? void 0 : _b.displayName.includes("Icon"))) {
      return cloneElement(child, __assign(__assign({}, child.props), {
        key: seed(child),
        size: DEFAULT_ICON_SIZE
      }));
    }
    return /* @__PURE__ */ createElement(Fragment, {
      key: seed(child)
    }, child);
  });
};

// src/styles.ts
var badgeVariantStyles = {
  success: {
    backgroundColor: "colorBackgroundSuccessWeakest",
    color: "colorTextSuccess"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError"
  },
  warning: {
    backgroundColor: "colorBackgroundWarningWeakest",
    color: "colorTextWarningStrong"
  },
  new: {
    backgroundColor: "colorBackgroundNew",
    color: "colorTextNew"
  },
  info: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral"
  },
  default: {
    backgroundColor: "colorBackground",
    color: "colorTextWeak"
  }
};
var badgeFocusableStyles = {
  textDecoration: "underline",
  cursor: "pointer",
  _hover: {textDecoration: "none"},
  _focus: {boxShadow: "shadowFocus", textDecoration: "none"}
};

// src/utils.ts
import {safelySpreadBoxProps} from "@twilio-paste/box";
var isFocusableElement = ({as}) => as === "button" || as === "a";
var getBadgeSpanProps = (props) => {
  if (isFocusableElement(props)) {
    return {};
  }
  return safelySpreadBoxProps(props);
};

// src/BadgeWrapper.tsx
import {
  Fragment as Fragment2,
  createElement as createElement2,
  forwardRef
} from "react";
import {safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
import {Button} from "@twilio-paste/button";
var BadgeWrapper = forwardRef((_a, ref) => {
  var {children, as} = _a, props = __rest(_a, ["children", "as"]);
  const propsMinusStyles = safelySpreadBoxProps2(props);
  if (as === "button") {
    return /* @__PURE__ */ createElement2(Button, __assign(__assign({}, propsMinusStyles), {
      variant: "reset",
      size: "reset",
      type: "button",
      ref
    }), children);
  }
  if (as === "a") {
    return /* @__PURE__ */ createElement2(Button, __assign(__assign({}, propsMinusStyles), {
      variant: "reset",
      size: "reset",
      as: "a",
      ref
    }), children);
  }
  return /* @__PURE__ */ createElement2(Fragment2, null, children);
});
BadgeWrapper.displayName = "BadgeWrapper";

// src/index.tsx
var Badge = forwardRef2((_a, ref) => {
  var {variant, children, element: element2 = "BADGE"} = _a, props = __rest(_a, ["variant", "children", "element"]);
  const resizedChildren = useResizeChildIcons(children);
  const variantStyles = badgeVariantStyles[variant];
  const spanProps = getBadgeSpanProps(props);
  const isFocusable = isFocusableElement(props);
  return /* @__PURE__ */ createElement3(BadgeWrapper, __assign(__assign({}, props), {
    ref: isFocusable ? ref : null
  }), /* @__PURE__ */ createElement3(Box, __assign(__assign(__assign(__assign({}, spanProps), {
    alignItems: "center",
    as: "span",
    border: "unset",
    borderRadius: "borderRadius30",
    columnGap: "space10",
    display: "flex",
    element: element2,
    fontSize: "fontSize20",
    fontWeight: "fontWeightSemibold",
    lineHeight: "lineHeight10",
    maxWidth: "max-content",
    paddingX: "space30",
    paddingY: "space20",
    variant,
    ref: !isFocusable ? ref : null
  }), variantStyles), isFocusable && __assign({}, badgeFocusableStyles)), resizedChildren));
});
Badge.displayName = "Badge";
Badge.propTypes = {
  children: oneOfType([
    string,
    arrayOf(string),
    element,
    arrayOf(element)
  ]).isRequired,
  element: string,
  variant: oneOf(["info", "default", "warning", "error", "success", "new"]).isRequired,
  as: oneOf(["span", "button", "a"]).isRequired,
  href: string,
  onClick: func
};
export {
  Badge
};
