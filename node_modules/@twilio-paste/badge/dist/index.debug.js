var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Badge: () => Badge
});
var React3 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box3 = __toModule(require("@twilio-paste/box"));

// src/hooks.tsx
var React = __toModule(require("react"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var DEFAULT_ICON_SIZE = "sizeIcon10";
var useResizeChildIcons = (children) => {
  const seed = import_uid_library.useUIDSeed();
  if (!Array.isArray(children)) {
    return children;
  }
  return React.Children.map(children, (child) => {
    var _a, _b;
    if (typeof child === "object" && !Array.isArray(child) && typeof ((_a = child == null ? void 0 : child.type) == null ? void 0 : _a.displayName) === "string" && ((_b = child == null ? void 0 : child.type) == null ? void 0 : _b.displayName.includes("Icon"))) {
      return React.cloneElement(child, __assign(__assign({}, child.props), {
        key: seed(child),
        size: DEFAULT_ICON_SIZE
      }));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, {
      key: seed(child)
    }, child);
  });
};

// src/styles.ts
var badgeVariantStyles = {
  success: {
    backgroundColor: "colorBackgroundSuccessWeakest",
    color: "colorTextSuccess"
  },
  error: {
    backgroundColor: "colorBackgroundErrorWeakest",
    color: "colorTextError"
  },
  warning: {
    backgroundColor: "colorBackgroundWarningWeakest",
    color: "colorTextWarningStrong"
  },
  new: {
    backgroundColor: "colorBackgroundNew",
    color: "colorTextNew"
  },
  info: {
    backgroundColor: "colorBackgroundNeutralWeakest",
    color: "colorTextNeutral"
  },
  default: {
    backgroundColor: "colorBackground",
    color: "colorTextWeak"
  }
};
var badgeFocusableStyles = {
  textDecoration: "underline",
  cursor: "pointer",
  _hover: {textDecoration: "none"},
  _focus: {boxShadow: "shadowFocus", textDecoration: "none"}
};

// src/utils.ts
var import_box = __toModule(require("@twilio-paste/box"));
var isFocusableElement = ({as}) => as === "button" || as === "a";
var getBadgeSpanProps = (props) => {
  if (isFocusableElement(props)) {
    return {};
  }
  return import_box.safelySpreadBoxProps(props);
};

// src/BadgeWrapper.tsx
var React2 = __toModule(require("react"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var import_button = __toModule(require("@twilio-paste/button"));
var BadgeWrapper = React2.forwardRef((_a, ref) => {
  var {children, as} = _a, props = __rest(_a, ["children", "as"]);
  const propsMinusStyles = import_box2.safelySpreadBoxProps(props);
  if (as === "button") {
    return /* @__PURE__ */ React2.createElement(import_button.Button, __assign(__assign({}, propsMinusStyles), {
      variant: "reset",
      size: "reset",
      type: "button",
      ref
    }), children);
  }
  if (as === "a") {
    return /* @__PURE__ */ React2.createElement(import_button.Button, __assign(__assign({}, propsMinusStyles), {
      variant: "reset",
      size: "reset",
      as: "a",
      ref
    }), children);
  }
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
});
BadgeWrapper.displayName = "BadgeWrapper";

// src/index.tsx
var Badge = React3.forwardRef((_a, ref) => {
  var {variant, children, element: element2 = "BADGE"} = _a, props = __rest(_a, ["variant", "children", "element"]);
  const resizedChildren = useResizeChildIcons(children);
  const variantStyles = badgeVariantStyles[variant];
  const spanProps = getBadgeSpanProps(props);
  const isFocusable = isFocusableElement(props);
  return /* @__PURE__ */ React3.createElement(BadgeWrapper, __assign(__assign({}, props), {
    ref: isFocusable ? ref : null
  }), /* @__PURE__ */ React3.createElement(import_box3.Box, __assign(__assign(__assign(__assign({}, spanProps), {
    alignItems: "center",
    as: "span",
    border: "unset",
    borderRadius: "borderRadius30",
    columnGap: "space10",
    display: "flex",
    element: element2,
    fontSize: "fontSize20",
    fontWeight: "fontWeightSemibold",
    lineHeight: "lineHeight10",
    maxWidth: "max-content",
    paddingX: "space30",
    paddingY: "space20",
    variant,
    ref: !isFocusable ? ref : null
  }), variantStyles), isFocusable && __assign({}, badgeFocusableStyles)), resizedChildren));
});
Badge.displayName = "Badge";
Badge.propTypes = {
  children: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.arrayOf(PropTypes.string),
    PropTypes.element,
    PropTypes.arrayOf(PropTypes.element)
  ]).isRequired,
  element: PropTypes.string,
  variant: PropTypes.oneOf(["info", "default", "warning", "error", "success", "new"]).isRequired,
  as: PropTypes.oneOf(["span", "button", "a"]).isRequired,
  href: PropTypes.string,
  onClick: PropTypes.func
};
