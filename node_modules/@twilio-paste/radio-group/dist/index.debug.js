var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Radio: () => Radio,
  RadioGroup: () => RadioGroup
});

// src/Radio.tsx
var React2 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_base_radio_checkbox = __toModule(require("@twilio-paste/base-radio-checkbox"));

// src/RadioContext.tsx
var React = __toModule(require("react"));
var RadioContext = React.createContext({
  name: "",
  value: "",
  disabled: false,
  hasError: false,
  onChange: () => {
  }
});

// src/Radio.tsx
var HiddenRadio = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(import_box.Box, __assign({
  as: "input",
  type: "radio",
  size: "size0",
  border: "none",
  overflow: "hidden",
  padding: "space0",
  margin: "space0",
  whiteSpace: "nowrap",
  textTransform: "none",
  position: "absolute",
  clip: "rect(0 0 0 0)",
  ref
}, props)));
HiddenRadio.displayName = "HiddenRadio";
var Radio = React2.forwardRef((_a, ref) => {
  var {id, name, element = "RADIO", value, checked, disabled, hasError, onChange, children, helpText} = _a, props = __rest(_a, ["id", "name", "element", "value", "checked", "disabled", "hasError", "onChange", "children", "helpText"]);
  const helpTextId = import_uid_library.useUID();
  const radioGroupContext = React2.useContext(RadioContext);
  const state = {
    name: name != null ? name : radioGroupContext.name,
    checked: checked != null ? checked : radioGroupContext.value === value,
    disabled: disabled != null ? disabled : radioGroupContext.disabled,
    hasError: hasError != null ? hasError : radioGroupContext.hasError,
    onChange: onChange != null ? onChange : radioGroupContext.onChange
  };
  return /* @__PURE__ */ React2.createElement(import_box.Box, {
    element,
    position: "relative",
    display: "inline-flex",
    alignItems: "flex-start",
    flexDirection: "column",
    verticalAlign: "top"
  }, /* @__PURE__ */ React2.createElement(HiddenRadio, __assign(__assign(__assign({}, props), state), {
    value,
    "aria-describedby": helpTextId,
    "aria-invalid": state.hasError,
    id,
    ref
  })), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabel, {
    disabled: state.disabled,
    htmlFor: id
  }, /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxControl, {
    element: `${element}_CONTROL`,
    borderRadius: "borderRadiusCircle",
    disabled: state.disabled,
    type: "radio"
  }, /* @__PURE__ */ React2.createElement(import_box.Box, {
    as: "span",
    backgroundColor: state.disabled && state.checked ? "colorBackgroundStrongest" : "colorBackgroundBody",
    borderRadius: "borderRadiusCircle",
    height: "sizeSquare25",
    width: "sizeSquare25"
  })), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabelText, {
    element: `${element}_LABEL_TEXT`
  }, children)), helpText && /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxHelpText, {
    element: `${element}_HELP_TEXT_WRAPPER`,
    helpTextId
  }, helpText));
});
Radio.displayName = "Radio";
if (false) {
  Radio.propTypes = {
    id: PropTypes.string,
    value: PropTypes.string,
    name: PropTypes.string,
    checked: PropTypes.bool,
    disabled: PropTypes.bool,
    hasError: PropTypes.bool,
    helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    onChange: PropTypes.func,
    children: PropTypes.node.isRequired,
    element: PropTypes.string
  };
}

// src/RadioGroup.tsx
var React3 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_inline_control_group = __toModule(require("@twilio-paste/inline-control-group"));
var RadioGroup = React3.forwardRef((_a, ref) => {
  var {name, element = "RADIO_GROUP", value, onChange, disabled = false, errorText, children} = _a, props = __rest(_a, ["name", "element", "value", "onChange", "disabled", "errorText", "children"]);
  const onChangeHandler = React3.useMemo(() => {
    return (event) => {
      if (onChange != null) {
        onChange(event.target.value);
      }
    };
  }, [onChange]);
  const contextValue = React3.useMemo(() => {
    return {
      name,
      value: value || "",
      disabled,
      hasError: errorText != null,
      onChange: onChangeHandler
    };
  }, [name, value, disabled, errorText, onChangeHandler]);
  return /* @__PURE__ */ React3.createElement(RadioContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React3.createElement(import_inline_control_group.InlineControlGroup, __assign(__assign({
    element
  }, props), {
    disabled,
    errorText,
    name,
    ref
  }), children));
});
RadioGroup.displayName = "RadioGroup";
if (false) {
  RadioGroup.propTypes = {
    name: PropTypes2.string.isRequired,
    onChange: PropTypes2.func.isRequired,
    value: PropTypes2.string,
    element: PropTypes2.string
  };
}
