var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Breadcrumb: () => Breadcrumb,
  BreadcrumbItem: () => BreadcrumbItem
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_anchor = __toModule(require("@twilio-paste/anchor"));
var import_text = __toModule(require("@twilio-paste/text"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var BreadcrumbSeparator = ({element}) => /* @__PURE__ */ React.createElement(import_text.Text, {
  as: "span",
  color: "colorTextWeak",
  fontSize: "fontSize20",
  lineHeight: "lineHeight20",
  paddingLeft: "space20",
  paddingRight: "space20",
  role: "presentation",
  element: `${element}_SEPARATOR`
}, "/");
var DEFAULT_ELEMENT_NAME = "BREADCRUMB";
var BreadcrumbItem = React.forwardRef((_a, ref) => {
  var {children, element, parentElement, href, last} = _a, props = __rest(_a, ["children", "element", "parentElement", "href", "last"]);
  const elementName = element || parentElement || DEFAULT_ELEMENT_NAME;
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    alignItems: "center",
    as: "li",
    color: "colorText",
    display: "inline-flex",
    element: `${elementName}_ITEM`,
    fontSize: "fontSize20",
    lineHeight: "lineHeight20"
  }), href ? /* @__PURE__ */ React.createElement(import_anchor.Anchor, {
    element: `${elementName}_ANCHOR`,
    href,
    ref
  }, children) : /* @__PURE__ */ React.createElement(import_text.Text, {
    "aria-current": "page",
    as: "span",
    element: `${elementName}_TEXT`,
    fontSize: "fontSize20",
    lineHeight: "lineHeight20",
    ref
  }, children), !last && /* @__PURE__ */ React.createElement(BreadcrumbSeparator, {
    element: elementName
  }));
});
BreadcrumbItem.displayName = "BreadcrumbItem";
if (false) {
  BreadcrumbItem.propTypes = {
    children: PropTypes.node.isRequired,
    element: PropTypes.string,
    href: PropTypes.string,
    last: PropTypes.bool
  };
}
var Breadcrumb = React.forwardRef((_a, ref) => {
  var {children, element = DEFAULT_ELEMENT_NAME} = _a, props = __rest(_a, ["children", "element"]);
  const [childrenCount, validChildren] = React.useMemo(() => [
    React.Children.count(children),
    React.Children.toArray(children).filter((child) => React.isValidElement(child) || typeof child === "string")
  ], [children]);
  const keySeed = import_uid_library.useUIDSeed();
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    "aria-label": "breadcrumb",
    as: "nav",
    element,
    ref
  }), /* @__PURE__ */ React.createElement(import_box.Box, {
    alignItems: "center",
    as: "ol",
    display: "inline-flex",
    listStyleType: "none",
    margin: "space0",
    padding: "space0"
  }, validChildren.map((child, index) => {
    return React.cloneElement(child, {
      last: childrenCount === index + 1,
      key: keySeed(`breadcrumb-${index}`),
      parentElement: element
    });
  })));
});
Breadcrumb.displayName = "Breadcrumb";
Breadcrumb.propTypes = {
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
