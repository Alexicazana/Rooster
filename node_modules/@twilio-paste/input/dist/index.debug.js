var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Input: () => Input,
  InputElement: () => InputElement
});

// src/Input.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_input_box = __toModule(require("@twilio-paste/input-box"));

// src/utils.ts
var PROPS_TO_BLOCK = ["className", "style", "size", "height", "width"];
var safelySpreadFormControlProps = (props) => {
  return Object.keys(props).reduce((newProps, key) => {
    if (!PROPS_TO_BLOCK.includes(key)) {
      newProps[key] = props[key];
    }
    return newProps;
  }, {});
};

// src/Input.tsx
var InputElement = React.forwardRef((_a, ref) => {
  var {element} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign({
    appearance: "none",
    as: "input",
    backgroundColor: "transparent",
    border: "none",
    borderRadius: "borderRadius20",
    boxShadow: "none",
    color: "inherit",
    cursor: (props.type === "date" || props.type === "time") && !props.readOnly && !props.disabled ? "text" : "auto",
    display: "block",
    element,
    fontFamily: "inherit",
    fontSize: "fontSize30",
    fontWeight: "fontWeightMedium",
    lineHeight: "lineHeight20",
    margin: "space0",
    outline: "none",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space40",
    paddingTop: "space30",
    resize: "none",
    width: "100%",
    variant: props.variant,
    ref,
    _placeholder: {
      color: props.variant === "inverse" ? "colorTextInverseWeak" : "colorTextWeak",
      fontStyle: "italic"
    },
    _focus_placeholder: {
      color: props.variant === "inverse" ? "colorTextInverseWeak" : "colorTextWeak"
    },
    _disabled: {
      color: props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
      cursor: "not-allowed",
      "-webkit-text-fill-color": props.variant === "inverse" ? "colorTextInverseWeaker" : "colorTextWeaker",
      "-webkit-opacity": "1"
    },
    __webkit_datetime_edit: {
      display: "flex"
    },
    __webkit_calendar_picker_indicator_hover: {
      cursor: props.readOnly || props.disabled ? "default" : "pointer"
    }
  }, props));
});
InputElement.displayName = "InputElement";
var Input = React.forwardRef((_a, ref) => {
  var {
    disabled,
    element = "INPUT",
    hasError,
    id,
    insertAfter,
    insertBefore,
    name,
    placeholder,
    readOnly,
    required,
    type,
    value,
    variant
  } = _a, props = __rest(_a, [
    "disabled",
    "element",
    "hasError",
    "id",
    "insertAfter",
    "insertBefore",
    "name",
    "placeholder",
    "readOnly",
    "required",
    "type",
    "value",
    "variant"
  ]);
  const typeProps = {type};
  if (type === "number") {
    typeProps.type = "text";
    typeProps.inputmode = "numeric";
    typeProps.pattern = "[0-9]*";
  }
  return /* @__PURE__ */ React.createElement(import_input_box.InputBox, {
    disabled,
    element,
    hasError,
    insertAfter,
    insertBefore,
    readOnly,
    type,
    variant
  }, /* @__PURE__ */ React.createElement(InputElement, __assign(__assign(__assign({
    "aria-invalid": hasError,
    "aria-readonly": readOnly
  }, safelySpreadFormControlProps(props)), typeProps), {
    disabled,
    element: `${element}_ELEMENT`,
    id,
    name,
    placeholder,
    readOnly,
    ref,
    required,
    value,
    variant
  })));
});
Input.displayName = "Input";
Input.propTypes = {
  disabled: PropTypes.bool,
  element: PropTypes.string,
  hasError: PropTypes.bool,
  id: PropTypes.string,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  placeholder: PropTypes.string,
  readOnly: PropTypes.bool,
  required: PropTypes.bool,
  type: PropTypes.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]).isRequired,
  value: PropTypes.string
};
