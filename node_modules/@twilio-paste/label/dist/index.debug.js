var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Label: () => Label,
  RequiredDot: () => RequiredDot
});

// src/Label.tsx
var React2 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var import_media_object = __toModule(require("@twilio-paste/media-object"));

// src/RequiredDot.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_screen_reader_only = __toModule(require("@twilio-paste/screen-reader-only"));
var RequiredDot = (_a) => {
  var {element = "REQUIRED_DOT"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    alignItems: "center",
    justifyContent: "center",
    as: "span",
    cursor: "pointer",
    display: "flex",
    height: "sizeIcon30",
    element: `${element}_WRAPPER`
  }), /* @__PURE__ */ React.createElement(import_box.Box, {
    as: "span",
    backgroundColor: "colorBackgroundRequired",
    borderRadius: "borderRadiusCircle",
    display: "block",
    height: "4px",
    width: "4px",
    element
  }, /* @__PURE__ */ React.createElement(import_screen_reader_only.ScreenReaderOnly, null, "Required: ")));
};
RequiredDot.displayName = "RequiredDot";
RequiredDot.propTypes = {
  element: PropTypes.string
};

// src/Label.tsx
var Label = React2.forwardRef((_a, ref) => {
  var {as = "label", marginBottom, required, disabled, children, variant, element = "LABEL"} = _a, props = __rest(_a, ["as", "marginBottom", "required", "disabled", "children", "variant", "element"]);
  let textColor = "colorText";
  if (disabled && variant === "inverse") {
    textColor = "colorTextInverseWeak";
  } else if (disabled) {
    textColor = "colorTextWeak";
  } else if (variant === "inverse") {
    textColor = "colorTextInverse";
  }
  let cursor = "pointer";
  if (disabled) {
    cursor = "not-allowed";
  } else if (as === "legend") {
    cursor = "default";
  }
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    as,
    borderBottomWidth: "borderWidth0",
    display: "block",
    marginBottom: marginBottom || "space20",
    paddingLeft: "space0",
    paddingRight: "space0",
    textTransform: "none",
    element,
    fontSize: "fontSize30",
    fontWeight: "fontWeightBold",
    lineHeight: "lineHeight30",
    color: textColor,
    cursor,
    ref
  }), /* @__PURE__ */ React2.createElement(import_media_object.MediaObject, {
    verticalAlign: "top"
  }, required && /* @__PURE__ */ React2.createElement(import_media_object.MediaFigure, {
    spacing: "space20"
  }, /* @__PURE__ */ React2.createElement(RequiredDot, {
    element: `${element}_REQUIRED_DOT`
  })), /* @__PURE__ */ React2.createElement(import_media_object.MediaBody, null, children)));
});
Label.displayName = "Label";
Label.propTypes = {
  as: PropTypes2.oneOf(["label", "legend"]),
  disabled: PropTypes2.bool,
  element: PropTypes2.string,
  htmlFor: PropTypes2.string,
  marginBottom: PropTypes2.oneOf(["space0"]),
  required: PropTypes2.bool,
  variant: PropTypes2.oneOf(["default", "inverse"])
};
