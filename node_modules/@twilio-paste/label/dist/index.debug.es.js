var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Label.tsx
import {
  createElement as createElement2,
  forwardRef
} from "react";
import {
  bool,
  oneOf,
  string as string2
} from "prop-types";
import {Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
import {MediaObject, MediaFigure, MediaBody} from "@twilio-paste/media-object";

// src/RequiredDot.tsx
import {
  createElement
} from "react";
import {
  string
} from "prop-types";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";
import {ScreenReaderOnly} from "@twilio-paste/screen-reader-only";
var RequiredDot = (_a) => {
  var {element = "REQUIRED_DOT"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ createElement(Box, __assign(__assign({}, safelySpreadBoxProps(props)), {
    alignItems: "center",
    justifyContent: "center",
    as: "span",
    cursor: "pointer",
    display: "flex",
    height: "sizeIcon30",
    element: `${element}_WRAPPER`
  }), /* @__PURE__ */ createElement(Box, {
    as: "span",
    backgroundColor: "colorBackgroundRequired",
    borderRadius: "borderRadiusCircle",
    display: "block",
    height: "4px",
    width: "4px",
    element
  }, /* @__PURE__ */ createElement(ScreenReaderOnly, null, "Required: ")));
};
RequiredDot.displayName = "RequiredDot";
RequiredDot.propTypes = {
  element: string
};

// src/Label.tsx
var Label = forwardRef((_a, ref) => {
  var {as = "label", marginBottom, required, disabled, children, variant, element = "LABEL"} = _a, props = __rest(_a, ["as", "marginBottom", "required", "disabled", "children", "variant", "element"]);
  let textColor = "colorText";
  if (disabled && variant === "inverse") {
    textColor = "colorTextInverseWeak";
  } else if (disabled) {
    textColor = "colorTextWeak";
  } else if (variant === "inverse") {
    textColor = "colorTextInverse";
  }
  let cursor = "pointer";
  if (disabled) {
    cursor = "not-allowed";
  } else if (as === "legend") {
    cursor = "default";
  }
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign({}, safelySpreadBoxProps2(props)), {
    as,
    borderBottomWidth: "borderWidth0",
    display: "block",
    marginBottom: marginBottom || "space20",
    paddingLeft: "space0",
    paddingRight: "space0",
    textTransform: "none",
    element,
    fontSize: "fontSize30",
    fontWeight: "fontWeightBold",
    lineHeight: "lineHeight30",
    color: textColor,
    cursor,
    ref
  }), /* @__PURE__ */ createElement2(MediaObject, {
    verticalAlign: "top"
  }, required && /* @__PURE__ */ createElement2(MediaFigure, {
    spacing: "space20"
  }, /* @__PURE__ */ createElement2(RequiredDot, {
    element: `${element}_REQUIRED_DOT`
  })), /* @__PURE__ */ createElement2(MediaBody, null, children)));
});
Label.displayName = "Label";
Label.propTypes = {
  as: oneOf(["label", "legend"]),
  disabled: bool,
  element: string2,
  htmlFor: string2,
  marginBottom: oneOf(["space0"]),
  required: bool,
  variant: oneOf(["default", "inverse"])
};
export {
  Label,
  RequiredDot
};
