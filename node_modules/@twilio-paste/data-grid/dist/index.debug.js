var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// ../../../../node_modules/lodash.iselement/index.js
var require_lodash = __commonJS((exports2, module2) => {
  var objectTag = "[object Object]";
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function overArg(func4, transform) {
    return function(arg) {
      return func4(transform(arg));
    };
  }
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  var objectToString = objectProto.toString;
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  function isElement2(value) {
    return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isPlainObject(value) {
    if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  module2.exports = isElement2;
});

// src/index.tsx
__export(exports, {
  DataGrid: () => DataGrid,
  DataGridBody: () => DataGridBody,
  DataGridCell: () => DataGridCell,
  DataGridFoot: () => DataGridFoot,
  DataGridHead: () => DataGridHead,
  DataGridHeader: () => DataGridHeader,
  DataGridHeaderSort: () => DataGridHeaderSort,
  DataGridRow: () => DataGridRow
});

// src/DataGrid.tsx
var React2 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_reakit_library = __toModule(require("@twilio-paste/reakit-library"));
var import_table = __toModule(require("@twilio-paste/table"));

// src/DataGridContext.tsx
var React = __toModule(require("react"));
var DataGridContext = React.createContext({
  actionable: false,
  striped: false
});

// src/utils/reakit/reakit-matches.ts
function matches(element, selectors) {
  if ("matches" in element) {
    return element.matches(selectors);
  }
  if ("msMatchesSelector" in element) {
    return element.msMatchesSelector(selectors);
  }
  return element.webkitMatchesSelector(selectors);
}

// src/utils/reakit/reakit-tabbable-modded.ts
var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
function isFocusable(element) {
  return matches(element, selector);
}
function getAllFocusableIn(container) {
  const allFocusable = Array.from(container.querySelectorAll(selector));
  return allFocusable.filter(isFocusable);
}
function getFirstFocusableIn(container) {
  const [first] = getAllFocusableIn(container);
  return first || null;
}

// src/utils/reakit/reakit-getDocument.ts
function getDocument(element) {
  return element ? element.ownerDocument || element : document;
}

// src/utils/reakit/reakit-getActiveElement-modded.ts
function getActiveElement(element) {
  const {activeElement} = getDocument(element);
  if (!(activeElement == null ? void 0 : activeElement.nodeName)) {
    return null;
  }
  return activeElement;
}

// src/utils/reakit/reakit-hasFocus.ts
function hasFocus(element) {
  const activeElement = getActiveElement(element);
  if (!activeElement)
    return false;
  if (activeElement === element)
    return true;
  const activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant)
    return false;
  return activeDescendant === element.id;
}

// src/utils/reakit/reakit-ensureFocus.ts
function ensureFocus(element, {preventScroll, isActive = hasFocus} = {}) {
  if (isActive(element))
    return -1;
  element.focus({preventScroll});
  if (isActive(element))
    return -1;
  return requestAnimationFrame(() => {
    element.focus({preventScroll});
  });
}

// src/utils/cell-management.ts
var updateTabIndexForActionable = (cellElement, actionable) => {
  getAllFocusableIn(cellElement).forEach((element) => {
    element.tabIndex = actionable ? 0 : -1;
  });
};
var delayedSetFocusable = (element) => {
  setTimeout(() => {
    if (element != null) {
      element.tabIndex = 0;
    }
  }, 150);
};
var isCell = (element) => {
  return element.tagName === "TD" || element.tagName === "TH";
};
var getClosestCellFrom = (element, dataGridId) => {
  if (element == null)
    return null;
  if (!dataGridId)
    return null;
  return element.closest(`#${dataGridId} th, #${dataGridId} td`);
};
var getClosestGridCellFromCurrentFocus = (dataGridId) => {
  const focusedElement = getActiveElement();
  if (!focusedElement) {
    return null;
  }
  if (isCell(focusedElement)) {
    return focusedElement;
  }
  return getClosestCellFrom(focusedElement, dataGridId);
};

// src/DataGrid.tsx
var DataGrid = React2.forwardRef((_a, ref) => {
  var {element = "DATA_GRID", striped = false} = _a, props = __rest(_a, ["element", "striped"]);
  const dataGridId = `data-grid-${import_uid_library.useUID()}`;
  const lastFocusedElement = React2.useRef(null);
  const compositeState = import_reakit_library.useCompositeState({unstable_virtual: false});
  const [actionable, setActionable] = React2.useState(false);
  const handleMouseDown = React2.useCallback(() => {
    setActionable(true);
  }, []);
  const handleFocus = React2.useCallback((e) => {
    if (e.target != null) {
      lastFocusedElement.current = e.target;
    }
  }, []);
  const handleBlur = React2.useCallback((event) => {
    const isDataGridBlurred = !event.currentTarget.contains(event.relatedTarget);
    if (isDataGridBlurred) {
      setActionable(false);
      if (lastFocusedElement.current != null) {
        const closestCell = getClosestCellFrom(lastFocusedElement.current, dataGridId);
        if (closestCell) {
          delayedSetFocusable(closestCell);
        }
      }
    }
  }, [dataGridId]);
  const handleKeypress = React2.useCallback((event) => {
    switch (event.key) {
      case "Enter": {
        setActionable(true);
        const activeElement = getActiveElement();
        if (isCell(activeElement)) {
          const firstFocusableElement = getFirstFocusableIn(activeElement);
          if (firstFocusableElement) {
            ensureFocus(firstFocusableElement);
            activeElement.tabIndex = actionable ? 0 : -1;
          }
        }
        break;
      }
      case "Escape": {
        setActionable(false);
        const closestCell = getClosestGridCellFromCurrentFocus(dataGridId);
        if (closestCell) {
          ensureFocus(closestCell);
          delayedSetFocusable(closestCell);
        }
        break;
      }
      default:
        break;
    }
  }, [actionable, dataGridId]);
  const dataGridState = __assign(__assign({}, compositeState), {
    actionable,
    striped
  });
  return /* @__PURE__ */ React2.createElement(DataGridContext.Provider, {
    value: dataGridState
  }, /* @__PURE__ */ React2.createElement(import_box.Box, {
    id: dataGridId,
    element: `${element}_WRAPPER`,
    overflowX: "auto",
    whiteSpace: "nowrap",
    boxShadow: actionable ? "shadowFocus" : null
  }, /* @__PURE__ */ React2.createElement(import_reakit_library.Composite, __assign(__assign(__assign({}, props), compositeState), {
    ref,
    as: import_table.Table,
    element,
    role: "grid",
    onKeyDown: handleKeypress,
    onMouseDown: handleMouseDown,
    onFocus: handleFocus,
    onBlur: handleBlur,
    "data-actionable": actionable
  }))));
});
DataGrid.displayName = "DataGrid";
DataGrid.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  element: PropTypes.string
};

// src/DataGridHead.tsx
var React3 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_table2 = __toModule(require("@twilio-paste/table"));
var DataGridHead = React3.forwardRef((_a, ref) => {
  var {element = "DATA_GRID_HEAD"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React3.createElement(import_table2.THead, __assign(__assign({}, props), {
    element,
    ref
  }));
});
DataGridHead.displayName = "DataGridHead";
DataGridHead.propTypes = {
  element: PropTypes2.string
};

// src/DataGridRow.tsx
var React5 = __toModule(require("react"));
var PropTypes4 = __toModule(require("prop-types"));
var import_reakit_library2 = __toModule(require("@twilio-paste/reakit-library"));

// src/table/Tr.tsx
var React4 = __toModule(require("react"));
var PropTypes3 = __toModule(require("prop-types"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var Tr = React4.forwardRef((_a, ref) => {
  var {element = "DATA_GRID_TR", striped} = _a, props = __rest(_a, ["element", "striped"]);
  return /* @__PURE__ */ React4.createElement(import_box2.Box, __assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    ref,
    element,
    as: "tr",
    "aria-selected": props.selected,
    borderStyle: "solid",
    borderColor: "colorBorderWeaker",
    borderWidth: "borderWidth0",
    borderBottomWidth: "borderWidth10",
    _even: {backgroundColor: striped ? "colorBackgroundRowStriped" : "transparent"},
    _last: {borderWidth: "borderWidth0"},
    _selected: {
      backgroundColor: "colorBackgroundPrimaryWeakest",
      borderColor: "colorBorderWeak"
    }
  }));
});
Tr.displayName = "Tr";
Tr.propTypes = {
  role: PropTypes3.string.isRequired,
  selected: PropTypes3.bool,
  element: PropTypes3.string
};

// src/DataGridRow.tsx
var DataGridRow = React5.forwardRef((_a, ref) => {
  var {element = "DATA_GRID_ROW"} = _a, props = __rest(_a, ["element"]);
  const dataGridState = React5.useContext(DataGridContext);
  return /* @__PURE__ */ React5.createElement(import_reakit_library2.CompositeGroup, __assign(__assign(__assign(__assign({
    as: Tr
  }, props), {
    element
  }), dataGridState), {
    ref,
    role: "row"
  }));
});
DataGridRow.displayName = "DataGridRow";
DataGridRow.propTypes = {
  selected: PropTypes4.bool,
  element: PropTypes4.string
};

// src/DataGridHeader.tsx
var React9 = __toModule(require("react"));
var PropTypes8 = __toModule(require("prop-types"));

// src/DataGridCell.tsx
var React8 = __toModule(require("react"));
var PropTypes7 = __toModule(require("prop-types"));
var import_reakit_library3 = __toModule(require("@twilio-paste/reakit-library"));
var import_utils2 = __toModule(require("@twilio-paste/utils"));

// src/table/Td.tsx
var React6 = __toModule(require("react"));
var PropTypes5 = __toModule(require("prop-types"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var Td = React6.forwardRef((_a, ref) => {
  var {textAlign = "left", element = "DATA_GRID_TD"} = _a, props = __rest(_a, ["textAlign", "element"]);
  return /* @__PURE__ */ React6.createElement(import_box3.Box, __assign(__assign({}, import_box3.safelySpreadBoxProps(props)), {
    ref,
    as: "td",
    element,
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    paddingY: "space40",
    paddingX: "space50",
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    wordWrap: "break-word",
    _first: {
      paddingLeft: "space50"
    },
    _last: {
      paddingRight: "space50"
    },
    _focus: {
      outline: "none",
      boxShadow: "shadowFocusInset"
    }
  }));
});
Td.displayName = "Td";
Td.propTypes = {
  onClick: PropTypes5.func,
  element: PropTypes5.string
};

// src/table/Th.tsx
var React7 = __toModule(require("react"));
var PropTypes6 = __toModule(require("prop-types"));
var import_box4 = __toModule(require("@twilio-paste/box"));
var Th = React7.forwardRef((_a, ref) => {
  var {width, textAlign = "left", element = "DATA_GRID_TH"} = _a, props = __rest(_a, ["width", "textAlign", "element"]);
  return /* @__PURE__ */ React7.createElement(import_box4.Box, __assign(__assign({}, import_box4.safelySpreadBoxProps(props)), {
    ref,
    element,
    as: "th",
    fontSize: "fontSize30",
    lineHeight: "lineHeight30",
    fontWeight: "fontWeightSemibold",
    paddingY: "space40",
    paddingX: "space50",
    width,
    position: "relative",
    textAlign,
    verticalAlign: "inherit",
    _first: {
      paddingLeft: "space50"
    },
    _last: {
      paddingRight: "space50"
    },
    _focus: {
      outline: "none",
      boxShadow: "shadowFocusInset"
    }
  }));
});
Th.displayName = "Th";
Th.propTypes = {
  onClick: PropTypes6.func,
  width: PropTypes6.string,
  element: PropTypes6.string
};

// src/DataGridCell.tsx
var isElement = require_lodash();
var DataGridCell = (_a) => {
  var {element = "DATA_GRID_CELL", as = "td"} = _a, props = __rest(_a, ["element", "as"]);
  const dataGridState = React8.useContext(DataGridContext);
  const cellRef = React8.useRef();
  const handleMouseDown = React8.useCallback(() => {
    ensureFocus(cellRef.current);
  }, []);
  const onListMutation = React8.useCallback((mutationList) => {
    if (mutationList.length === 0) {
      return;
    }
    mutationList.forEach((mutation) => {
      if (!isElement(mutation.target)) {
        return;
      }
      const target = mutation.target;
      if (mutation.attributeName === "tabindex" && dataGridState.actionable && target.tabIndex === 0 && isCell(target)) {
        target.tabIndex = -1;
      }
    });
  }, [dataGridState.actionable]);
  import_utils2.useMutationObservable(cellRef.current, onListMutation);
  React8.useEffect(() => {
    if (cellRef.current) {
      updateTabIndexForActionable(cellRef.current, dataGridState.actionable);
    }
  }, [dataGridState.actionable]);
  return /* @__PURE__ */ React8.createElement(import_reakit_library3.CompositeItem, __assign(__assign(__assign({}, props), dataGridState), {
    element,
    ref: cellRef,
    as: as === "td" ? Td : Th,
    onClick: handleMouseDown
  }));
};
DataGridCell.displayName = "DataGridCell";
DataGridCell.propTypes = {
  as: PropTypes7.oneOf(["th", "td"]),
  element: PropTypes7.string
};

// src/DataGridHeader.tsx
var DataGridHeader = (_a) => {
  var {element = "DATA_GRID_HEADER"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React9.createElement(DataGridCell, __assign(__assign({
    element
  }, props), {
    as: "th"
  }));
};
DataGridHeader.displayName = "DataGridHeader";
DataGridHeader.propTypes = {
  element: PropTypes8.string
};

// src/DataGridHeaderSort.tsx
var React10 = __toModule(require("react"));
var PropTypes9 = __toModule(require("prop-types"));
var import_button = __toModule(require("@twilio-paste/button"));
var import_ArrowDownIcon = __toModule(require("@twilio-paste/icons/cjs/ArrowDownIcon"));
var import_ArrowUpIcon = __toModule(require("@twilio-paste/icons/cjs/ArrowUpIcon"));
var import_UnsortedIcon = __toModule(require("@twilio-paste/icons/cjs/UnsortedIcon"));
var DataGridHeaderSortIcon = ({direction, element}) => {
  switch (direction) {
    case "ascending":
      return /* @__PURE__ */ React10.createElement(import_ArrowUpIcon.ArrowUpIcon, {
        decorative: false,
        element,
        title: "Sort ascending"
      });
    case "descending":
      return /* @__PURE__ */ React10.createElement(import_ArrowDownIcon.ArrowDownIcon, {
        decorative: false,
        element,
        title: "Sort descending"
      });
    case "none":
      return /* @__PURE__ */ React10.createElement(import_UnsortedIcon.UnsortedIcon, {
        decorative: false,
        element,
        title: "Unsorted"
      });
    default:
      return null;
  }
};
var DataGridHeaderSort = (_a) => {
  var {
    direction,
    onClick,
    element = "DATA_GRID_HEADER_SORT"
  } = _a, props = __rest(_a, [
    "direction",
    "onClick",
    "element"
  ]);
  return /* @__PURE__ */ React10.createElement(import_button.Button, __assign({
    element,
    variant: "reset",
    size: "reset",
    onClick
  }, props), /* @__PURE__ */ React10.createElement(DataGridHeaderSortIcon, {
    element: `${element}_ICON`,
    direction
  }));
};
DataGridHeaderSort.displayName = "DataGridHeaderSort";
DataGridHeaderSort.propTypes = {
  direction: PropTypes9.oneOf(["ascending", "descending", "none"]).isRequired,
  onClick: PropTypes9.func,
  element: PropTypes9.string
};

// src/DataGridBody.tsx
var React11 = __toModule(require("react"));
var PropTypes10 = __toModule(require("prop-types"));
var import_table3 = __toModule(require("@twilio-paste/table"));
var DataGridBody = React11.forwardRef((_a, ref) => {
  var {element = "DATA_GRID_BODY"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React11.createElement(import_table3.TBody, __assign(__assign({}, props), {
    element,
    ref
  }));
});
DataGridBody.displayName = "DataGridBody";
DataGridBody.propTypes = {
  element: PropTypes10.string
};

// src/DataGridFoot.tsx
var React12 = __toModule(require("react"));
var PropTypes11 = __toModule(require("prop-types"));
var import_table4 = __toModule(require("@twilio-paste/table"));
var DataGridFoot = React12.forwardRef((_a, ref) => {
  var {element = "DATA_GRID_FOOT"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ React12.createElement(import_table4.TFoot, __assign(__assign({}, props), {
    element,
    ref
  }));
});
DataGridFoot.displayName = "DataGridFoot";
DataGridFoot.propTypes = {
  element: PropTypes11.string
};
