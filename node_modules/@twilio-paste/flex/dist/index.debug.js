var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Flex: () => Flex
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_style_props = __toModule(require("@twilio-paste/style-props"));

// src/helpers.tsx
var getGrow = ({grow}) => {
  if (Array.isArray(grow)) {
    return grow.map((value) => {
      return Number(value);
    });
  }
  if (typeof grow === "number") {
    return grow;
  }
  if (grow) {
    return 1;
  }
  return 0;
};
var getShrink = ({shrink, basis}) => {
  if (Array.isArray(shrink)) {
    return shrink.map((value) => {
      return Number(value);
    });
  }
  if (typeof shrink === "number") {
    return shrink;
  }
  if (typeof shrink === "boolean") {
    return shrink ? 1 : 0;
  }
  if (basis && basis !== "auto") {
    return 0;
  }
  return 1;
};
var getSuffix = (item) => {
  const suffix = typeof item === "number" || String(Number.parseInt(item, 10)) === item ? "px" : "";
  return item + suffix;
};
var getBasis = ({basis}) => {
  if (Array.isArray(basis)) {
    return basis.map((value) => {
      return getSuffix(value);
    });
  }
  if (basis) {
    return getSuffix(basis);
  }
  return "auto";
};
var getVertical = ({vertical}) => {
  if (Array.isArray(vertical)) {
    return vertical.map((value) => {
      if (typeof value === "boolean") {
        return value === true ? "column" : "row";
      }
      return value;
    });
  }
  if (vertical) {
    return "column";
  }
  return "row";
};
var getWrap = ({wrap}) => {
  if (Array.isArray(wrap)) {
    return wrap.map((value) => {
      if (typeof value === "boolean") {
        return value === true ? "wrap" : "nowrap";
      }
      return value;
    });
  }
  if (wrap) {
    return "wrap";
  }
  return "nowrap";
};
var RemapedVerticalAlignments = {
  top: "flex-start",
  center: "center",
  bottom: "flex-end",
  stretch: "stretch"
};
var vAlignToProps = ({
  vAlignContent
}) => {
  if (Array.isArray(vAlignContent)) {
    return vAlignContent.map((value) => RemapedVerticalAlignments[value]);
  }
  if (vAlignContent) {
    return RemapedVerticalAlignments[vAlignContent];
  }
  return "flex-start";
};
var RemapedHorizontalAlignments = {
  left: "flex-start",
  center: "center",
  right: "flex-end",
  around: "space-around",
  between: "space-between"
};
var hAlignToProps = ({hAlignContent}) => {
  if (Array.isArray(hAlignContent)) {
    return hAlignContent.map((value) => RemapedHorizontalAlignments[value]);
  }
  if (hAlignContent) {
    return RemapedHorizontalAlignments[hAlignContent];
  }
  return "flex-start";
};

// src/index.tsx
var getFlexStyles = (props) => {
  const styles = {
    justifyContent: props.vertical ? vAlignToProps(props) : hAlignToProps(props),
    alignItems: props.vertical ? hAlignToProps(props) : vAlignToProps(props)
  };
  if (props.grow || props.shrink || props.basis) {
    styles.flexGrow = getGrow(props);
    styles.flexShrink = getShrink(props);
    styles.flexBasis = getBasis(props);
  }
  if (props.vertical) {
    styles.flexDirection = getVertical(props);
  }
  if (props.wrap) {
    styles.flexWrap = getWrap(props);
  }
  return styles;
};
var Flex = React.forwardRef((_a, ref) => {
  var {
    as,
    basis,
    children,
    display,
    element = "FLEX",
    hAlignContent,
    grow,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    margin,
    marginX,
    marginY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    padding,
    paddingX,
    paddingY,
    maxWidth,
    minWidth = "size0",
    width,
    height,
    minHeight,
    maxHeight,
    size,
    shrink,
    vertical,
    vAlignContent,
    wrap
  } = _a, props = __rest(_a, [
    "as",
    "basis",
    "children",
    "display",
    "element",
    "hAlignContent",
    "grow",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "margin",
    "marginX",
    "marginY",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "padding",
    "paddingX",
    "paddingY",
    "maxWidth",
    "minWidth",
    "width",
    "height",
    "minHeight",
    "maxHeight",
    "size",
    "shrink",
    "vertical",
    "vAlignContent",
    "wrap"
  ]);
  const FlexStyles = React.useMemo(() => getFlexStyles({basis, hAlignContent, grow, shrink, vertical, vAlignContent, wrap}), [basis, hAlignContent, grow, shrink, vertical, vAlignContent, wrap]);
  if (size && (width || height)) {
    console.error("[Paste Flex]: you cannot set a height or width when using the size attribute");
  }
  if (marginX && (margin || marginBottom || marginLeft || marginRight || marginTop) || marginY && (margin || marginBottom || marginLeft || marginRight || marginTop)) {
    console.error("[Paste Flex]: you cannot set a top, right, bottom or left margin when using the marginX or marginY attributes.");
  }
  if (paddingX && (padding || paddingBottom || paddingLeft || paddingRight || paddingTop) || paddingY && (padding || paddingBottom || paddingLeft || paddingRight || paddingTop)) {
    console.error("[Paste Flex]: you cannot set a top, right, bottom or left padding when using the paddingX or paddingY attributes.");
  }
  const margins = marginX || marginY ? {marginX, marginY} : {margin, marginBottom, marginLeft, marginRight, marginTop};
  const paddings = paddingX || paddingY ? {paddingX, paddingY} : {padding, paddingBottom, paddingLeft, paddingRight, paddingTop};
  const widths = size ? {size} : {height, width};
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, FlexStyles), import_box.safelySpreadBoxProps(props)), {
    ref,
    as,
    display,
    element
  }), margins), paddings), {
    minHeight,
    maxHeight,
    maxWidth,
    minWidth
  }), widths), children);
});
Flex.displayName = "Flex";
Flex.defaultProps = {
  display: "flex"
};
Flex.propTypes = {
  as: PropTypes.string,
  display: import_style_props.ResponsiveProp(PropTypes.oneOf(["flex", "inline-flex"])),
  element: PropTypes.string,
  vertical: import_style_props.ResponsiveProp(PropTypes.bool),
  vAlignContent: import_style_props.ResponsiveProp(PropTypes.oneOf(["top", "center", "bottom", "stretch"])),
  hAlignContent: import_style_props.ResponsiveProp(PropTypes.oneOf(["left", "center", "right", "around", "between"])),
  grow: import_style_props.ResponsiveProp(PropTypes.oneOfType([PropTypes.bool, PropTypes.number])),
  shrink: import_style_props.ResponsiveProp(PropTypes.oneOfType([PropTypes.bool, PropTypes.number])),
  basis: import_style_props.ResponsiveProp(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
  wrap: import_style_props.ResponsiveProp(PropTypes.bool),
  width: import_style_props.isWidthTokenProp,
  minWidth: import_style_props.isMinWidthTokenProp,
  maxWidth: import_style_props.isMaxWidthTokenProp,
  height: import_style_props.isHeightTokenProp,
  minHeight: import_style_props.isMinHeightTokenProp,
  maxHeight: import_style_props.isMaxHeightTokenProp,
  size: import_style_props.isWidthTokenProp,
  margin: import_style_props.isMarginTokenProp,
  marginTop: import_style_props.isMarginTokenProp,
  marginRight: import_style_props.isMarginTokenProp,
  marginBottom: import_style_props.isMarginTokenProp,
  marginLeft: import_style_props.isMarginTokenProp,
  marginX: import_style_props.isMarginTokenProp,
  marginY: import_style_props.isMarginTokenProp,
  padding: import_style_props.isPaddingTokenProp,
  paddingTop: import_style_props.isPaddingTokenProp,
  paddingRight: import_style_props.isPaddingTokenProp,
  paddingBottom: import_style_props.isPaddingTokenProp,
  paddingLeft: import_style_props.isPaddingTokenProp,
  paddingX: import_style_props.isPaddingTokenProp,
  paddingY: import_style_props.isPaddingTokenProp
};
