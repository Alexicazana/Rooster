var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import {
  createElement,
  forwardRef
} from "react";
import {useSpring, animated} from "@twilio-paste/animation-library";
import {css, styled} from "@twilio-paste/styling-library";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";
var AnimatedSkeleton = animated(Box);
var StyledAnimatedSkeleton = styled(AnimatedSkeleton)(() => css({
  background: `linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3) 40%, rgba(255, 255, 255, 0.3) 60%, transparent)`
}));
var animatedConfig = {
  loop: {delay: 700, reset: true},
  from: {translateX: "-100%", skew: "155deg"},
  to: {translateX: "100%", skew: "155deg"},
  config: {
    mass: 0.1,
    tension: 80,
    friction: 50
  }
};
var SkeletonLoader = forwardRef((_a, ref) => {
  var {
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderRadius = "borderRadius20",
    borderTopLeftRadius,
    borderTopRightRadius,
    element = "SKELETON_LOADER",
    display,
    height = "sizeIcon20",
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    size = null,
    width = null
  } = _a, props = __rest(_a, [
    "borderBottomLeftRadius",
    "borderBottomRightRadius",
    "borderRadius",
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "element",
    "display",
    "height",
    "maxHeight",
    "maxWidth",
    "minHeight",
    "minWidth",
    "size",
    "width"
  ]);
  const animatedSkeletonStyles = useSpring(animatedConfig);
  return /* @__PURE__ */ createElement(Box, __assign(__assign({}, safelySpreadBoxProps(props)), {
    "aria-busy": "true",
    backgroundColor: "colorBackgroundStrong",
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderRadius,
    borderTopLeftRadius,
    borderTopRightRadius,
    display,
    element,
    height,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    overflow: "hidden",
    pointerEvents: "none",
    position: "relative",
    userSelect: "none",
    size,
    width,
    ref
  }), /* @__PURE__ */ createElement(StyledAnimatedSkeleton, {
    bottom: 0,
    left: 0,
    position: "absolute",
    right: 0,
    top: 0,
    style: animatedSkeletonStyles
  }));
});
SkeletonLoader.displayName = "SkeletonLoader";
export {
  SkeletonLoader
};
