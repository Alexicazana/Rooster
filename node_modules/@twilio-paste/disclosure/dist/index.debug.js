var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  AnimatedDisclosureContent: () => AnimatedDisclosureContent,
  Disclosure: () => Disclosure,
  DisclosureContent: () => DisclosureContent,
  DisclosureHeading: () => DisclosureHeading,
  useDisclosureState: () => import_disclosure_primitive.useDisclosurePrimitiveState
});

// src/Disclosure.tsx
var React2 = __toModule(require("react"));
var import_disclosure_primitive = __toModule(require("@twilio-paste/disclosure-primitive"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_card = __toModule(require("@twilio-paste/card"));

// src/DisclosureContext.tsx
var React = __toModule(require("react"));
var DisclosureContext = React.createContext({});

// src/Disclosure.tsx
var Disclosure = React2.forwardRef((_a, ref) => {
  var {children, element = "DISCLOSURE", variant = "default", state} = _a, props = __rest(_a, ["children", "element", "variant", "state"]);
  const disclosure = state || import_disclosure_primitive.useDisclosurePrimitiveState(__assign({animated: true}, props));
  const disclosureContext = {
    disclosure,
    variant
  };
  if (variant === "contained") {
    return /* @__PURE__ */ React2.createElement(DisclosureContext.Provider, {
      value: disclosureContext
    }, /* @__PURE__ */ React2.createElement(import_card.Card, __assign(__assign({}, props), {
      variant,
      element,
      padding: "space0",
      ref
    }), children));
  }
  return /* @__PURE__ */ React2.createElement(DisclosureContext.Provider, {
    value: disclosureContext
  }, /* @__PURE__ */ React2.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    variant,
    element,
    ref
  }), children));
});
Disclosure.displayName = "Disclosure";
if (false) {
  Disclosure.propTypes = DisclosurePropTypes;
}

// src/DisclosureHeading.tsx
var React4 = __toModule(require("react"));
var import_theme = __toModule(require("@twilio-paste/theme"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var import_heading = __toModule(require("@twilio-paste/heading"));
var import_ChevronDisclosureExpandedIcon = __toModule(require("@twilio-paste/icons/cjs/ChevronDisclosureExpandedIcon"));
var import_disclosure_primitive2 = __toModule(require("@twilio-paste/disclosure-primitive"));

// src/utils.ts
var React3 = __toModule(require("react"));
var getIconHoverStyles = (isHovered, variant, ariaExpanded, ariaDisabled, space) => {
  if (!ariaDisabled) {
    let slideDistance = space.space20;
    if (variant === "heading40" || variant === "heading50" || variant === "heading60") {
      slideDistance = space.space10;
    }
    return {
      color: isHovered ? "colorText" : "colorTextIcon",
      transform: `${isHovered ? `translateX(${slideDistance})` : `translateX(0)`} ${ariaExpanded ? "rotate(0deg)" : "rotate(-90deg)"}`,
      transition: "transform 200ms ease-out"
    };
  }
  return {
    color: "colorTextIcon"
  };
};
var useHover = (elementRef) => {
  const [value, setValue] = React3.useState(false);
  const handleMouseOver = () => setValue(true);
  const handleMouseOut = () => setValue(false);
  React3.useEffect(() => {
    const node = elementRef == null ? void 0 : elementRef.current;
    if (node) {
      node.addEventListener("mouseover", handleMouseOver);
      node.addEventListener("mouseout", handleMouseOut);
      return () => {
        node.removeEventListener("mouseover", handleMouseOver);
        node.removeEventListener("mouseout", handleMouseOut);
      };
    }
  }, [elementRef]);
  return value;
};

// src/constants.ts
var IconSizeFromHeading = {
  heading10: "sizeIcon90",
  heading20: "sizeIcon70",
  heading30: "sizeIcon60",
  heading40: "sizeIcon40",
  heading50: "sizeIcon30",
  heading60: "sizeIcon20"
};

// src/DisclosureHeading.tsx
var StyledDisclosureHeading = React4.forwardRef((_a, ref) => {
  var {children, element, marginBottom, renderAs, disclosureVariant, customDisabled, customFocusable, variant} = _a, props = __rest(_a, ["children", "element", "marginBottom", "renderAs", "disclosureVariant", "customDisabled", "customFocusable", "variant"]);
  const theme = import_theme.useTheme();
  const hoverRef = React4.useRef(null);
  const isHovered = useHover(hoverRef);
  let bottomBorderRadius = "borderRadius20";
  if (disclosureVariant === "contained") {
    bottomBorderRadius = "borderRadius10";
  }
  if (disclosureVariant === "contained" && props["aria-expanded"]) {
    bottomBorderRadius = "borderRadius0";
  }
  return /* @__PURE__ */ React4.createElement(import_heading.Heading, {
    as: renderAs,
    marginBottom: "space0",
    variant,
    ref
  }, /* @__PURE__ */ React4.createElement(import_box2.Box, __assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    as: "div",
    backgroundColor: props["aria-expanded"] ? "colorBackground" : "colorBackgroundBody",
    borderRadius: disclosureVariant === "contained" ? "borderRadius10" : "borderRadius20",
    borderBottomLeftRadius: bottomBorderRadius,
    borderBottomRightRadius: bottomBorderRadius,
    cursor: "pointer",
    display: "flex",
    element,
    outline: "none",
    padding: "space30",
    position: "relative",
    ref: hoverRef,
    role: "button",
    zIndex: "zIndex10",
    transition: "background-color 100ms ease-out",
    _hover: {
      backgroundColor: "colorBackgroundStrong"
    },
    _focus: {
      boxShadow: "shadowFocus"
    },
    _disabled: {
      backgroundColor: props["aria-expanded"] ? "colorBackground" : "colorBackgroundBody",
      color: "colorTextWeak",
      cursor: "not-allowed"
    }
  }), /* @__PURE__ */ React4.createElement(import_box2.Box, __assign({
    as: "span",
    element: `${element}_ICON`,
    display: "flex",
    height: IconSizeFromHeading[variant] || "sizeIcon20",
    width: IconSizeFromHeading[variant] || "sizeIcon20"
  }, getIconHoverStyles(isHovered, variant, props[`aria-expanded`], props[`aria-disabled`], theme.space)), /* @__PURE__ */ React4.createElement(import_ChevronDisclosureExpandedIcon.ChevronDisclosureExpandedIcon, {
    color: "inherit",
    decorative: true,
    size: IconSizeFromHeading[variant] || "sizeIcon20"
  })), children));
});
StyledDisclosureHeading.displayName = "StyledDisclosureHeading";
var DisclosureHeading = (_a) => {
  var {
    children,
    as,
    element = "DISCLOSURE_HEADING",
    disabled,
    focusable
  } = _a, props = __rest(_a, [
    "children",
    "as",
    "element",
    "disabled",
    "focusable"
  ]);
  const {disclosure, variant} = React4.useContext(DisclosureContext);
  return /* @__PURE__ */ React4.createElement(import_disclosure_primitive2.DisclosurePrimitive, __assign(__assign(__assign({}, disclosure), props), {
    as: StyledDisclosureHeading,
    customDisabled: disabled,
    customFocusable: focusable,
    disabled,
    disclosureVariant: variant,
    element,
    focusable,
    renderAs: as
  }), children);
};
DisclosureHeading.displayName = "DisclosureHeading";
if (false) {
  DisclosureHeading.propTypes = HeadingPropTypes;
}

// src/DisclosureContent.tsx
var React5 = __toModule(require("react"));
var import_animation_library = __toModule(require("@twilio-paste/animation-library"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var import_disclosure_primitive3 = __toModule(require("@twilio-paste/disclosure-primitive"));
var AnimatedDisclosureContent = import_animation_library.animated(import_box3.Box);
var DisclosureContent = React5.forwardRef((_a, ref) => {
  var {children, element = "DISCLOSURE_CONTENT", visible} = _a, props = __rest(_a, ["children", "element", "visible"]);
  const {disclosure} = React5.useContext(DisclosureContext);
  const {opacity} = import_animation_library.useSpring({
    opacity: disclosure.visible ? 1 : 0,
    onRest: disclosure.stopAnimation,
    config: {
      mass: 1,
      tension: 150,
      friction: 20,
      duration: 100
    }
  });
  return /* @__PURE__ */ React5.createElement(import_disclosure_primitive3.DisclosurePrimitiveContent, __assign(__assign(__assign({}, disclosure), import_box3.safelySpreadBoxProps(props)), {
    as: AnimatedDisclosureContent,
    element,
    backgroundColor: "colorBackgroundBody",
    padding: "space50",
    ref,
    style: {
      opacity
    }
  }), children);
});
DisclosureContent.displayName = "DisclosureContent";
if (false) {
  DisclosureContent.propTypes = DisclosureContentPropTypes;
}
