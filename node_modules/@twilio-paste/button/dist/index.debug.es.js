var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS((exports, module) => {
  "use strict";
  var isMergeableObject = function isMergeableObject2(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value === "object";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol === "function" && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
  }
  function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key, options) {
    if (!options.customMerge) {
      return deepmerge;
    }
    var customMerge = options.customMerge(key);
    return typeof customMerge === "function" ? customMerge : deepmerge;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return target.propertyIsEnumerable(symbol);
    }) : [];
  }
  function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property) {
    try {
      return property in object;
    } catch (_) {
      return false;
    }
  }
  function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
  }
  function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) {
      getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
      });
    }
    getKeys(source).forEach(function(key) {
      if (propertyIsUnsafe(target, key)) {
        return;
      }
      if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
        destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
      } else {
        destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
      }
    });
    return destination;
  }
  function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
      return options.arrayMerge(target, source, options);
    } else {
      return mergeObject(target, source, options);
    }
  }
  deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) {
      throw new Error("first argument should be an array");
    }
    return array.reduce(function(prev, next) {
      return deepmerge(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge;
  module.exports = deepmerge_1;
});

// src/index.tsx
import {
  Children,
  Fragment,
  createElement as createElement13,
  forwardRef as forwardRef13,
  isValidElement,
  useMemo,
  useState
} from "react";
import {Box as Box13} from "@twilio-paste/box";
import {Spinner} from "@twilio-paste/spinner";
import {secureExternalLink} from "@twilio-paste/anchor";
import {useSpring, animated} from "@twilio-paste/animation-library";
import {ArrowForwardIcon} from "@twilio-paste/icons/esm/ArrowForwardIcon";
import {LinkExternalIcon} from "@twilio-paste/icons/esm/LinkExternalIcon";

// src/proptypes.ts
import {
  bool,
  oneOf,
  string
} from "prop-types";
var DirectButtonPropTypes = {
  as: string,
  fullWidth: bool,
  href: string,
  size: oneOf(["small", "default", "icon", "icon_small", "reset"]).isRequired,
  tabIndex: oneOf([0, -1]),
  type: oneOf(["submit", "button", "reset"]),
  disabled: bool,
  buttonState: oneOf(["disabled", "loading", "default"]).isRequired,
  variant: oneOf([
    "primary",
    "secondary",
    "destructive",
    "destructive_link",
    "destructive_secondary",
    "link",
    "inverse_link",
    "inverse",
    "reset",
    "primary_icon",
    "secondary_icon",
    "destructive_icon"
  ])
};
var ButtonPropTypes = {
  as: string,
  element: string,
  fullWidth: bool,
  href: string,
  size: oneOf(["small", "default", "icon", "icon_small", "reset"]),
  tabIndex: oneOf([0, -1]),
  type: oneOf(["submit", "button", "reset"]),
  disabled: bool,
  loading: bool,
  variant: oneOf([
    "primary",
    "secondary",
    "destructive",
    "destructive_link",
    "destructive_secondary",
    "link",
    "inverse_link",
    "inverse",
    "reset",
    "primary_icon",
    "secondary_icon",
    "destructive_icon"
  ]).isRequired
};

// src/PrimaryButton.tsx
import {
  createElement,
  forwardRef
} from "react";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";

// src/styles.ts
var merge = require_cjs();
var ResetStyles = {
  appearance: "none",
  background: "none",
  display: "inline-block",
  border: "none",
  outline: "none",
  transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in",
  fontFamily: "fontFamilyText",
  fontWeight: "fontWeightSemibold",
  textDecoration: "none",
  position: "relative",
  margin: "space0",
  _hover: {textDecoration: "none"},
  _focus: {textDecoration: "none", boxShadow: "shadowFocus"},
  _active: {textDecoration: "none"}
};
var BaseStyles = {
  default: merge(ResetStyles, {
    cursor: "pointer",
    _active: {boxShadow: "none"}
  }),
  disabled: merge(ResetStyles, {
    cursor: "not-allowed"
  }),
  loading: merge(ResetStyles, {
    cursor: "wait"
  })
};
var SizeStyles = {
  default: {
    paddingTop: "space30",
    paddingBottom: "space30",
    paddingLeft: "space40",
    paddingRight: "space40",
    borderRadius: "borderRadius20",
    fontSize: "fontSize30",
    lineHeight: "lineHeight20"
  },
  small: {
    paddingTop: "space20",
    paddingBottom: "space20",
    paddingLeft: "space30",
    paddingRight: "space30",
    borderRadius: "borderRadius10",
    fontSize: "fontSize30",
    lineHeight: "lineHeight20"
  },
  icon: {
    padding: "space30",
    borderRadius: "borderRadius20"
  },
  icon_small: {
    padding: "space20",
    borderRadius: "borderRadius20"
  },
  reset: {
    paddingTop: "space0",
    paddingRight: "space0",
    paddingBottom: "space0",
    paddingLeft: "space0",
    borderWidth: "borderWidth0"
  }
};

// src/PrimaryButton.tsx
var merge2 = require_cjs();
var defaultStyles = merge2(BaseStyles.default, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundPrimary",
  boxShadow: "shadowBorderPrimary",
  _hover: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStronger",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _focus: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStronger",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundPrimaryStrongest",
    boxShadow: "shadowBorderPrimaryStrongest"
  }
});
var loadingStyles = merge2(BaseStyles.loading, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundPrimaryStronger",
  boxShadow: "shadowBorderPrimaryStronger"
});
var disabledStyles = merge2(BaseStyles.disabled, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundPrimaryWeak",
  boxShadow: "shadowBorderPrimaryWeak"
});
var ButtonStyleMapping = {
  default: defaultStyles,
  loading: loadingStyles,
  disabled: disabledStyles
};
var PrimaryButton = forwardRef((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement(Box, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps(props)), ButtonStyleMapping[buttonState]), SizeStyles[size]));
});
PrimaryButton.defaultProps = {
  as: "button"
};
if (false) {
  PrimaryButton.propTypes = DirectButtonPropTypes;
}
PrimaryButton.displayName = "PrimaryButton";

// src/PrimaryIconButton.tsx
import {
  createElement as createElement2,
  forwardRef as forwardRef2
} from "react";
import {Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
var merge3 = require_cjs();
var defaultStyles2 = merge3(BaseStyles.default, {
  color: "colorTextLink",
  _hover: {
    color: "colorTextLinkStronger"
  },
  _focus: {
    color: "colorTextLinkStronger"
  },
  _active: {
    color: "colorTextLinkStrongest"
  }
});
var loadingStyles2 = merge3(BaseStyles.loading, {
  color: "colorTextLinkStronger"
});
var disabledStyles2 = merge3(BaseStyles.disabled, {
  color: "colorTextLinkWeak"
});
var ButtonStyleMapping2 = {
  default: defaultStyles2,
  loading: loadingStyles2,
  disabled: disabledStyles2
};
var PrimaryIconButton = forwardRef2((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps2(props)), ButtonStyleMapping2[buttonState]), SizeStyles[size]));
});
PrimaryIconButton.defaultProps = {
  as: "button"
};
if (false) {
  PrimaryIconButton.propTypes = DirectButtonPropTypes;
}
PrimaryIconButton.displayName = "PrimaryIconButton";

// src/SecondaryButton.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3
} from "react";
import {Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3} from "@twilio-paste/box";
var merge4 = require_cjs();
var defaultStyles3 = merge4(BaseStyles.default, {
  color: "colorText",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorder",
  _hover: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryStronger"
  },
  _focus: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextLinkStronger",
    backgroundColor: "colorBackgroundPrimaryWeaker",
    boxShadow: "shadowBorderPrimaryStronger"
  }
});
var baseLoadingStyles = {
  color: "colorTextLinkStronger",
  backgroundColor: "colorBackgroundPrimaryWeaker",
  boxShadow: "shadowBorderPrimaryWeaker"
};
var loadingStyles3 = merge4(BaseStyles.loading, __assign(__assign({}, baseLoadingStyles), {
  _hover: baseLoadingStyles,
  _active: baseLoadingStyles,
  _focus: baseLoadingStyles
}));
var baseDisabledStyles = {
  color: "colorTextWeaker",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderWeak"
};
var disabledStyles3 = merge4(BaseStyles.disabled, __assign(__assign({}, baseDisabledStyles), {
  _hover: baseDisabledStyles,
  _active: baseDisabledStyles,
  _focus: baseDisabledStyles
}));
var ButtonStyleMapping3 = {
  default: defaultStyles3,
  loading: loadingStyles3,
  disabled: disabledStyles3
};
var SecondaryButton = forwardRef3((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement3(Box3, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps3(props)), ButtonStyleMapping3[buttonState]), SizeStyles[size]));
});
SecondaryButton.defaultProps = {
  as: "button"
};
if (false) {
  SecondaryButton.propTypes = DirectButtonPropTypes;
}
SecondaryButton.displayName = "SecondaryButton";

// src/SecondaryIconButton.tsx
import {
  createElement as createElement4,
  forwardRef as forwardRef4
} from "react";
import {Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4} from "@twilio-paste/box";
var merge5 = require_cjs();
var defaultStyles4 = merge5(BaseStyles.default, {
  color: "colorTextIcon",
  _hover: {
    color: "colorText"
  },
  _focus: {
    color: "colorText"
  },
  _active: {
    color: "colorText"
  }
});
var loadingStyles4 = merge5(BaseStyles.loading, {
  color: "colorText"
});
var disabledStyles4 = merge5(BaseStyles.disabled, {
  color: "colorTextWeaker"
});
var ButtonStyleMapping4 = {
  default: defaultStyles4,
  loading: loadingStyles4,
  disabled: disabledStyles4
};
var SecondaryIconButton = forwardRef4((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement4(Box4, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps4(props)), ButtonStyleMapping4[buttonState]), SizeStyles[size]));
});
SecondaryIconButton.defaultProps = {
  as: "button"
};
if (false) {
  SecondaryIconButton.propTypes = DirectButtonPropTypes;
}
SecondaryIconButton.displayName = "SecondaryIconButton";

// src/DestructiveButton.tsx
import {
  createElement as createElement5,
  forwardRef as forwardRef5
} from "react";
import {Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps5} from "@twilio-paste/box";
var merge6 = require_cjs();
var defaultStyles5 = merge6(BaseStyles.default, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundDestructive",
  boxShadow: "shadowBorderDestructive",
  _hover: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStronger",
    boxShadow: "shadowBorderDestructiveStronger"
  },
  _focus: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStronger",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextWeakest",
    backgroundColor: "colorBackgroundDestructiveStrongest",
    boxShadow: "shadowBorderDestructiveStrongest"
  }
});
var loadingStyles5 = merge6(BaseStyles.loading, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundDestructiveStronger",
  boxShadow: "shadowBorderDestructiveStronger"
});
var disabledStyles5 = merge6(BaseStyles.disabled, {
  color: "colorTextWeakest",
  backgroundColor: "colorBackgroundDestructiveWeak",
  boxShadow: "shadowBorderDestructiveWeak"
});
var ButtonStyleMapping5 = {
  default: defaultStyles5,
  loading: loadingStyles5,
  disabled: disabledStyles5
};
var DestructiveButton = forwardRef5((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement5(Box5, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps5(props)), ButtonStyleMapping5[buttonState]), SizeStyles[size]));
});
DestructiveButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveButton.propTypes = DirectButtonPropTypes;
}
DestructiveButton.displayName = "DestructiveButton";

// src/DestructiveIconButton.tsx
import {
  createElement as createElement6,
  forwardRef as forwardRef6
} from "react";
import {Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps6} from "@twilio-paste/box";
var merge7 = require_cjs();
var defaultStyles6 = merge7(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  _hover: {
    color: "colorTextLinkDestructiveStronger"
  },
  _focus: {
    color: "colorTextLinkDestructiveStronger"
  },
  _active: {
    color: "colorTextLinkDestructiveStrongest"
  }
});
var loadingStyles6 = merge7(BaseStyles.loading, {
  color: "colorTextLinkDestructiveStronger"
});
var disabledStyles6 = merge7(BaseStyles.disabled, {
  color: "colorTextLinkDestructiveWeak"
});
var ButtonStyleMapping6 = {
  default: defaultStyles6,
  loading: loadingStyles6,
  disabled: disabledStyles6
};
var DestructiveIconButton = forwardRef6((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement6(Box6, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps6(props)), ButtonStyleMapping6[buttonState]), SizeStyles[size]));
});
DestructiveIconButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveIconButton.propTypes = DirectButtonPropTypes;
}
DestructiveIconButton.displayName = "DestructiveIconButton";

// src/DestructiveLinkButton.tsx
import {
  createElement as createElement7,
  forwardRef as forwardRef7
} from "react";
import {Box as Box7, safelySpreadBoxProps as safelySpreadBoxProps7} from "@twilio-paste/box";
var merge8 = require_cjs();
var defaultStyles7 = merge8(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  textAlign: "left",
  transition: "none",
  _hover: {color: "colorTextLinkDestructiveStronger", textDecoration: "underline"},
  _active: {color: "colorTextLinkDestructiveStronger", textDecoration: "underline"},
  _focus: {color: "colorTextLinkDestructiveStronger", textDecoration: "underline"}
});
var loadingStyles7 = merge8(BaseStyles.loading, {
  color: "colorTextLinkDestructiveStronger",
  textAlign: "left",
  _hover: {color: "colorTextLinkDestructiveStronger"},
  _active: {color: "colorTextLinkDestructiveStronger"},
  _focus: {color: "colorTextLinkDestructiveStronger"}
});
var disabledStyles7 = merge8(BaseStyles.disabled, {
  color: "colorTextLinkDestructiveWeak",
  textAlign: "left",
  _hover: {color: "colorTextLinkDestructiveWeak"},
  _active: {color: "colorTextLinkDestructiveWeak"},
  _focus: {color: "colorTextLinkDestructiveWeak"}
});
var ButtonStyleMapping7 = {
  default: defaultStyles7,
  loading: loadingStyles7,
  disabled: disabledStyles7
};
var DestructiveLinkButton = forwardRef7((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement7(Box7, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps7(props)), ButtonStyleMapping7[buttonState]), SizeStyles[size]));
});
DestructiveLinkButton.defaultProps = {
  as: "a"
};
if (false) {
  DestructiveLinkButton.propTypes = DirectButtonPropTypes;
}
DestructiveLinkButton.displayName = "DestructiveLinkButton";

// src/DestructiveSecondaryButton.tsx
import {
  createElement as createElement8,
  forwardRef as forwardRef8
} from "react";
import {Box as Box8, safelySpreadBoxProps as safelySpreadBoxProps8} from "@twilio-paste/box";
var merge9 = require_cjs();
var defaultStyles8 = merge9(BaseStyles.default, {
  color: "colorTextLinkDestructive",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderDestructive",
  _hover: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeakest",
    boxShadow: "shadowBorderDestructiveStronger"
  },
  _focus: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeakest",
    boxShadow: "shadowFocus"
  },
  _active: {
    color: "colorTextLinkDestructiveStronger",
    backgroundColor: "colorBackgroundDestructiveWeaker",
    boxShadow: "shadowBorderDestructiveStronger"
  }
});
var baseLoadingStyles2 = {
  color: "colorTextLinkDestructiveStronger",
  backgroundColor: "colorBackgroundDestructiveWeaker",
  boxShadow: "shadowBorderDestructiveWeaker"
};
var loadingStyles8 = merge9(BaseStyles.loading, __assign(__assign({}, baseLoadingStyles2), {
  _hover: baseLoadingStyles2,
  _active: baseLoadingStyles2,
  _focus: baseLoadingStyles2
}));
var baseDisabledStyles2 = {
  color: "colorTextLinkDestructiveWeak",
  backgroundColor: "colorBackgroundBody",
  boxShadow: "shadowBorderDestructiveWeak"
};
var disabledStyles8 = merge9(BaseStyles.disabled, __assign(__assign({}, baseDisabledStyles2), {
  _hover: baseDisabledStyles2,
  _active: baseDisabledStyles2,
  _focus: baseDisabledStyles2
}));
var ButtonStyleMapping8 = {
  default: defaultStyles8,
  loading: loadingStyles8,
  disabled: disabledStyles8
};
var DestructiveSecondaryButton = forwardRef8((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement8(Box8, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps8(props)), ButtonStyleMapping8[buttonState]), SizeStyles[size]));
});
DestructiveSecondaryButton.defaultProps = {
  as: "button"
};
if (false) {
  DestructiveSecondaryButton.propTypes = DirectButtonPropTypes;
}
DestructiveSecondaryButton.displayName = "DestructiveSecondaryButton";

// src/LinkButton.tsx
import {
  createElement as createElement9,
  forwardRef as forwardRef9
} from "react";
import {Box as Box9, safelySpreadBoxProps as safelySpreadBoxProps9} from "@twilio-paste/box";
var merge10 = require_cjs();
var defaultStyles9 = merge10(BaseStyles.default, {
  color: "colorTextLink",
  textAlign: "left",
  transition: "none",
  _hover: {color: "colorTextLinkStronger", textDecoration: "underline"},
  _focus: {color: "colorTextLinkStronger", textDecoration: "underline"},
  _active: {color: "colorTextLinkStronger", textDecoration: "underline"}
});
var loadingStyles9 = merge10(BaseStyles.loading, {
  color: "colorTextLinkStronger",
  textAlign: "left"
});
var disabledStyles9 = merge10(BaseStyles.disabled, {
  color: "colorTextLinkWeak",
  textAlign: "left"
});
var ButtonStyleMapping9 = {
  default: defaultStyles9,
  loading: loadingStyles9,
  disabled: disabledStyles9
};
var LinkButton = forwardRef9((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement9(Box9, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps9(props)), ButtonStyleMapping9[buttonState]), SizeStyles[size]));
});
LinkButton.defaultProps = {
  as: "a"
};
if (false) {
  LinkButton.propTypes = DirectButtonPropTypes;
}
LinkButton.displayName = "LinkButton";

// src/InverseButton.tsx
import {
  createElement as createElement10,
  forwardRef as forwardRef10
} from "react";
import {Box as Box10, safelySpreadBoxProps as safelySpreadBoxProps10} from "@twilio-paste/box";
var merge11 = require_cjs();
var defaultStyles10 = merge11(BaseStyles.default, {
  color: "colorTextInverse",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverse",
  boxShadow: "shadowBorderInverse",
  _hover: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowBorderInverseStrongest"
  },
  _focus: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowFocusInverse"
  },
  _active: {
    color: "colorTextInverse",
    fontWeight: "fontWeightSemibold",
    backgroundColor: "colorBackgroundInverseStrong",
    boxShadow: "shadowBorderInverseStrongest"
  }
});
var loadingStyles10 = merge11(BaseStyles.loading, {
  color: "colorTextInverse",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverseStrong",
  boxShadow: "shadowBorderInverseWeaker"
});
var disabledStyles10 = merge11(BaseStyles.disabled, {
  color: "colorTextInverseWeaker",
  fontWeight: "fontWeightSemibold",
  backgroundColor: "colorBackgroundInverse",
  boxShadow: "shadowBorderInverseWeaker"
});
var ButtonStyleMapping10 = {
  default: defaultStyles10,
  loading: loadingStyles10,
  disabled: disabledStyles10
};
var InverseButton = forwardRef10((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement10(Box10, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps10(props)), ButtonStyleMapping10[buttonState]), SizeStyles[size]));
});
InverseButton.defaultProps = {
  as: "button"
};
if (false) {
  InverseButton.propTypes = DirectButtonPropTypes;
}
InverseButton.displayName = "InverseButton";

// src/InverseLinkButton.tsx
import {
  createElement as createElement11,
  forwardRef as forwardRef11
} from "react";
import {Box as Box11, safelySpreadBoxProps as safelySpreadBoxProps11} from "@twilio-paste/box";
var merge12 = require_cjs();
var defaultStyles11 = merge12(BaseStyles.default, {
  color: "colorTextInverse",
  textAlign: "left",
  transition: "none",
  _hover: {color: "colorTextInverseWeaker", textDecoration: "underline"},
  _focus: {color: "colorTextInverseWeaker", boxShadow: "shadowFocusInverse", textDecoration: "underline"},
  _active: {textDecoration: "underline"}
});
var loadingStyles11 = merge12(BaseStyles.loading, {
  color: "colorTextInverse",
  textAlign: "left"
});
var disabledStyles11 = merge12(BaseStyles.disabled, {
  color: "colorTextInverseWeaker",
  textAlign: "left"
});
var ButtonStyleMapping11 = {
  default: defaultStyles11,
  loading: loadingStyles11,
  disabled: disabledStyles11
};
var InverseLinkButton = forwardRef11((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement11(Box11, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps11(props)), ButtonStyleMapping11[buttonState]), SizeStyles[size]));
});
InverseLinkButton.defaultProps = {
  as: "a"
};
if (false) {
  InverseLinkButton.propTypes = DirectButtonPropTypes;
}
InverseLinkButton.displayName = "InverseLinkButton";

// src/ResetButton.tsx
import {
  createElement as createElement12,
  forwardRef as forwardRef12
} from "react";
import {Box as Box12, safelySpreadBoxProps as safelySpreadBoxProps12} from "@twilio-paste/box";
var merge13 = require_cjs();
var defaultStyles12 = merge13(BaseStyles.default, {
  fontSize: "inherit",
  fontWeight: "inherit",
  color: "inherit"
});
var loadingStyles12 = merge13(BaseStyles.loading, {fontSize: "inherit", fontWeight: "inherit"});
var disabledStyles12 = merge13(BaseStyles.disabled, {fontSize: "inherit", fontWeight: "inherit"});
var ButtonStyleMapping12 = {
  default: defaultStyles12,
  loading: loadingStyles12,
  disabled: disabledStyles12
};
var ResetButton = forwardRef12((_a, ref) => {
  var {size, buttonState, fullWidth} = _a, props = __rest(_a, ["size", "buttonState", "fullWidth"]);
  return /* @__PURE__ */ createElement12(Box12, __assign(__assign(__assign({
    ref,
    width: fullWidth ? "100%" : "auto"
  }, safelySpreadBoxProps12(props)), ButtonStyleMapping12[buttonState]), SizeStyles[size]));
});
ResetButton.defaultProps = {
  as: "button"
};
if (false) {
  ResetButton.propTypes = DirectButtonPropTypes;
}
ResetButton.displayName = "ResetButton";

// src/index.tsx
var AnimatedBox = animated(Box13);
var getButtonSize = (variant, children, size) => {
  let smartSize = "default";
  if (size != null) {
    smartSize = size;
  } else if (variant === "link" || variant === "destructive_link" || variant === "reset") {
    smartSize = "reset";
  } else if (Children.count(children) === 1) {
    Children.forEach(children, (child) => {
      if (isValidElement(child)) {
        if (typeof child.type.displayName === "string" && child.type.displayName.includes("Icon")) {
          smartSize = "icon";
        }
      }
    });
  }
  return smartSize;
};
var getButtonState = (disabled, loading) => {
  if (disabled) {
    return "disabled";
  }
  if (loading) {
    return "loading";
  }
  return "default";
};
var handlePropValidation = ({
  as,
  href,
  tabIndex,
  variant,
  size,
  fullWidth,
  children,
  disabled,
  loading
}) => {
  const hasHref = href != null && href !== "";
  const hasTabIndex = tabIndex != null;
  if (as !== "a" && hasHref) {
    throw new Error(`[Paste: Button] You cannot pass href into a button without the 'a' tag.  Use 'as="a"'.`);
  }
  if (as === "a") {
    if (!hasHref) {
      throw new Error(`[Paste: Button] Missing href prop for link button.`);
    }
    if (variant === "link" || variant === "inverse_link") {
      throw new Error(`[Paste: Button] Using Button component as an Anchor. Use the Paste Anchor component instead.`);
    }
    if (variant !== "primary" && variant !== "secondary" && variant !== "reset") {
      throw new Error(`[Paste: Button] <Button as="a"> only works with the following variants: primary or secondary.`);
    }
    if (disabled || loading) {
      throw new Error(`[Paste: Button] <Button as="a"> cannot be disabled or loading.`);
    }
  }
  if (variant === "reset" && size !== "reset") {
    throw new Error('[Paste: Button] The "RESET" variant can only be used with the "RESET" size.');
  }
  if ((size === "icon" || size === "icon_small") && fullWidth) {
    throw new Error("[Paste: Button] Icon buttons should not be fullWidth.");
  }
  if (children == null) {
    throw new Error(`[Paste: Button] Must have non-null children.`);
  }
  if (hasTabIndex && !(tabIndex === 0 || tabIndex === -1)) {
    throw new Error(`[Paste: Button] tabIndex must be 0 or -1.`);
  }
};
var variantsWithoutBoundingBox = new Set(["link", "destructive_link", "inverse_link", "reset"]);
var ButtonContents = ({buttonState, children, showLoading, variant}) => {
  const buttonVariantHasBoundingBox = variant && variantsWithoutBoundingBox.has(variant);
  return /* @__PURE__ */ createElement13(Fragment, null, /* @__PURE__ */ createElement13(Box13, {
    as: "span",
    display: "flex",
    textDecoration: "inherit",
    opacity: buttonState === "loading" ? "0" : "1",
    "aria-hidden": buttonState === "loading" ? "true" : "false",
    justifyContent: buttonVariantHasBoundingBox ? null : "center",
    columnGap: "space20",
    alignItems: "center"
  }, children), showLoading ? /* @__PURE__ */ createElement13(Box13, {
    as: "span",
    position: "absolute",
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    lineHeight: "lineHeight30"
  }, /* @__PURE__ */ createElement13(Spinner, {
    decorative: false,
    title: "Loading, please wait.",
    delay: 0
  })) : null);
};
var getButtonComponent = (variant) => {
  switch (variant) {
    case "primary_icon":
      return PrimaryIconButton;
    case "secondary":
      return SecondaryButton;
    case "secondary_icon":
      return SecondaryIconButton;
    case "destructive":
      return DestructiveButton;
    case "destructive_icon":
      return DestructiveIconButton;
    case "destructive_secondary":
      return DestructiveSecondaryButton;
    case "link":
      return LinkButton;
    case "destructive_link":
      return DestructiveLinkButton;
    case "reset":
      return ResetButton;
    case "inverse":
      return InverseButton;
    case "inverse_link":
      return InverseLinkButton;
    case "primary":
    default:
      return PrimaryButton;
  }
};
var Button = forwardRef13((_a, ref) => {
  var {element = "BUTTON"} = _a, props = __rest(_a, ["element"]);
  const {size, variant, children, disabled, loading} = props, rest = __rest(props, ["size", "variant", "children", "disabled", "loading"]);
  const [hovered, setHovered] = useState(false);
  const arrowIconStyles = useSpring({
    translateX: hovered ? "4px" : "0px",
    config: {
      mass: 0.1,
      tension: 275,
      friction: 16
    }
  });
  const smartDefaultSize = useMemo(() => {
    return getButtonSize(variant, children, size);
  }, [size, variant, children]);
  handlePropValidation(__assign(__assign({}, props), {size: smartDefaultSize}));
  const buttonState = getButtonState(disabled, loading);
  const showLoading = buttonState === "loading";
  const showDisabled = buttonState !== "default";
  const ButtonComponent = getButtonComponent(variant);
  const externalLinkProps = props.href != null ? secureExternalLink(props.href) : null;
  let injectIconChildren = children;
  if (props.as === "a" && props.href != null && typeof children === "string" && variant !== "reset") {
    injectIconChildren = /* @__PURE__ */ createElement13(Fragment, null, children, externalLinkProps != null ? /* @__PURE__ */ createElement13(LinkExternalIcon, {
      decorative: false,
      title: "link takes you to an external page"
    }) : /* @__PURE__ */ createElement13(AnimatedBox, {
      style: arrowIconStyles
    }, /* @__PURE__ */ createElement13(ArrowForwardIcon, {
      decorative: true
    })));
  }
  return /* @__PURE__ */ createElement13(ButtonComponent, __assign(__assign(__assign({}, externalLinkProps), rest), {
    onMouseEnter: (event) => {
      if (typeof rest.onMouseEnter === "function") {
        rest.onMouseEnter(event);
      }
      setHovered(true);
    },
    onMouseLeave: (event) => {
      if (typeof rest.onMouseLeave === "function") {
        rest.onMouseLeave(event);
      }
      setHovered(false);
    },
    buttonState,
    disabled: showDisabled,
    element,
    variant,
    size: smartDefaultSize,
    "aria-busy": buttonState === "loading" ? "true" : "false",
    className: void 0,
    style: void 0,
    ref
  }), /* @__PURE__ */ createElement13(ButtonContents, {
    buttonState,
    showLoading,
    variant
  }, injectIconChildren));
});
Button.defaultProps = {
  as: "button",
  fullWidth: false,
  disabled: false,
  loading: false,
  type: "button",
  variant: "primary"
};
Button.propTypes = ButtonPropTypes;
Button.displayName = "Button";
export {
  Button
};
