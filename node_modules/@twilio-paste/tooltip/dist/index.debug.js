var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Tooltip: () => Tooltip,
  useTooltipState: () => import_tooltip_primitive2.useTooltipPrimitiveState
});
var React2 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_theme2 = __toModule(require("@twilio-paste/theme"));
var import_text = __toModule(require("@twilio-paste/text"));
var import_tooltip_primitive2 = __toModule(require("@twilio-paste/tooltip-primitive"));

// src/TooltipArrow.tsx
var React = __toModule(require("react"));
var import_tooltip_primitive = __toModule(require("@twilio-paste/tooltip-primitive"));
var import_theme = __toModule(require("@twilio-paste/theme"));
var TooltipArrow = (props) => {
  const theme = import_theme.useTheme();
  return /* @__PURE__ */ React.createElement(import_tooltip_primitive.TooltipPrimitiveArrow, __assign(__assign({}, props), {
    size: theme.fontSizes.fontSize50,
    stroke: theme.borderColors.colorBorderStrong,
    fill: theme.backgroundColors.colorBackgroundBodyInverse
  }));
};
TooltipArrow.displayName = "TooltipArrow";

// src/index.tsx
var StyledTooltip = React2.forwardRef((_a, ref) => {
  var {style, element: element2} = _a, props = __rest(_a, ["style", "element"]);
  return /* @__PURE__ */ React2.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    backgroundColor: "colorBackgroundBodyInverse",
    borderColor: "colorBorderStrong",
    borderRadius: "borderRadius20",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    boxShadow: "shadow",
    element: element2,
    maxWidth: "size30",
    padding: "space30",
    paddingBottom: "space20",
    paddingTop: "space20",
    zIndex: "zIndex90",
    _focus: {outline: "none"},
    style,
    ref
  }));
});
StyledTooltip.displayName = "StyledTooltip";
var Tooltip = React2.forwardRef((_a, ref) => {
  var {baseId, children, element: element2 = "TOOLTIP", state, text} = _a, props = __rest(_a, ["baseId", "children", "element", "state", "text"]);
  const tooltip = state || import_tooltip_primitive2.useTooltipPrimitiveState(__assign({baseId: `paste-tooltip-${import_uid_library.useUID()}`}, props));
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, React2.Children.only(/* @__PURE__ */ React2.createElement(import_tooltip_primitive2.TooltipPrimitiveReference, __assign(__assign(__assign({}, tooltip), {
    ref
  }), children.props), (referenceProps) => React2.cloneElement(children, referenceProps))), /* @__PURE__ */ React2.createElement(import_tooltip_primitive2.TooltipPrimitive, __assign(__assign(__assign({
    element: element2
  }, tooltip), props), {
    as: StyledTooltip
  }), /* @__PURE__ */ React2.createElement(import_theme2.StyledBase, null, /* @__PURE__ */ React2.createElement(TooltipArrow, __assign({}, tooltip)), /* @__PURE__ */ React2.createElement(import_text.Text, {
    element: `${element2}_TEXT`,
    as: "span",
    color: "colorTextInverse"
  }, text))));
});
if (false) {
  Tooltip.propTypes = {
    children: PropTypes.element.isRequired,
    text: PropTypes.string.isRequired,
    element: PropTypes.string
  };
}
Tooltip.displayName = "Tooltip";
