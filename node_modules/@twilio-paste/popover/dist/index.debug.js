var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Popover: () => Popover,
  PopoverBadgeButton: () => PopoverBadgeButton,
  PopoverButton: () => PopoverButton,
  PopoverContainer: () => PopoverContainer,
  usePopoverState: () => import_non_modal_dialog_primitive.useNonModalDialogPrimitiveState
});

// src/PopoverContainer.tsx
var React2 = __toModule(require("react"));
var import_non_modal_dialog_primitive = __toModule(require("@twilio-paste/non-modal-dialog-primitive"));

// src/PopoverContext.tsx
var React = __toModule(require("react"));
var PopoverContext = React.createContext({});

// src/PopoverContainer.tsx
var BasePopoverContainer = (_a) => {
  var {
    children,
    gutter,
    placement,
    state
  } = _a, initialState = __rest(_a, [
    "children",
    "gutter",
    "placement",
    "state"
  ]);
  const popover = state || import_non_modal_dialog_primitive.useNonModalDialogPrimitiveState(__assign({gutter, modal: true, placement}, initialState));
  return /* @__PURE__ */ React2.createElement(PopoverContext.Provider, {
    value: popover
  }, children);
};
BasePopoverContainer.displayName = "BasePopoverContainer";
var PopoverContainer = React2.memo(BasePopoverContainer);
PopoverContainer.displayName = "PopoverContainer";

// src/Popover.tsx
var React4 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_button = __toModule(require("@twilio-paste/button"));
var import_CloseIcon = __toModule(require("@twilio-paste/icons/cjs/CloseIcon"));
var import_theme2 = __toModule(require("@twilio-paste/theme"));
var import_non_modal_dialog_primitive3 = __toModule(require("@twilio-paste/non-modal-dialog-primitive"));

// src/PopoverArrow.tsx
var React3 = __toModule(require("react"));
var import_non_modal_dialog_primitive2 = __toModule(require("@twilio-paste/non-modal-dialog-primitive"));
var import_theme = __toModule(require("@twilio-paste/theme"));
var PopoverArrow = (props) => {
  const theme = import_theme.useTheme();
  return /* @__PURE__ */ React3.createElement(import_non_modal_dialog_primitive2.NonModalDialogArrowPrimitive, __assign(__assign({}, props), {
    size: theme.fontSizes.fontSize70,
    stroke: theme.borderColors.colorBorderWeaker,
    fill: theme.backgroundColors.colorBackgroundBody
  }));
};
PopoverArrow.displayName = "PopoverArrow";

// src/Popover.tsx
var StyledPopover = React4.forwardRef((_a, ref) => {
  var {style} = _a, props = __rest(_a, ["style"]);
  return /* @__PURE__ */ React4.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    backgroundColor: "colorBackgroundBody",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    borderColor: "colorBorderWeaker",
    borderRadius: "borderRadius20",
    boxShadow: "shadowCard",
    maxWidth: "size30",
    zIndex: "zIndex80",
    _focus: {outline: "none"},
    style,
    ref
  }));
});
StyledPopover.displayName = "StyledPopover";
var Popover = React4.forwardRef((_a, ref) => {
  var {children, element = "POPOVER"} = _a, props = __rest(_a, ["children", "element"]);
  const popover = React4.useContext(PopoverContext);
  return /* @__PURE__ */ React4.createElement(import_non_modal_dialog_primitive3.NonModalDialogPrimitive, __assign(__assign(__assign({}, popover), props), {
    as: StyledPopover,
    ref,
    preventBodyScroll: false
  }), /* @__PURE__ */ React4.createElement(import_theme2.StyledBase, null, /* @__PURE__ */ React4.createElement(PopoverArrow, __assign({}, popover)), /* @__PURE__ */ React4.createElement(import_box.Box, {
    element,
    paddingX: "space80",
    paddingY: "space70"
  }, /* @__PURE__ */ React4.createElement(import_box.Box, {
    position: "absolute",
    right: 8,
    top: 8
  }, /* @__PURE__ */ React4.createElement(import_button.Button, {
    element: `${element}_CLOSE_BUTTON`,
    variant: "secondary_icon",
    size: "reset",
    onClick: popover.hide
  }, /* @__PURE__ */ React4.createElement(import_CloseIcon.CloseIcon, {
    element: `${element}_CLOSE_ICON`,
    decorative: false,
    color: "colorTextWeak",
    size: "sizeIcon10",
    title: "Close popover"
  }))), children)));
});
Popover.propTypes = {
  "aria-label": PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  element: PropTypes.string
};
Popover.displayName = "Popover";

// src/PopoverButton.tsx
var React5 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_button2 = __toModule(require("@twilio-paste/button"));
var import_non_modal_dialog_primitive4 = __toModule(require("@twilio-paste/non-modal-dialog-primitive"));
var PopoverButton = React5.forwardRef((_a, ref) => {
  var {children, element = "POPOVER_BUTTON"} = _a, popoverButtonProps = __rest(_a, ["children", "element"]);
  const popover = React5.useContext(PopoverContext);
  return /* @__PURE__ */ React5.createElement(import_non_modal_dialog_primitive4.NonModalDialogDisclosurePrimitive, __assign(__assign(__assign({
    element
  }, popover), popoverButtonProps), {
    as: import_button2.Button,
    ref
  }), children);
});
PopoverButton.propTypes = {
  id: PropTypes2.string,
  children: PropTypes2.node.isRequired,
  toggle: PropTypes2.func,
  element: PropTypes2.string
};
PopoverButton.displayName = "PopoverButton";

// src/PopoverBadgeButton.tsx
var React6 = __toModule(require("react"));
var PropTypes3 = __toModule(require("prop-types"));
var import_badge = __toModule(require("@twilio-paste/badge"));
var import_non_modal_dialog_primitive5 = __toModule(require("@twilio-paste/non-modal-dialog-primitive"));
var ButtonBadge = React6.forwardRef((_a, ref) => {
  var {children} = _a, props = __rest(_a, ["children"]);
  return /* @__PURE__ */ React6.createElement(import_badge.Badge, __assign(__assign({}, props), {
    as: "button",
    ref
  }), children);
});
var PopoverBadgeButton = React6.forwardRef((_a, ref) => {
  var {children, element = "POPOVER_BADGE"} = _a, popoverButtonProps = __rest(_a, ["children", "element"]);
  const popover = React6.useContext(PopoverContext);
  return /* @__PURE__ */ React6.createElement(import_non_modal_dialog_primitive5.NonModalDialogDisclosurePrimitive, __assign(__assign(__assign({
    element
  }, popover), popoverButtonProps), {
    as: ButtonBadge,
    ref
  }), children);
});
PopoverBadgeButton.propTypes = {
  id: PropTypes3.string,
  toggle: PropTypes3.func,
  element: PropTypes3.string
};
PopoverBadgeButton.displayName = "PopoverBadgeButton";
