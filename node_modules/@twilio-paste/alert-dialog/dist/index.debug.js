var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  AlertDialog: () => AlertDialog
});
var React4 = __toModule(require("react"));
var PropTypes4 = __toModule(require("prop-types"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_animation_library = __toModule(require("@twilio-paste/animation-library"));
var import_box4 = __toModule(require("@twilio-paste/box"));
var import_modal5 = __toModule(require("@twilio-paste/modal"));

// src/AlertDialogHeader.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_heading = __toModule(require("@twilio-paste/heading"));
var import_modal = __toModule(require("@twilio-paste/modal"));
var AlertDialogHeader = React.forwardRef((_a, ref) => {
  var {children, element = "ALERT_DIALOG_HEADER", headingID} = _a, props = __rest(_a, ["children", "element", "headingID"]);
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign(__assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    as: "header"
  }), import_modal.modalHeaderStyles), {
    border: "none",
    element: `${element}_WRAPPER`,
    paddingBottom: "space0",
    ref
  }), /* @__PURE__ */ React.createElement(import_heading.Heading, {
    as: "h3",
    element,
    marginBottom: "space0",
    variant: "heading30",
    id: headingID
  }, children));
});
AlertDialogHeader.displayName = "AlertDialogHeader";
AlertDialogHeader.propTypes = {
  children: PropTypes.string.isRequired,
  headingID: PropTypes.string.isRequired,
  element: PropTypes.string
};

// src/AlertDialogBody.tsx
var React2 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var import_modal2 = __toModule(require("@twilio-paste/modal"));
var AlertDialogBody = React2.forwardRef((_a, ref) => {
  var {bodyID, children, element = "ALERT_DIALOG_BODY"} = _a, props = __rest(_a, ["bodyID", "children", "element"]);
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __assign(__assign(__assign(__assign({}, import_box2.safelySpreadBoxProps(props)), {
    as: "div"
  }), import_modal2.modalBodyStyles), {
    element,
    id: bodyID,
    ref
  }), children);
});
AlertDialogBody.displayName = "AlertDialogBody";
AlertDialogBody.propTypes = {
  bodyID: PropTypes2.string.isRequired,
  children: PropTypes2.node.isRequired,
  element: PropTypes2.string
};

// src/AlertDialogContent.tsx
var import_styling_library = __toModule(require("@twilio-paste/styling-library"));
var import_modal3 = __toModule(require("@twilio-paste/modal"));
var AlertDialogContent = import_styling_library.styled(import_modal3.ModalDialogContent)(() => import_styling_library.css({
  maxWidth: "size40"
}));
AlertDialogContent.displayName = "AlertDialogContent";

// src/AlertDialogFooter.tsx
var React3 = __toModule(require("react"));
var PropTypes3 = __toModule(require("prop-types"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var import_button = __toModule(require("@twilio-paste/button"));
var import_stack = __toModule(require("@twilio-paste/stack"));
var import_modal4 = __toModule(require("@twilio-paste/modal"));
var AlertDialogFooter = React3.forwardRef((_a, ref) => {
  var {destructive, element = "ALERT_DIALOG_FOOTER", onConfirm, onConfirmLabel, onDismiss, onDismissLabel} = _a, props = __rest(_a, ["destructive", "element", "onConfirm", "onConfirmLabel", "onDismiss", "onDismissLabel"]);
  const primaryVariant = destructive ? "destructive" : "primary";
  return /* @__PURE__ */ React3.createElement(import_box3.Box, __assign(__assign(__assign(__assign({}, import_box3.safelySpreadBoxProps(props)), {
    as: "footer"
  }), import_modal4.modalFooterStyles), {
    border: "none",
    element,
    justifyContent: "flex-end",
    paddingTop: "space0",
    ref
  }), /* @__PURE__ */ React3.createElement(import_stack.Stack, {
    orientation: "horizontal",
    spacing: "space50"
  }, /* @__PURE__ */ React3.createElement(import_button.Button, {
    variant: "secondary",
    onClick: onDismiss
  }, onDismissLabel), /* @__PURE__ */ React3.createElement(import_button.Button, {
    variant: primaryVariant,
    onClick: onConfirm
  }, onConfirmLabel)));
});
AlertDialogFooter.displayName = "AlertDialogFooter";
AlertDialogFooter.propTypes = {
  destructive: PropTypes3.bool,
  element: PropTypes3.string,
  onConfirm: PropTypes3.func.isRequired,
  onConfirmLabel: PropTypes3.string.isRequired,
  onDismiss: PropTypes3.func.isRequired,
  onDismissLabel: PropTypes3.string.isRequired
};

// src/index.tsx
var getAnimationStates = () => ({
  from: {opacity: 0, transform: `scale(0.675)`},
  enter: {opacity: 1, transform: `scale(1)`},
  leave: {opacity: 0, transform: `scale(0.675)`},
  config: {
    mass: 0.5,
    tension: 370,
    friction: 26
  }
});
var AlertDialog = React4.forwardRef((_a, ref) => {
  var {
    children,
    destructive,
    element = "ALERT_DIALOG",
    heading,
    isOpen,
    onConfirm,
    onConfirmLabel,
    onDismiss,
    onDismissLabel
  } = _a, props = __rest(_a, [
    "children",
    "destructive",
    "element",
    "heading",
    "isOpen",
    "onConfirm",
    "onConfirmLabel",
    "onDismiss",
    "onDismissLabel"
  ]);
  const transitions = import_animation_library.useTransition(isOpen, getAnimationStates());
  const headingID = import_uid_library.useUID();
  const bodyID = import_uid_library.useUID();
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null, transitions((styles, item) => item && /* @__PURE__ */ React4.createElement(import_modal5.ModalDialogOverlay, {
    isOpen,
    style: {opacity: styles.opacity}
  }, /* @__PURE__ */ React4.createElement(import_box4.Box, __assign(__assign({
    as: AlertDialogContent
  }, import_box4.safelySpreadBoxProps(props)), {
    "aria-labelledby": headingID,
    "aria-describedby": bodyID,
    element,
    ref,
    role: "alertdialog",
    style: styles
  }), /* @__PURE__ */ React4.createElement(AlertDialogHeader, {
    headingID,
    element: `${element}_HEADER`
  }, heading), /* @__PURE__ */ React4.createElement(AlertDialogBody, {
    bodyID,
    element: `${element}_BODY`
  }, children), /* @__PURE__ */ React4.createElement(AlertDialogFooter, {
    destructive,
    element: `${element}_FOOTER`,
    onDismiss,
    onDismissLabel,
    onConfirm,
    onConfirmLabel
  })))));
});
AlertDialog.displayName = "AlertDialog";
AlertDialog.propTypes = {
  children: PropTypes4.node.isRequired,
  destructive: PropTypes4.bool,
  element: PropTypes4.string,
  heading: PropTypes4.string.isRequired,
  isOpen: PropTypes4.bool.isRequired,
  onConfirm: PropTypes4.func.isRequired,
  onConfirmLabel: PropTypes4.string.isRequired,
  onDismiss: PropTypes4.func.isRequired,
  onDismissLabel: PropTypes4.string.isRequired
};
