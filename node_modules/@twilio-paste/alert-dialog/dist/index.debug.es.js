var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import {
  Fragment,
  createElement as createElement4,
  forwardRef as forwardRef4
} from "react";
import {
  bool as bool2,
  func as func2,
  node as node2,
  string as string4
} from "prop-types";
import {useUID} from "@twilio-paste/uid-library";
import {useTransition} from "@twilio-paste/animation-library";
import {Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4} from "@twilio-paste/box";
import {ModalDialogOverlay} from "@twilio-paste/modal";

// src/AlertDialogHeader.tsx
import {
  createElement,
  forwardRef
} from "react";
import {
  string
} from "prop-types";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";
import {Heading} from "@twilio-paste/heading";
import {modalHeaderStyles} from "@twilio-paste/modal";
var AlertDialogHeader = forwardRef((_a, ref) => {
  var {children, element = "ALERT_DIALOG_HEADER", headingID} = _a, props = __rest(_a, ["children", "element", "headingID"]);
  return /* @__PURE__ */ createElement(Box, __assign(__assign(__assign(__assign({}, safelySpreadBoxProps(props)), {
    as: "header"
  }), modalHeaderStyles), {
    border: "none",
    element: `${element}_WRAPPER`,
    paddingBottom: "space0",
    ref
  }), /* @__PURE__ */ createElement(Heading, {
    as: "h3",
    element,
    marginBottom: "space0",
    variant: "heading30",
    id: headingID
  }, children));
});
AlertDialogHeader.displayName = "AlertDialogHeader";
AlertDialogHeader.propTypes = {
  children: string.isRequired,
  headingID: string.isRequired,
  element: string
};

// src/AlertDialogBody.tsx
import {
  createElement as createElement2,
  forwardRef as forwardRef2
} from "react";
import {
  node,
  string as string2
} from "prop-types";
import {Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
import {modalBodyStyles} from "@twilio-paste/modal";
var AlertDialogBody = forwardRef2((_a, ref) => {
  var {bodyID, children, element = "ALERT_DIALOG_BODY"} = _a, props = __rest(_a, ["bodyID", "children", "element"]);
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign(__assign(__assign({}, safelySpreadBoxProps2(props)), {
    as: "div"
  }), modalBodyStyles), {
    element,
    id: bodyID,
    ref
  }), children);
});
AlertDialogBody.displayName = "AlertDialogBody";
AlertDialogBody.propTypes = {
  bodyID: string2.isRequired,
  children: node.isRequired,
  element: string2
};

// src/AlertDialogContent.tsx
import {css, styled} from "@twilio-paste/styling-library";
import {ModalDialogContent} from "@twilio-paste/modal";
var AlertDialogContent = styled(ModalDialogContent)(() => css({
  maxWidth: "size40"
}));
AlertDialogContent.displayName = "AlertDialogContent";

// src/AlertDialogFooter.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3
} from "react";
import {
  bool,
  func,
  string as string3
} from "prop-types";
import {Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3} from "@twilio-paste/box";
import {Button} from "@twilio-paste/button";
import {Stack} from "@twilio-paste/stack";
import {modalFooterStyles} from "@twilio-paste/modal";
var AlertDialogFooter = forwardRef3((_a, ref) => {
  var {destructive, element = "ALERT_DIALOG_FOOTER", onConfirm, onConfirmLabel, onDismiss, onDismissLabel} = _a, props = __rest(_a, ["destructive", "element", "onConfirm", "onConfirmLabel", "onDismiss", "onDismissLabel"]);
  const primaryVariant = destructive ? "destructive" : "primary";
  return /* @__PURE__ */ createElement3(Box3, __assign(__assign(__assign(__assign({}, safelySpreadBoxProps3(props)), {
    as: "footer"
  }), modalFooterStyles), {
    border: "none",
    element,
    justifyContent: "flex-end",
    paddingTop: "space0",
    ref
  }), /* @__PURE__ */ createElement3(Stack, {
    orientation: "horizontal",
    spacing: "space50"
  }, /* @__PURE__ */ createElement3(Button, {
    variant: "secondary",
    onClick: onDismiss
  }, onDismissLabel), /* @__PURE__ */ createElement3(Button, {
    variant: primaryVariant,
    onClick: onConfirm
  }, onConfirmLabel)));
});
AlertDialogFooter.displayName = "AlertDialogFooter";
AlertDialogFooter.propTypes = {
  destructive: bool,
  element: string3,
  onConfirm: func.isRequired,
  onConfirmLabel: string3.isRequired,
  onDismiss: func.isRequired,
  onDismissLabel: string3.isRequired
};

// src/index.tsx
var getAnimationStates = () => ({
  from: {opacity: 0, transform: `scale(0.675)`},
  enter: {opacity: 1, transform: `scale(1)`},
  leave: {opacity: 0, transform: `scale(0.675)`},
  config: {
    mass: 0.5,
    tension: 370,
    friction: 26
  }
});
var AlertDialog = forwardRef4((_a, ref) => {
  var {
    children,
    destructive,
    element = "ALERT_DIALOG",
    heading,
    isOpen,
    onConfirm,
    onConfirmLabel,
    onDismiss,
    onDismissLabel
  } = _a, props = __rest(_a, [
    "children",
    "destructive",
    "element",
    "heading",
    "isOpen",
    "onConfirm",
    "onConfirmLabel",
    "onDismiss",
    "onDismissLabel"
  ]);
  const transitions = useTransition(isOpen, getAnimationStates());
  const headingID = useUID();
  const bodyID = useUID();
  return /* @__PURE__ */ createElement4(Fragment, null, transitions((styles, item) => item && /* @__PURE__ */ createElement4(ModalDialogOverlay, {
    isOpen,
    style: {opacity: styles.opacity}
  }, /* @__PURE__ */ createElement4(Box4, __assign(__assign({
    as: AlertDialogContent
  }, safelySpreadBoxProps4(props)), {
    "aria-labelledby": headingID,
    "aria-describedby": bodyID,
    element,
    ref,
    role: "alertdialog",
    style: styles
  }), /* @__PURE__ */ createElement4(AlertDialogHeader, {
    headingID,
    element: `${element}_HEADER`
  }, heading), /* @__PURE__ */ createElement4(AlertDialogBody, {
    bodyID,
    element: `${element}_BODY`
  }, children), /* @__PURE__ */ createElement4(AlertDialogFooter, {
    destructive,
    element: `${element}_FOOTER`,
    onDismiss,
    onDismissLabel,
    onConfirm,
    onConfirmLabel
  })))));
});
AlertDialog.displayName = "AlertDialog";
AlertDialog.propTypes = {
  children: node2.isRequired,
  destructive: bool2,
  element: string4,
  heading: string4.isRequired,
  isOpen: bool2.isRequired,
  onConfirm: func2.isRequired,
  onConfirmLabel: string4.isRequired,
  onDismiss: func2.isRequired,
  onDismissLabel: string4.isRequired
};
export {
  AlertDialog
};
