var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Pagination.tsx
import {
  createElement,
  forwardRef
} from "react";
import {Box, safelySpreadBoxProps} from "@twilio-paste/box";

// src/proptypes.ts
import {
  bool,
  node,
  oneOf,
  string
} from "prop-types";
var PaginationPropTypes = {
  label: string.isRequired,
  children: node.isRequired,
  element: string
};
var PaginationItemsPropTypes = {
  children: node.isRequired,
  element: string
};
var PaginationNumbersPropTypes = {
  children: node.isRequired,
  pageLabel: string,
  element: string
};
var PaginationLabelPropTypes = {
  children: node.isRequired,
  element: string
};
var PaginationNumberPropTypes = {
  as: oneOf(["a", "button"]),
  children: node.isRequired,
  isCurrent: bool,
  label: string.isRequired,
  href: string,
  element: string
};
var PaginationArrowButtonPropTypes = {
  as: oneOf(["a", "button"]),
  disabled: bool,
  visibleLabel: string,
  element: string
};
var PaginationArrowPropTypes = {
  as: oneOf(["a", "button"]),
  disabled: bool,
  href: string,
  isHovered: bool,
  label: string.isRequired,
  variant: oneOf(["back", "forward"]).isRequired,
  visibleLabel: string,
  element: string
};
var PaginationArrowIconWrapperPropTypes = {
  children: node.isRequired,
  isHovered: bool,
  element: string
};
var PaginationEllipsisPropTypes = {
  label: string.isRequired,
  element: string
};

// src/Pagination.tsx
var Pagination = forwardRef((_a, ref) => {
  var {children, element = "PAGINATION", label} = _a, props = __rest(_a, ["children", "element", "label"]);
  return /* @__PURE__ */ createElement(Box, __assign(__assign({}, safelySpreadBoxProps(props)), {
    element,
    ref,
    "aria-label": label,
    as: "nav",
    role: "navigation"
  }), children);
});
Pagination.displayName = "Pagination";
Pagination.propTypes = PaginationPropTypes;

// src/PaginationItems.tsx
import {
  Children,
  createElement as createElement2,
  forwardRef as forwardRef2,
  isValidElement,
  useMemo
} from "react";
import {useUIDSeed} from "@twilio-paste/uid-library";
import {Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";

// src/styles.ts
var ULStyles = {
  display: "inline-flex",
  margin: "space0",
  padding: "space0"
};
var LIStyles = {
  listStyleType: "none",
  margin: "space0",
  padding: "space0"
};

// src/PaginationItems.tsx
var PaginationItems = forwardRef2((_a, ref) => {
  var {children, element = "PAGINATION_ITEMS"} = _a, props = __rest(_a, ["children", "element"]);
  const [validChildren] = useMemo(() => [Children.toArray(children).filter((child) => isValidElement(child))], [children]);
  const keySeed = useUIDSeed();
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign(__assign({}, ULStyles), safelySpreadBoxProps2(props)), {
    ref,
    element,
    as: "ul"
  }), validChildren.map((child, index) => {
    return /* @__PURE__ */ createElement2(Box2, __assign(__assign({}, LIStyles), {
      key: keySeed(`pagination-items-${index}`),
      element: `${element}_ITEM`,
      as: "li",
      marginRight: "space90",
      _last: {
        marginRight: "space0"
      }
    }), child);
  }));
});
PaginationItems.displayName = "PaginationItems";
PaginationItems.propTypes = PaginationItemsPropTypes;

// src/PaginationArrow/index.tsx
import {
  createElement as createElement7,
  forwardRef as forwardRef6,
  useState
} from "react";

// src/PaginationArrow/PaginationBackArrow.tsx
import {
  createElement as createElement5,
  forwardRef as forwardRef4
} from "react";
import {Text} from "@twilio-paste/text";
import {ArrowBackIcon} from "@twilio-paste/icons/esm/ArrowBackIcon";

// src/PaginationArrow/PaginationArrowButton.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef3
} from "react";
import {Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3} from "@twilio-paste/box";
var PaginationArrowButton = forwardRef3((_a, ref) => {
  var {children, element = "PAGINATION_ARROW_BUTTON", disabled, visibleLabel} = _a, props = __rest(_a, ["children", "element", "disabled", "visibleLabel"]);
  return /* @__PURE__ */ createElement3(Box3, __assign(__assign({}, safelySpreadBoxProps3(props)), {
    element,
    ref,
    "aria-hidden": disabled,
    alignItems: "center",
    appearance: "none",
    background: "none",
    border: "none",
    borderColor: "colorBorder",
    borderRadius: visibleLabel ? "borderRadius10" : "borderRadiusCircle",
    color: "colorText",
    display: "flex",
    fontFamily: "fontFamilyText",
    fontVariantNumeric: "tabular-nums",
    fontWeight: "fontWeightNormal",
    lineHeight: "lineHeight30",
    margin: "space0",
    outline: "none",
    opacity: disabled ? "0" : "1",
    padding: "space0",
    position: "relative",
    textDecoration: "none",
    transition: "border-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in, opacity 150ms ease-in, visibility 150ms ease-in",
    visibility: disabled ? "hidden" : "visible",
    _hover: {
      borderColor: "colorBorderPrimaryStronger",
      color: "colorTextLinkStronger",
      cursor: "pointer",
      textDecoration: "none"
    },
    _focus: {
      borderColor: "colorBorderPrimaryStronger",
      boxShadow: "shadowFocus",
      color: "colorTextLinkStronger",
      textDecoration: "none"
    },
    _active: {textDecoration: "none"}
  }), children);
});
PaginationArrowButton.displayName = "PaginationArrowButton";
PaginationArrowButton.propTypes = PaginationArrowButtonPropTypes;

// src/PaginationArrow/PaginationArrowIconWrapper.tsx
import {
  createElement as createElement4
} from "react";
import {Box as Box4} from "@twilio-paste/box";
var PaginationArrowIconWrapper = ({
  children,
  element = "PAGINATION_ARROW_ICON_WRAPPER",
  isFocused,
  isHovered
}) => {
  return /* @__PURE__ */ createElement4(Box4, {
    element,
    alignItems: "center",
    backgroundColor: isHovered || isFocused ? "colorBackgroundPrimaryWeakest" : "none",
    borderColor: "inherit",
    borderRadius: "borderRadiusCircle",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    display: "flex",
    height: "sizeSquare80",
    justifyContent: "center",
    transition: "background-color 100ms ease-in",
    width: "sizeSquare80"
  }, children);
};
PaginationArrowIconWrapper.displayName = "PaginationArrowIconWrapper";
PaginationArrowIconWrapper.propTypes = PaginationArrowIconWrapperPropTypes;

// src/PaginationArrow/PaginationBackArrow.tsx
var PaginationBackArrow = forwardRef4((_a, ref) => {
  var {as = "button", element = "PAGINATION_ARROW", disabled, isFocused, isHovered, label, visibleLabel} = _a, props = __rest(_a, ["as", "element", "disabled", "isFocused", "isHovered", "label", "visibleLabel"]);
  return /* @__PURE__ */ createElement5(PaginationArrowButton, __assign(__assign({}, props), {
    ref,
    as,
    disabled,
    visibleLabel,
    element: `${element}_BUTTON`
  }), /* @__PURE__ */ createElement5(PaginationArrowIconWrapper, {
    isFocused,
    isHovered,
    element: `${element}_ICON_WRAPPER`
  }, /* @__PURE__ */ createElement5(ArrowBackIcon, {
    decorative: false,
    display: "block",
    title: label,
    element: `${element}_ICON`
  })), visibleLabel ? /* @__PURE__ */ createElement5(Text, {
    "aria-hidden": "true",
    as: "span",
    color: "inherit",
    marginLeft: "space30",
    element: `${element}_TEXT`
  }, visibleLabel) : null);
});
PaginationBackArrow.displayName = "PaginationBackArrow";
PaginationBackArrow.propTypes = PaginationArrowPropTypes;

// src/PaginationArrow/PaginationForwardArrow.tsx
import {
  createElement as createElement6,
  forwardRef as forwardRef5
} from "react";
import {Text as Text2} from "@twilio-paste/text";
import {ArrowForwardIcon} from "@twilio-paste/icons/esm/ArrowForwardIcon";
var PaginationForwardArrow = forwardRef5((_a, ref) => {
  var {as = "button", element = "PAGINATION_ARROW", disabled, isFocused, isHovered, label, visibleLabel} = _a, props = __rest(_a, ["as", "element", "disabled", "isFocused", "isHovered", "label", "visibleLabel"]);
  return /* @__PURE__ */ createElement6(PaginationArrowButton, __assign(__assign({}, props), {
    ref,
    element: `${element}_BUTTON`,
    as,
    disabled,
    visibleLabel
  }), visibleLabel ? /* @__PURE__ */ createElement6(Text2, {
    "aria-hidden": "true",
    as: "span",
    color: "inherit",
    marginRight: "space30",
    element: `${element}_TEXT`
  }, visibleLabel) : null, /* @__PURE__ */ createElement6(PaginationArrowIconWrapper, {
    isFocused,
    isHovered,
    element: `${element}_ICON_WRAPPER`
  }, /* @__PURE__ */ createElement6(ArrowForwardIcon, {
    decorative: false,
    display: "block",
    title: label,
    element: `${element}_ICON`
  })));
});
PaginationForwardArrow.displayName = "PaginationForwardArrow";
PaginationForwardArrow.propTypes = PaginationArrowPropTypes;

// src/utils.ts
var handleLinkValidation = ({as, href}) => {
  const hasHref = href != null && href !== "";
  if (as !== "a" && hasHref) {
    throw new Error(`[Paste: Pagination] You cannot pass href into button pagination without the 'a' tag.  Use 'as="a"'.`);
  }
  if (as === "a") {
    if (!hasHref) {
      throw new Error(`[Paste: Pagination] Missing href prop for link pagination.`);
    }
  }
};

// src/PaginationArrow/index.tsx
var PaginationArrow = forwardRef6((_a, ref) => {
  var {
    as = "button",
    element = "PAGINATION_ARROW",
    disabled,
    href,
    isHovered,
    label,
    variant = "back",
    visibleLabel
  } = _a, props = __rest(_a, [
    "as",
    "element",
    "disabled",
    "href",
    "isHovered",
    "label",
    "variant",
    "visibleLabel"
  ]);
  const [hovered, setHovered] = useState(false);
  const [focused, setFocused] = useState(false);
  handleLinkValidation({as, href});
  return variant === "back" ? /* @__PURE__ */ createElement7(PaginationBackArrow, __assign(__assign({}, props), {
    element,
    ref,
    as,
    disabled,
    href,
    isFocused: focused,
    isHovered: hovered,
    label,
    variant,
    visibleLabel,
    onMouseEnter: (event) => {
      if (typeof props.onMouseEnter === "function") {
        props.onMouseEnter(event);
      }
      setHovered(true);
    },
    onMouseLeave: (event) => {
      if (typeof props.onMouseLeave === "function") {
        props.onMouseLeave(event);
      }
      setHovered(false);
    },
    onFocus: (event) => {
      if (typeof props.onFocus === "function") {
        props.onFocus(event);
      }
      setFocused(true);
    },
    onBlur: (event) => {
      if (typeof props.onBlur === "function") {
        props.onBlur(event);
      }
      setFocused(false);
    }
  })) : /* @__PURE__ */ createElement7(PaginationForwardArrow, __assign(__assign({}, props), {
    element,
    ref,
    as,
    disabled,
    href,
    isFocused: focused,
    isHovered: hovered,
    label,
    variant,
    visibleLabel,
    onMouseEnter: (event) => {
      if (typeof props.onMouseEnter === "function") {
        props.onMouseEnter(event);
      }
      setHovered(true);
    },
    onMouseLeave: (event) => {
      if (typeof props.onMouseLeave === "function") {
        props.onMouseLeave(event);
      }
      setHovered(false);
    },
    onFocus: (event) => {
      if (typeof props.onFocus === "function") {
        props.onFocus(event);
      }
      setFocused(true);
    },
    onBlur: (event) => {
      if (typeof props.onBlur === "function") {
        props.onBlur(event);
      }
      setFocused(false);
    }
  }));
});
PaginationArrow.displayName = "PaginationArrow";
PaginationArrow.propTypes = PaginationArrowPropTypes;

// src/PaginationLabel.tsx
import {
  createElement as createElement8,
  forwardRef as forwardRef7
} from "react";
import {Text as Text3, safelySpreadTextProps} from "@twilio-paste/text";
var PaginationLabel = forwardRef7((_a, ref) => {
  var {children, element = "PAGINATION_LABEL"} = _a, props = __rest(_a, ["children", "element"]);
  return /* @__PURE__ */ createElement8(Text3, __assign(__assign({}, safelySpreadTextProps(props)), {
    ref,
    element,
    as: "div",
    color: "colorTextWeak",
    paddingBottom: "space20",
    paddingTop: "space20",
    textAlign: "center"
  }), children);
});
PaginationLabel.displayName = "PaginationLabel";
PaginationLabel.propTypes = PaginationLabelPropTypes;

// src/PaginationEllipsis.tsx
import {
  createElement as createElement9,
  forwardRef as forwardRef8
} from "react";
import {Text as Text4, safelySpreadTextProps as safelySpreadTextProps2} from "@twilio-paste/text";
var PaginationEllipsis = forwardRef8((_a, ref) => {
  var {label, element = "PAGINATION_ELLIPSIS"} = _a, props = __rest(_a, ["label", "element"]);
  return /* @__PURE__ */ createElement9(Text4, __assign(__assign({}, safelySpreadTextProps2(props)), {
    ref,
    element,
    "aria-label": label,
    as: "span",
    display: "inline-block",
    paddingBottom: "space20",
    paddingLeft: "space30",
    paddingRight: "space30",
    paddingTop: "space20"
  }), "\u2026");
});
PaginationEllipsis.displayName = "PaginationEllipsis";
PaginationEllipsis.propTypes = PaginationEllipsisPropTypes;

// src/PaginationNumber.tsx
import {
  createElement as createElement10,
  forwardRef as forwardRef9
} from "react";
import {Box as Box5, safelySpreadBoxProps as safelySpreadBoxProps4} from "@twilio-paste/box";
import {Text as Text5} from "@twilio-paste/text";
var PaginationNumber = forwardRef9((_a, ref) => {
  var {as = "button", element = "PAGINATION_NUMBER", children, href, isCurrent, label} = _a, props = __rest(_a, ["as", "element", "children", "href", "isCurrent", "label"]);
  handleLinkValidation({as, href});
  return /* @__PURE__ */ createElement10(Box5, __assign(__assign({}, safelySpreadBoxProps4(props)), {
    ref,
    element,
    "aria-label": label,
    "aria-current": isCurrent,
    as,
    href,
    appearance: "none",
    background: "none",
    backgroundColor: isCurrent ? "colorBackgroundPrimaryStronger" : "transparent",
    borderColor: "transparent",
    borderRadius: "borderRadius10",
    borderStyle: "solid",
    borderWidth: "borderWidth10",
    color: isCurrent ? "colorTextWeakest" : "colorText",
    display: "inline-block",
    fontFamily: "fontFamilyText",
    fontSize: "fontSize30",
    fontVariantNumeric: "tabular-nums",
    fontWeight: "fontWeightNormal",
    lineHeight: "lineHeight30",
    margin: "space0",
    outline: "none",
    paddingBottom: "space20",
    paddingLeft: "space30",
    paddingRight: "space30",
    paddingTop: "space20",
    position: "relative",
    textDecoration: "none",
    transition: "background-color 100ms ease-in, border-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in",
    _hover: {
      backgroundColor: isCurrent ? "colorBackgroundPrimaryStronger" : "colorBackgroundPrimaryWeakest",
      borderColor: isCurrent ? "transparent" : "colorBorderPrimaryStronger",
      color: isCurrent ? "colorTextWeakest" : "colorTextLinkStronger",
      cursor: "pointer",
      textDecoration: "none"
    },
    _focus: {
      backgroundColor: isCurrent ? "colorBackgroundPrimaryStronger" : "colorBackgroundPrimaryWeakest",
      borderColor: isCurrent ? "transparent" : "colorBorderPrimaryStronger",
      boxShadow: "shadowFocus",
      color: isCurrent ? "colorTextWeakest" : "colorTextLinkStronger",
      textDecoration: "none"
    },
    _active: {textDecoration: "none"}
  }), children ? /* @__PURE__ */ createElement10(Text5, {
    "aria-hidden": "true",
    as: "span",
    color: "inherit",
    element: `${element}_TEXT`
  }, children) : null);
});
PaginationNumber.displayName = "PaginationNumber";
PaginationNumber.propTypes = PaginationNumberPropTypes;

// src/PaginationNumbers.tsx
import {
  Children as Children2,
  Fragment,
  createElement as createElement11,
  forwardRef as forwardRef10,
  isValidElement as isValidElement2,
  useMemo as useMemo2
} from "react";
import {useUIDSeed as useUIDSeed2} from "@twilio-paste/uid-library";
import {Box as Box6, safelySpreadBoxProps as safelySpreadBoxProps5} from "@twilio-paste/box";
var PaginationNumbers = forwardRef10((_a, ref) => {
  var {children, element = "PAGINATION_NUMBERS", pageLabel} = _a, props = __rest(_a, ["children", "element", "pageLabel"]);
  const [validChildren] = useMemo2(() => [Children2.toArray(children).filter((child) => isValidElement2(child))], [children]);
  const keySeed = useUIDSeed2();
  return /* @__PURE__ */ createElement11(Fragment, null, /* @__PURE__ */ createElement11(Box6, __assign(__assign(__assign({}, ULStyles), safelySpreadBoxProps5(props)), {
    element,
    ref,
    as: "ul",
    justifyContent: "center",
    paddingLeft: "space40",
    paddingRight: "space40",
    width: "100%"
  }), validChildren.map((child, index) => {
    return /* @__PURE__ */ createElement11(Box6, __assign(__assign({}, LIStyles), {
      key: keySeed(`pagination-numbers-${index}`),
      element: `${element}_ITEM`,
      as: "li",
      marginRight: "space30",
      _last: {
        marginRight: "space0"
      }
    }), child);
  })), pageLabel ? /* @__PURE__ */ createElement11(PaginationLabel, null, pageLabel) : null);
});
PaginationNumbers.displayName = "PaginationNumbers";
PaginationNumbers.propTypes = PaginationNumbersPropTypes;
export {
  Pagination,
  PaginationArrow,
  PaginationEllipsis,
  PaginationItems,
  PaginationLabel,
  PaginationNumber,
  PaginationNumbers
};
