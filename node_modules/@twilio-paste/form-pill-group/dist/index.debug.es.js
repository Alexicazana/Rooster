var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/FormPill.tsx
import {
  createElement as createElement2,
  forwardRef,
  useCallback
} from "react";
import {Box as Box2, safelySpreadBoxProps} from "@twilio-paste/box";
import {CompositeItem} from "@twilio-paste/reakit-library";

// src/PillCloseIcon.tsx
import {
  createElement
} from "react";
import {Box} from "@twilio-paste/box";
import {ScreenReaderOnly} from "@twilio-paste/screen-reader-only";
import {CloseIcon} from "@twilio-paste/icons/esm/CloseIcon";
var PillCloseIcon = ({onClick}) => {
  return /* @__PURE__ */ createElement(Box, {
    onClick,
    _hover: {
      cursor: "pointer"
    }
  }, /* @__PURE__ */ createElement(ScreenReaderOnly, null, ". Press delete or backspace to remove"), /* @__PURE__ */ createElement(CloseIcon, {
    decorative: true,
    size: "sizeIcon10"
  }));
};

// src/FormPill.tsx
var hoverStyles = {
  cursor: "pointer",
  _hover: {
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryStrong",
    color: "colorTextLinkStronger"
  },
  _selected_hover: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest"
  }
};
var FormPillStyles = forwardRef((_a, ref) => {
  var {element = "FORM_PILL", selected = false, isHoverable} = _a, props = __rest(_a, ["element", "selected", "isHoverable"]);
  return /* @__PURE__ */ createElement2(Box2, __assign(__assign(__assign({}, safelySpreadBoxProps(props)), {
    ref,
    element,
    as: "button",
    "aria-selected": selected,
    role: "option",
    type: "button",
    alignItems: "center",
    backgroundColor: "colorBackgroundStrong",
    borderRadius: "borderRadius10",
    borderWidth: "borderWidth0",
    color: "colorText",
    columnGap: "space20",
    cursor: "default",
    display: "flex",
    fontFamily: "fontFamilyText",
    fontSize: "fontSize20",
    fontWeight: "fontWeightSemibold",
    lineHeight: "lineHeight10",
    outline: "none",
    paddingX: "space30",
    paddingY: "space20",
    transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in, border-color 100ms ease-in",
    _focusVisible: {
      backgroundColor: "colorBackgroundPrimaryWeakest",
      boxShadow: "shadowFocus",
      color: "colorTextLinkStronger"
    },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryStronger",
      color: "colorTextWeakest"
    }
  }), isHoverable && __assign({}, hoverStyles)), props.children);
});
FormPillStyles.displayName = "StyledFormPill";
var FormPill = forwardRef((_a, ref) => {
  var {element = "FORM_PILL", onDismiss, onSelect, next} = _a, props = __rest(_a, ["element", "onDismiss", "onSelect", "next"]);
  const handleKeydown = useCallback((event) => {
    if ((event.key === "Backspace" || event.key === "Delete") && typeof onDismiss === "function") {
      onDismiss();
      if (typeof next === "function") {
        next();
      }
    }
  }, [onDismiss, next]);
  const isHoverable = onSelect != null;
  return /* @__PURE__ */ createElement2(CompositeItem, __assign(__assign({
    as: FormPillStyles,
    element
  }, props), {
    ref,
    isHoverable,
    onKeyDown: handleKeydown,
    onClick: onSelect,
    next
  }), props.children, onDismiss != null ? /* @__PURE__ */ createElement2(PillCloseIcon, {
    onClick: onDismiss
  }) : null);
});
FormPill.displayName = "FormPill";

// src/FormPillGroup.tsx
import {
  createElement as createElement3,
  forwardRef as forwardRef2
} from "react";
import {Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2} from "@twilio-paste/box";
import {Composite} from "@twilio-paste/reakit-library";
var FormPillGroupStyles = forwardRef2((_a, ref) => {
  var {element = "FORM_PILL_GROUP"} = _a, props = __rest(_a, ["element"]);
  return /* @__PURE__ */ createElement3(Box3, __assign(__assign({}, safelySpreadBoxProps2(props)), {
    element,
    ref,
    role: "listbox",
    margin: "space0",
    padding: "space0",
    display: "flex",
    flexWrap: "wrap",
    rowGap: "space30",
    columnGap: "space30"
  }), props.children);
});
FormPillGroupStyles.displayName = "StyledFormPillGroup";
var FormPillGroup = forwardRef2((props, ref) => {
  return /* @__PURE__ */ createElement3(Composite, __assign(__assign({
    as: FormPillGroupStyles
  }, props), {
    ref
  }), props.children);
});
FormPillGroup.displayName = "FormPillGroup";

// src/useFormPillState.tsx
import {useCompositeState} from "@twilio-paste/reakit-library";
var useFormPillState = (config = {}) => {
  return __assign({}, useCompositeState(__assign(__assign({}, config), {
    orientation: "horizontal",
    loop: true
  })));
};
export {
  FormPill,
  FormPillGroup,
  useFormPillState
};
