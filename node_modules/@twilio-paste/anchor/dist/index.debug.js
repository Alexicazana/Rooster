var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Anchor: () => Anchor,
  isExternalUrl: () => isExternalUrl,
  secureExternalLink: () => secureExternalLink
});
var React3 = __toModule(require("react"));
var import_box3 = __toModule(require("@twilio-paste/box"));
var import_LinkExternalIcon = __toModule(require("@twilio-paste/icons/cjs/LinkExternalIcon"));

// src/DefaultAnchor.tsx
var React = __toModule(require("react"));
var import_box = __toModule(require("@twilio-paste/box"));
var DefaultAnchor = React.forwardRef((props, ref) => /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, props), {
  as: "a",
  color: "colorTextLink",
  fontSize: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  outline: "none",
  ref,
  textDecoration: "underline",
  _active: {
    color: "colorTextLinkStronger",
    textDecoration: "none"
  },
  _focus: {
    boxShadow: "shadowFocus",
    color: "colorTextLinkStronger",
    textDecoration: "none"
  },
  _hover: {
    color: "colorTextLinkStronger",
    textDecoration: "none"
  }
}), props.children));
DefaultAnchor.displayName = "DefaultAnchor";
if (false) {
  DefaultAnchor.propTypes = AnchorPropTypes;
}

// src/InverseAnchor.tsx
var React2 = __toModule(require("react"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var InverseAnchor = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(import_box2.Box, __assign(__assign({}, props), {
  as: "a",
  color: "colorTextInverse",
  fontSize: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  outline: "none",
  ref,
  textDecoration: "underline",
  _active: {
    color: "colorTextInverse",
    textDecoration: "none"
  },
  _focus: {
    boxShadow: "shadowFocusInverse",
    color: "colorTextInverse",
    textDecoration: "none"
  },
  _hover: {
    color: "colorTextInverse",
    textDecoration: "none"
  }
}), props.children));
InverseAnchor.displayName = "InverseAnchor";
if (false) {
  InverseAnchor.propTypes = AnchorPropTypes;
}

// src/index.tsx
var AnchorVariants = {
  inverse: InverseAnchor,
  default: DefaultAnchor
};
var EXTERNAL_URL_REGEX = /^(https?:)\S*$/;
var EXTERNAL_TARGET_DEFAULT = "_blank";
var EXTERNAL_REL_DEFAULT = "noreferrer noopener";
var isExternalUrl = (url) => EXTERNAL_URL_REGEX.test(url);
var secureExternalLink = (href) => {
  if (!isExternalUrl(href))
    return;
  return {
    rel: EXTERNAL_REL_DEFAULT,
    target: EXTERNAL_TARGET_DEFAULT
  };
};
var Anchor = React3.forwardRef((_a, ref) => {
  var {
    element = "ANCHOR",
    variant = "default",
    showExternal,
    display,
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    size,
    margin,
    marginBottom,
    marginLeft,
    marginRight,
    marginTop,
    marginX = null,
    marginY = null,
    padding,
    paddingBottom,
    paddingLeft,
    paddingRight,
    paddingTop,
    paddingX = null,
    paddingY = null,
    verticalAlign
  } = _a, props = __rest(_a, [
    "element",
    "variant",
    "showExternal",
    "display",
    "height",
    "minHeight",
    "maxHeight",
    "width",
    "minWidth",
    "maxWidth",
    "size",
    "margin",
    "marginBottom",
    "marginLeft",
    "marginRight",
    "marginTop",
    "marginX",
    "marginY",
    "padding",
    "paddingBottom",
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "paddingX",
    "paddingY",
    "verticalAlign"
  ]);
  const AnchorComponent = AnchorVariants[variant];
  return /* @__PURE__ */ React3.createElement(AnchorComponent, __assign(__assign(__assign({
    href: props.href,
    ref,
    variant
  }, secureExternalLink(props.href)), import_box3.safelySpreadBoxProps(props)), {
    element,
    display,
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    size,
    margin,
    marginBottom,
    marginLeft,
    marginRight,
    marginTop,
    marginX,
    marginY,
    padding,
    paddingBottom,
    paddingLeft,
    paddingRight,
    paddingTop,
    paddingX,
    paddingY,
    verticalAlign
  }), showExternal ? /* @__PURE__ */ React3.createElement(import_box3.Box, {
    as: "span"
  }, props.children, /* @__PURE__ */ React3.createElement(import_box3.Box, {
    as: "span",
    display: "inline-block",
    flexShrink: 0,
    verticalAlign: "middle"
  }, /* @__PURE__ */ React3.createElement(import_LinkExternalIcon.LinkExternalIcon, {
    decorative: false,
    title: "link takes you to an external page"
  }))) : props.children);
});
Anchor.displayName = "Anchor";
if (false) {
  Anchor.propTypes = AnchorPropTypes;
}
