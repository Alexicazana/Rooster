var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  InlineControlGroup: () => InlineControlGroup
});

// src/InlineControlGroup.tsx
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_label = __toModule(require("@twilio-paste/label"));
var import_help_text = __toModule(require("@twilio-paste/help-text"));
var InlineControlGroup = React.forwardRef((_a, ref) => {
  var {
    children,
    disabled,
    element = "INLINE_CONTROL_GROUP",
    errorText,
    helpText,
    legend,
    orientation = "vertical",
    required
  } = _a, props = __rest(_a, [
    "children",
    "disabled",
    "element",
    "errorText",
    "helpText",
    "legend",
    "orientation",
    "required"
  ]);
  return /* @__PURE__ */ React.createElement(import_box.Box, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    as: "fieldset",
    element,
    margin: "space0",
    padding: "space0",
    minWidth: "0px",
    borderWidth: "borderWidth0",
    ref
  }), /* @__PURE__ */ React.createElement(import_label.Label, {
    as: "legend",
    element: "LEGEND",
    htmlFor: void 0,
    required,
    marginBottom: "space0",
    disabled
  }, legend), helpText && /* @__PURE__ */ React.createElement(import_help_text.HelpText, {
    marginTop: "space0"
  }, helpText), /* @__PURE__ */ React.createElement(import_box.Box, {
    element: `${element}_SET`,
    marginLeft: "space20",
    marginRight: "space20"
  }, React.Children.map(children, (child) => {
    return /* @__PURE__ */ React.createElement(import_box.Box, {
      element: `${element}_FIELD`,
      display: orientation === "horizontal" ? "inline-block" : "block",
      marginTop: "space40",
      marginRight: orientation === "horizontal" ? "space70" : null
    }, child);
  }), errorText && /* @__PURE__ */ React.createElement(import_box.Box, {
    element: `${element}_ERROR_TEXT_WRAPPER`,
    marginTop: "space40"
  }, /* @__PURE__ */ React.createElement(import_help_text.HelpText, {
    variant: "error"
  }, errorText))));
});
InlineControlGroup.displayName = "InlineControlGroup";
if (false) {
  InlineControlGroup.propTypes = {
    children: PropTypes.node.isRequired,
    disabled: PropTypes.bool,
    errorText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    legend: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,
    name: PropTypes.string.isRequired,
    orientation: PropTypes.oneOf(["vertical", "horizontal"]),
    required: PropTypes.bool
  };
}
