var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  Checkbox: () => Checkbox,
  CheckboxDisclaimer: () => CheckboxDisclaimer,
  CheckboxGroup: () => CheckboxGroup
});

// src/Checkbox.tsx
var React2 = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_uid_library = __toModule(require("@twilio-paste/uid-library"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_CheckboxCheckIcon = __toModule(require("@twilio-paste/icons/cjs/CheckboxCheckIcon"));
var import_MinusIcon = __toModule(require("@twilio-paste/icons/cjs/MinusIcon"));
var import_base_radio_checkbox = __toModule(require("@twilio-paste/base-radio-checkbox"));
var import_media_object = __toModule(require("@twilio-paste/media-object"));
var import_label = __toModule(require("@twilio-paste/label"));

// src/CheckboxContext.tsx
var React = __toModule(require("react"));
var CheckboxContext = React.createContext({
  disabled: false,
  name: void 0,
  hasError: void 0,
  onChange: () => {
  }
});

// src/Checkbox.tsx
var HiddenCheckbox = React2.forwardRef((props, ref) => /* @__PURE__ */ React2.createElement(import_box.Box, __assign(__assign({}, props), {
  ref,
  as: "input",
  type: "checkbox",
  size: "size0",
  border: "none",
  overflow: "hidden",
  padding: "space0",
  margin: "space0",
  whiteSpace: "nowrap",
  textTransform: "none",
  position: "absolute",
  clip: "rect(0 0 0 0)"
})));
HiddenCheckbox.displayName = "HiddenCheckbox";
var CheckboxIcon = ({checked, element, disabled, indeterminate}) => {
  const color = disabled && (checked || indeterminate) ? "colorTextIcon" : "colorTextWeakest";
  if (indeterminate) {
    return /* @__PURE__ */ React2.createElement(import_MinusIcon.MinusIcon, {
      element,
      decorative: true,
      color,
      size: "sizeIcon10"
    });
  }
  return /* @__PURE__ */ React2.createElement(import_CheckboxCheckIcon.CheckboxCheckIcon, {
    element,
    hidden: !checked,
    decorative: true,
    color,
    size: "sizeIcon10"
  });
};
var Checkbox = React2.forwardRef((_a, ref) => {
  var {
    checked,
    element = "CHECKBOX",
    children,
    helpText,
    id,
    indeterminate,
    isSelectAll,
    isSelectAllChild,
    required
  } = _a, props = __rest(_a, [
    "checked",
    "element",
    "children",
    "helpText",
    "id",
    "indeterminate",
    "isSelectAll",
    "isSelectAllChild",
    "required"
  ]);
  const helpTextId = import_uid_library.useUID();
  const checkboxGroupContext = React2.useContext(CheckboxContext);
  const disabled = props.disabled != null ? props.disabled : checkboxGroupContext.disabled;
  const name = props.name != null ? props.name : checkboxGroupContext.name;
  const hasError = props.hasError != null ? props.hasError : checkboxGroupContext.hasError;
  const handleChange = props.onChange != null ? props.onChange : checkboxGroupContext.onChange;
  let paddingLeft = null;
  let checkboxBackground = null;
  if (isSelectAll) {
    paddingLeft = "space20";
    if (checked || indeterminate) {
      checkboxBackground = "colorBackgroundPrimaryWeakest";
    } else if (!disabled) {
      checkboxBackground = "colorBackground";
    }
  }
  if (isSelectAllChild) {
    paddingLeft = "space30";
  }
  return /* @__PURE__ */ React2.createElement(import_box.Box, {
    element,
    backgroundColor: checkboxBackground,
    borderRadius: isSelectAll ? "borderRadius10" : null,
    display: "inline-flex",
    position: "relative",
    flexDirection: "column",
    padding: isSelectAll ? "space30" : null,
    paddingBottom: isSelectAll ? "space20" : null,
    paddingLeft,
    paddingRight: isSelectAllChild ? "space30" : null,
    paddingTop: isSelectAll ? "space20" : null
  }, /* @__PURE__ */ React2.createElement(HiddenCheckbox, __assign(__assign({}, import_box.safelySpreadBoxProps(props)), {
    checked,
    disabled,
    name,
    onChange: handleChange,
    "aria-describedby": helpTextId,
    "aria-checked": indeterminate ? "mixed" : checked,
    "aria-invalid": hasError,
    id,
    required,
    ref
  })), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabel, {
    disabled,
    htmlFor: id
  }, /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxControl, {
    alignItems: "center",
    borderRadius: "borderRadius10",
    element: `${element}_CONTROL`,
    disabled,
    position: "relative",
    type: "checkbox"
  }, /* @__PURE__ */ React2.createElement(CheckboxIcon, {
    element: `${element}_ICON`,
    checked,
    disabled,
    indeterminate
  })), /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxLabelText, {
    element: `${element}_LABEL_TEXT`,
    fontWeight: isSelectAll ? null : "fontWeightMedium"
  }, /* @__PURE__ */ React2.createElement(import_media_object.MediaObject, {
    verticalAlign: "top"
  }, required && /* @__PURE__ */ React2.createElement(import_media_object.MediaFigure, {
    spacing: "space20"
  }, /* @__PURE__ */ React2.createElement(import_label.RequiredDot, null)), /* @__PURE__ */ React2.createElement(import_media_object.MediaBody, null, children)))), helpText && /* @__PURE__ */ React2.createElement(import_base_radio_checkbox.BaseRadioCheckboxHelpText, {
    element: `${element}_HELP_TEXT_WRAPPER`,
    helpTextId
  }, helpText));
});
Checkbox.displayName = "Checkbox";
Checkbox.propTypes = {
  children: PropTypes.node.isRequired,
  disabled: PropTypes.bool,
  name: PropTypes.string,
  onChange: PropTypes.func,
  hasError: PropTypes.bool,
  helpText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  id: PropTypes.string,
  indeterminate: PropTypes.bool,
  isSelectAll: PropTypes.bool,
  isSelectAllChild: PropTypes.bool,
  element: PropTypes.string
};

// src/CheckboxGroup.tsx
var React3 = __toModule(require("react"));
var PropTypes2 = __toModule(require("prop-types"));
var import_inline_control_group = __toModule(require("@twilio-paste/inline-control-group"));
var CheckboxGroup = React3.forwardRef((_a, ref) => {
  var {
    children,
    element = "CHECKBOX_GROUP",
    disabled = false,
    errorText,
    isSelectAll = false,
    name,
    onChange,
    orientation = "vertical"
  } = _a, props = __rest(_a, [
    "children",
    "element",
    "disabled",
    "errorText",
    "isSelectAll",
    "name",
    "onChange",
    "orientation"
  ]);
  const onChangeHandler = React3.useCallback((event) => {
    if (onChange != null) {
      onChange(event.target.checked);
    }
  }, [onChange]);
  const contextValue = React3.useMemo(() => {
    return {
      disabled,
      name,
      onChange: onChangeHandler,
      hasError: errorText ? true : void 0
    };
  }, [disabled, name, onChangeHandler]);
  return /* @__PURE__ */ React3.createElement(CheckboxContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React3.createElement(import_inline_control_group.InlineControlGroup, __assign(__assign({}, props), {
    element,
    disabled,
    errorText,
    name,
    orientation,
    ref
  }), React3.Children.map(children, (child, index) => {
    return React3.isValidElement(child) ? React3.cloneElement(child, {
      isSelectAll: isSelectAll && index === 0,
      isSelectAllChild: isSelectAll && orientation === "vertical" && index !== 0
    }) : child;
  })));
});
CheckboxGroup.displayName = "CheckboxGroup";
if (false) {
  CheckboxGroup.propTypes = {
    isSelectAll: PropTypes2.bool,
    name: PropTypes2.string.isRequired,
    element: PropTypes2.string,
    onChange: PropTypes2.func,
    disabled: PropTypes2.bool,
    errorText: PropTypes2.string,
    helpText: PropTypes2.string,
    orientation: PropTypes2.oneOf(["vertical", "horizontal"])
  };
}

// src/CheckboxDisclaimer.tsx
var React4 = __toModule(require("react"));
var PropTypes3 = __toModule(require("prop-types"));
var import_box2 = __toModule(require("@twilio-paste/box"));
var import_help_text = __toModule(require("@twilio-paste/help-text"));
var CheckboxDisclaimer = React4.forwardRef((_a, ref) => {
  var {children, element = "CHECKBOX_DISCLAIMER", errorText} = _a, props = __rest(_a, ["children", "element", "errorText"]);
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(import_box2.Box, {
    element,
    backgroundColor: "colorBackground",
    borderRadius: "borderRadius20",
    padding: "space50"
  }, /* @__PURE__ */ React4.createElement(Checkbox, __assign(__assign({}, props), {
    hasError: errorText != null,
    ref
  }), children)), errorText && /* @__PURE__ */ React4.createElement(import_box2.Box, {
    marginTop: "space30",
    element: `${element}_ERROR_TEXT_WRAPPER`,
    marginLeft: "space50"
  }, /* @__PURE__ */ React4.createElement(import_help_text.HelpText, {
    variant: "error"
  }, errorText)));
});
CheckboxDisclaimer.displayName = "CheckboxDisclaimer";
CheckboxDisclaimer.propTypes = {
  children: PropTypes3.node.isRequired,
  errorText: PropTypes3.oneOfType([PropTypes3.string, PropTypes3.node]),
  element: PropTypes3.string
};
