var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __assign = Object.assign;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __rest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  SiblingBox: () => SiblingBox
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_styling_library = __toModule(require("@twilio-paste/styling-library"));
var import_box = __toModule(require("@twilio-paste/box"));
var StyledSiblingBox = import_styling_library.styled(import_box.Box)(({
  _activeSibling,
  _boxChild,
  _checkedAndActiveSibling,
  _checkedAndDisabledSibling,
  _checkedAndFocusSibling,
  _checkedAndHoverSibling,
  _checkedAndInvalidSibling,
  _checkedAndInvalidAndHoverSibling,
  _checkedSibling,
  _checkedSiblingAndBoxChild,
  _disabledSibling,
  _focusSibling,
  _hoverSibling,
  _invalidSibling,
  _invalidAndHoverSibling,
  type = "checkbox"
}) => {
  const active = `input[type=${type}]:active + label &`;
  const checked = `input[type=${type}]:checked + label &, input[type=${type}][aria-checked=mixed] + label &`;
  const checkedAndActive = `input[type=${type}]:checked:active + label &, input[type=${type}][aria-checked=mixed]:active + label &`;
  const checkedAndChild = `input[type=${type}]:checked + label & > *, input[type=${type}][aria-checked=mixed] + label & > *`;
  const checkedAndDisabled = `input[type=${type}]:checked:disabled + label &, input[type=${type}][aria-checked=mixed]:disabled + label &`;
  const checkedAndFocus = `input[type=${type}]:checked:focus + label &, input[type=${type}][aria-checked=mixed]:focus + label &`;
  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + label &, input[type=${type}][aria-checked=mixed]:hover:not(:disabled) + label &`;
  const checkedAndInvalid = `input[type=${type}][aria-invalid=true]:checked + label &`;
  const checkedAndInvalidAndHover = `input[type=${type}][aria-invalid=true]:checked:hover:not(:disabled) + label &`;
  const child = `input[type=${type}] + label & > *`;
  const disabled = `input[type=${type}]:disabled + label &`;
  const focus = `input[type=${type}]:focus + label &`;
  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + label &`;
  const invalid = `input[type=${type}][aria-invalid=true] + label &`;
  const invalidAndHover = `input[type=${type}][aria-invalid=true]:hover:not(:disabled) + label &`;
  return import_styling_library.css({
    [active]: _activeSibling,
    [checked]: _checkedSibling,
    [checkedAndActive]: _checkedAndActiveSibling,
    [checkedAndChild]: _checkedSiblingAndBoxChild,
    [checkedAndDisabled]: _checkedAndDisabledSibling,
    [checkedAndFocus]: _checkedAndFocusSibling,
    [checkedAndHover]: _checkedAndHoverSibling,
    [checkedAndInvalid]: _checkedAndInvalidSibling,
    [checkedAndInvalidAndHover]: _checkedAndInvalidAndHoverSibling,
    [child]: _boxChild,
    [disabled]: _disabledSibling,
    [focus]: _focusSibling,
    [hover]: _hoverSibling,
    [invalid]: _invalidSibling,
    [invalidAndHover]: _invalidAndHoverSibling
  });
});
var SiblingBox = (_a) => {
  var {
    "aria-hidden": ariaHidden = "true",
    alignItems = "center",
    display = "inline-flex",
    element = "SIBLING_BOX",
    flexShrink = 0,
    justifyContent = "center",
    transition = "all 120ms"
  } = _a, props = __rest(_a, [
    "aria-hidden",
    "alignItems",
    "display",
    "element",
    "flexShrink",
    "justifyContent",
    "transition"
  ]);
  return /* @__PURE__ */ React.createElement(StyledSiblingBox, __assign({
    alignItems,
    "aria-hidden": ariaHidden,
    display,
    element,
    flexShrink,
    justifyContent,
    transition
  }, props));
};
SiblingBox.displayName = "SiblingBox";
SiblingBox.propTypes = {
  type: PropTypes.oneOf(["checkbox", "radio"])
};
