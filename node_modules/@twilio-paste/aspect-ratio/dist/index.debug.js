var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  __markAsModule(target);
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true}), module2);
};

// src/index.tsx
__export(exports, {
  AspectRatio: () => AspectRatio
});
var React = __toModule(require("react"));
var PropTypes = __toModule(require("prop-types"));
var import_box = __toModule(require("@twilio-paste/box"));
var import_styling_library = __toModule(require("@twilio-paste/styling-library"));
var RATIO_REGEX = /^(\d+:\d*)$/;
var isCorrectPattern = (ratio) => RATIO_REGEX.test(ratio);
var handlePropValidation = ({ratio}) => {
  const hasRatio = ratio != null && ratio !== "";
  if (!hasRatio) {
    throw new Error(`[Paste: AspectRatio] Missing 'ratio' prop.`);
  }
  if (!isCorrectPattern(ratio)) {
    throw new Error(`[Paste: AspectRatio] 'ratio' is invalid. Use a colon separated number pattern (4:3).`);
  }
};
var AspectRatioContainer = import_styling_library.styled.div`
  position: relative;

  embed,
  iframe,
  object,
  video {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }
`;
var AspectRatio = React.forwardRef((props, ref) => {
  handlePropValidation(props);
  const aspectArray = props.ratio.split(":").map(Number);
  const aspectPercent = aspectArray[1] / aspectArray[0] * 100;
  return /* @__PURE__ */ React.createElement(AspectRatioContainer, {
    ref,
    style: {paddingBottom: `${aspectPercent}%`}
  }, /* @__PURE__ */ React.createElement(import_box.Box, {
    position: "absolute",
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }, props.children));
});
AspectRatio.displayName = "AspectRatio";
if (false) {
  AspectRatio.propTypes = {
    children: PropTypes.node.isRequired,
    ratio: PropTypes.string.isRequired
  };
}
